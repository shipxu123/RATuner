{
    "interconnect_mode": "\ninterconnect_mode {wireload | ple}\n\n_Default_ : wireload\n\n**Read-write** root attribute. Determines whether Genus should use the wire-load models or\nphysical layout estimators (PLEs) during synthesis.\n\nWhen you read in LEF libraries, the interconnect_mode attribute is automatically set to\nple. In this case, Genus will use the physical information from the LEF and capacitance table\nfile during synthesis instead of the wire-load model from the technology library.\n\n```\nAffects this command: syn_opt -physical\nRelated attribute: phys_checkout_innovus_license on page 607\n```\n\n```\nPhysical\u2014Root Attributes\n```\nJanuary 2019 593 Product Version 18.1\n\nIn ple mode the cell area defined in the LEF will be used in place of those in the timing library\n(.lib) area. The timing library area will be used if the physical libraries do not contain any\ncell definitions.\n",
    "drc_first": "\ndrc_first {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Specifies whether to give _all_ design rule constraints higher\npriority than the timing constraints.\n\nThe design rule constraints are optimized in the following order:\n\n**1.** max_transition\n**2.** max_capacitance\n**3.** max_fanout\n\n**Related Information**\n\n```\nAffects these commands: define_clock\nreport_timing\nsyn_generic\nsyn_map\nsyn_opt\n```\n```\nAffects these commands: report design_rules\nreport timing\nsyn_opt\n```\n\n```\nConstraint\u2014Root Attributes\n```\nJanuary 2019 779 Product Version 18.1\n",
    "drc_max_cap_first": "\ndrc_max_cap_first {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Specifies whether to give the maximum capacitance cost higher\npriority than the timing constraints.\n\nTo optimize the maximum capacitance cost before the timing constraints, set the drc_first\nattribute to false and this attribute to true. In this case, the two other design rule\nconstraints are optimized after the timing constraints have been taken into account.\n\n**Note:** If you set the drc_max_cap_first, drc_max_fanout_first, and\ndrc_max_trans_first attributes to true, all design rule constraints are optimized before\nthe timing constraints and they are optimized in the following order:\n\n**1.** max_transition\n**2.** max_capacitance\n**3.** max_fanout\n\n```\nRelated attributes: drc_max_cap_first on page 779\ndrc_max_fanout_first on page 780\ndrc_max_trans_first on page 782\nignore_library_drc on page 814\nmap_drc_first on page 1132\n(design) max_capacitance on page 825\n(libpin) max_capacitance on page 364\n(port) max_capacitance on page 939\n(design) max_fanout on page 826\n(libpin) max_fanout on page 364\n(port) max_fanout on page 940\n(design) max_transition on page 941\n(libpin) max_transition on page 365\n(port) max_transition on page 941\n```\n\n```\nConstraint\u2014Root Attributes\n```\nJanuary 2019 780 Product Version 18.1\n\n**Related Information**\n",
    "drc_max_fanout_first": "\ndrc_max_fanout_first {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Specifies whether to give the maximum fanout cost higher priority\nthan the timing constraints.\n\nTo optimize the maximum fanout cost before the timing constraints, set the drc_first\nattribute to false and this attribute to true. In this case, the two other design rule\nconstraints are optimized after the timing constraints have been taken into account.\n\n```\nAffects these commands: report design_rules\n```\n```\nreport timing\nsyn_opt\nAffected by this attribute: drc_first on page 778\nRelated attributes: drc_max_fanout_first on page 780\ndrc_max_trans_first on page 782\nignore_library_drc on page 814\n(design) max_capacitance on page 825\n(libpin) max_capacitance on page 364\n(port) max_capacitance on page 939\n(design) max_fanout on page 826\n(libpin) max_fanout on page 364\n(port) max_fanout on page 940\n(design) max_transition on page 941\n(libpin) max_transition on page 365\n(port) max_transition on page 941\n```\n\n```\nConstraint\u2014Root Attributes\n```\nJanuary 2019 781 Product Version 18.1\n\n**Note:** If you set the drc_max_cap_first, drc_max_fanout_first, and\ndrc_max_trans_first attributes to true, all design rule constraints are optimized before\nthe timing constraints and in the following order:\n\n**1.** max_transition\n**2.** max_capacitance\n**3.** max_fanout\n\n**Related Information**\n\n```\nAffects these commands: report design_rules\nreport timing\nsyn_opt\nAffected by this attribute: drc_first on page 778\nRelated attributes: drc_max_cap_first on page 779\ndrc_max_trans_first on page 782\nignore_library_drc on page 814\n(design) max_capacitance on page 825\n(libpin) max_capacitance on page 364\n(port) max_capacitance on page 939\n(design) max_fanout on page 826\n(libpin) max_fanout on page 364\n(port) max_fanout on page 940\n(design) max_transition on page 941\n(libpin) max_transition on page 365\n(port) max_transition on page 941\n```\n\n```\nConstraint\u2014Root Attributes\n```\nJanuary 2019 782 Product Version 18.1\n",
    "drc_max_trans_first": "\ndrc_max_trans_first {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Specifies whether to consider the maximum transition cost\nbefore the timing constraints.\n\nTo optimize the maximum transition cost before the timing constraints, set the drc_first\nattribute to false and this attribute to true. In this case, the two other design rule\nconstraints are optimized after the timing constraints have been taken into account.\n\n**Note:** If you set the drc_max_cap_first, drc_max_fanout_first, and\ndrc_max_trans_first attributes to true, the design rule constraints are optimized in the\nfollowing order:\n\n**1.** max_transition\n**2.** max_capacitance\n**3.** max_fanout\n\n**Related Information**\n\n```\nAffects these commands: report design_rules\nreport timing\nsyn_opt\nAffected by this attribute: drc_first on page 778\nRelated attributes: drc_max_cap_first on page 779\ndrc_max_fanout_first on page 780\nignore_library_drc on page 814\n(design) max_capacitance on page 825\n(libpin) max_capacitance on page 364\n(port) max_capacitance on page 939\n(design) max_fanout on page 826\n(libpin) max_fanout on page 364\n(port) max_fanout on page 940\n(design) max_transition on page 941\n```\n\n```\nConstraint\u2014Root Attributes\n```\nJanuary 2019 783 Product Version 18.1\n",
    "fix_min_drcs": "\nfix_min_drcs {false | true}\n\n_Default:_ false\n\n**Read-write** root attribute. When set to true, fixes the minimum design rule costs based\non calculations in the library. Specifically, Genus fixes the minimum capacitance, minimum\ntransition, and minimum fanout design rule violations by resizing the driver and its loads.\n\n**Related Information**\n",
    "auto_partition": "\nauto_partition {true | false}\n\n_Default:_ true\n\n**Read-write** root attribute. Activates automatic internal partitioning of large designs for\nefficient synthesis. This attribute must be set before synthesis.\n\n**Related Information**\n\nPartitioning in _Genus User Guide for Legacy UI_\n",
    "auto_ungroup": "\nauto_ungroup {both | none}\n\n_Default:_ both\n\n**Read-write** root attribute. Activates automatic ungrouping to improve area and timing\nduring synthesis. This attribute must be specified before synthesis.\n\n**Note:** Aggressive ungrouping of user hierarchies happens during\n\n\u25a0 RTL optimization\u2014syn_generic with high effort\n\n\u25a0 Technology mapping\u2014syn_map with high effort\n\nSome ungrouping can occur with low or medium effort as well.\n\n**Related Information**\n\nAutomatic Ungrouping in _Genus User Guide for Legacy UI_\n",
    "bank_based_multibit_inferencing": "\nbank_based_multibit_inferencing {false | true}\n\n_Default:_ false\n\n**Read-write** root attribute. Enables predefined multibit cell inferencing (MBCI) without\nlimiting the multibit mapping to specific multibit library cells. The tool automatically finds a\nsuitable multibit cell. Since this attribute enables _predefined_ multibit cell inferencing, it\nimplies a forced type of mapping and is therefore not QoR-driven.\n\n**Related Information**\n\nMapping to Multibit Cells in _Genus Synthesis Flows Guide for Legacy UI_\n\n```\nAffects this command: syn_map\n```\n```\nAffects this command: syn_opt\nRelated attribute: (instance) map_to_multibit_register on page 1196\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1045 Product Version 18.1\n",
    "boundary_optimize_constant_hpins": "\nboundary_optimize_constant_hpins {inherited | true | false}\n\n_Default:_ inherited\n\n**Read-write** subdesign attribute. Controls constant propagation through the hierarchical\nboundary pins of this subdesign.\n\nYou can specify the following values:\n\n**Note:** If the boundary_opto attribute on the corresponding subdesign is set and disables\nboundary optimization on the pins, the setting of this attribute is ignored. If the\nboundary_optimize_constant_hpins attribute on an instance pin is set to false or\ntrue (does not have the inherited value), the setting of this subdesign attribute is ignored\nfor that pin.\n\n```\nAffects these commands: syn_generic\nsyn_map\nAffected by this attribute: prune_unused_logic on page 1243\nAffects these attributes: boundary_change on page 1383\nboundary_optimize_constant_hpins on page 1045\nboundary_optimize_equal_opposite_hpins on\npage 1046\nboundary_optimize_feedthrough_hpins on page 1047\nboundary_optimize_invert_hpins on page 1048\n```\n```\nfalse Prevents constant propagation.\ninherited Inherits the value of the\nboundary_optimize_constant_hpins root attribute.\ntrue Allows constant propagation.\n```\n\n```\nElaboration and Synthesis\u2014Subdesign Attributes\n```\nJanuary 2019 1250 Product Version 18.1\n\n**Related Information**\n",
    "boundary_optimize_equal_opposite_hpins": "\nboundary_optimize_equal_opposite_hpins {inherited | true | false}\n\n_Default:_ inherited\n\n**Read-write** subdesign attribute. Controls collapsing of equal and opposite hierarchical\nboundary pins of this subdesign. Two hierarchical boundary pins are considered equal\n(opposite), if the tool determines that they always have the same (opposite or inverse) logic\nvalue. You can specify the following values:\n\n```\nAffects these commands: syn_generic\n```\n```\nsyn_map\nAffected by these attributes: boundary_opto on page 1248\n(root) boundary_optimize_constant_hpins on page 1045\nAffects this attribute: (pin) boundary_optimize_constant_hpins on page 1234\nRelated attributes: (pin) boundary_optimize_equal_opposite_hpins on\npage 1235\n(root) boundary_optimize_equal_opposite_hpins on\npage 1046\n(subdesign) boundary_optimize_equal_opposite_hpins on\npage 1250\n(pin) boundary_optimize_feedthrough_hpins on page 1237\n(root) boundary_optimize_feedthrough_hpins on page 1047\n(subdesign) boundary_optimize_feedthrough_hpins on\npage 1252\n(pin) boundary_optimize_invert_hpins on page 1239\n(root) boundary_optimize_invert_hpins on page 1048\n(subdesign) boundary_optimize_invert_hpins on page 1253\n```\n```\nfalse Prevents collapsing of the hierarchical boundary pins.\ninherited Inherits the value of the\nboundary_optimize_equal_opposite_hpins root\nattribute.\n```\n\n```\nElaboration and Synthesis\u2014Subdesign Attributes\n```\nJanuary 2019 1251 Product Version 18.1\n\n**Note:** If the boundary_opto attribute on the corresponding subdesign is set and disables\nboundary optimization on the pins, the setting of this attribute is ignored. If the\nboundary_optimize_equal_opposite_hpins attribute on an instance pin is set to\nfalse or true (does not have the inherited value), the setting of this subdesign attribute\nis ignored for that pin.\n\n**Related Information**\n\n```\ntrue Allows collapsing of the hierarchical boundary pins.\n```\n```\nAffects these commands: syn_generic\nsyn_map\nAffected by these attributes: boundary_opto on page 1248\n(root) boundary_optimize_equal_opposite_hpins on\npage 1250\nAffects this attribute: (pin) boundary_optimize_equal_opposite_hpins on\npage 1235\nRelated attributes: (pin) boundary_optimize_constant_hpins on page 1234\n(root) boundary_optimize_constant_hpins on page 1045\n(subdesign) boundary_optimize_constant_hpins on\npage 1249\n(pin) boundary_optimize_feedthrough_hpins on page 1237\n(root) boundary_optimize_feedthrough_hpins on page 1047\n(subdesign) boundary_optimize_feedthrough_hpins on\npage 1252\n(pin) boundary_optimize_invert_hpins on page 1239\n(root) boundary_optimize_invert_hpins on page 1048\n(subdesign) boundary_optimize_invert_hpins on page 1253\n```\n\n```\nElaboration and Synthesis\u2014Subdesign Attributes\n```\nJanuary 2019 1252 Product Version 18.1\n",
    "boundary_optimize_feedthrough_hpins": "\nboundary_optimize_feedthrough_hpins {inherited | true | false}\n\n_Default:_ inherited\n\n**Read-write** subdesign attribute. Controls optimization of feedthrough pins of this\nsubdesign. Hierarchical boundary pins are feedthrough pins, if output pins have always the\nsame (or inverted) logic value as an input pin. Such feedthrough pins can be routed around\nthe subdesign and no connections or logic is needed inside the subdesign for these pins. You\ncan specify the following values:\n\n**Note:** If the boundary_opto attribute on the corresponding subdesign is set and disables\nboundary optimization on the pins, the setting of this attribute is ignored. If the\nboundary_optimize_feedthrough_hpins attribute on an instance pin is set to false\nor true (does not have the inherited value), the setting of this subdesign attribute is\nignored for that pin.\n\n**Related Information**\n\n```\nfalse Prevents optimization of feedthrough pins.\ninherited Inherits the value of the\nboundary_optimize_feedthrough_hpins root attribute.\ntrue Allows optimization of feedthrough pins.\n```\n```\nAffects these commands: syn_generic\nsyn_map\nAffected by these attributes: boundary_opto on page 1248\n(root) boundary_optimize_feedthrough_hpins on page 1047\nAffects this attribute: (pin) boundary_optimize_feedthrough_hpins on page 1237\nRelated attributes: (pin) boundary_optimize_constant_hpins on page 1234\n(root) boundary_optimize_constant_hpins on page 1045\n(subdesign) boundary_optimize_constant_hpins on\npage 1249\n(pin) boundary_optimize_equal_opposite_hpins on\npage 1235\n```\n\n```\nElaboration and Synthesis\u2014Subdesign Attributes\n```\nJanuary 2019 1253 Product Version 18.1\n",
    "boundary_optimize_invert_hpins": "\nboundary_optimize_invert_hpins {inherited | true | false}\n\n_Default:_ inherited\n\n**Read-write** subdesign attribute. Controls hierarchical boundary pin inversion of this\nsubdesign. You can specify the following values:\n\n**Note:** If the boundary_opto attribute on the corresponding subdesign is set and disables\nboundary optimization on the pins, the setting of this attribute is ignored. If the\nboundary_optimize_invert_hpins attribute on an instance pin is set to false or true\n(does not have the inherited value), the setting of this subdesign attribute is ignored for\nthat pin.\n\n**Note:** If this attribute is set to true, the write_do_lec command adds the following LEC\ncommand to the dofile:\n\nSET Naming Rule _BAR -Inverted_pin_extension\n\nThis LEC command specifies the string that is appended to pin names and net names by\nGenus when hierarchical boundary pins are inverted during synthesis. To modify this string\nuse the boundary_optimize_invert_hier_pins_renaming_extension root\nattribute. In the previous command, the _BAR value corresponds to the default value of this\nattribute.\n\n```\n(root) boundary_optimize_equal_opposite_hpins on\npage 1046\n```\n```\n(subdesign) boundary_optimize_equal_opposite_hpins on\npage 1250\n(pin) boundary_optimize_invert_hpins on page 1239\n(root) boundary_optimize_invert_hpins on page 1048\n(subdesign) boundary_optimize_invert_hpins on page 1253\n```\n```\nfalse Prevents boundary pin inversion.\ninherited Inherits the value of the\nboundary_optimize_invert_hpins root attribute.\ntrue Allows boundary pin inversion.\n```\n\n```\nElaboration and Synthesis\u2014Subdesign Attributes\n```\nJanuary 2019 1254 Product Version 18.1\n\n**Related Information**\n",
    "boundary_optimize_invert_hpins_rename_nets": "\nboundary_optimize_invert_hpins_rename_nets {true | false}\n\n_Default:_ true\n\n**Read-write** root attribute. Controls renaming of nets driven by the inverted hierarchical\nboundary pins. By default, the nets will be renamed.\n\n**Related Information**\n\n```\nAffected by this attribute: boundary_opto on page 1248\nRelated attributes: (pin) boundary_optimize_constant_hpins on page 1234\n(root) boundary_optimize_constant_hpins on page 1045\n(subdesign) boundary_optimize_constant_hpins on\npage 1249\n(pin) boundary_optimize_equal_opposite_hpins on\npage 1235\n(root) boundary_optimize_equal_opposite_hpins on\npage 1046\n(subdesign) boundary_optimize_equal_opposite_hpins on\npage 1250\n(pin) boundary_optimize_feedthrough_hpins on page 1237\n(root) boundary_optimize_feedthrough_hpins on page 1047\n(subdesign) boundary_optimize_feedthrough_hpins on\npage 1252\nboundary_optimize_invert_hpins_rename_nets on\npage 1049\nboundary_optimize_invert_hpins_renaming_extension on\npage 1050\n```\n```\nAffects these commands: syn_generic\nsyn_map\nAffected by this attribute: boundary_optimize_invert_hpins on page 1048\nAffects this attribute: boundary_optimize_invert_hpins_renaming_extension on\npage 1050\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1050 Product Version 18.1\n",
    "cb_preserve_ports_nets": "\ncb_preserve_ports_nets {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Preserves nets and hierarchical pins involved in combinational\nloops after elaboration to keep reference points for further verification.\n\n**Related Information**\n\n```\nAffects these commands: syn_generic\nsyn_map\n```\n```\nRelated attribute: print_ports_nets_preserved_for_cb on page 1159\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1052 Product Version 18.1\n",
    "comb_seq_merge_message_threshold": "\ncomb_seq_merge_message_threshold _integer_\n\n_Default_ : 10\n\n**Read-write** root attribute. Enables the printing of detailed messages when hierarchical\ninstances with more cells than the specified threshold value are merged.\n\n**Example**\n\nlegacy_genus:/> set_attr comb_seq_merge_message_threshold 2 /\nSetting attribute of root \u2019/\u2019: \u2019comb_seq_merge_message_threshold\u2019 = 2\nInfo : Combinational hierarchical blocks with identical inputs have been merged.\n[GLO-40]\n: Instances \u2019sub0\u2019 and \u2019sub1\u2019 in \u2019test\u2019 have been merged.\n: This optimization usually reduces design area. To prevent merging of\ncombinational hierarchical blocks, set the \u2019merge_combinational_hier_instances\u2019\nroot attribute to \u2019false\u2019 or the \u2019merge_combinational_hier_instance\u2019 instance\nattribute to \u2019false\u2019.\n\n**Related Information**\n",
    "control_logic_optimization": "\ncontrol_logic_optimization {inherited | none | basic | advanced}\n\n_Default_ : inherited\n\n**Read-write** subdesign attribute. Controls the optimization of control logic (described in the\nRTL through conditional constructs like case statements, if-then-else statements, conditional\n\n```\nAffects these commands: syn_generic\n```\n```\nsyn_map\nwrite_do_lec\nAffected by these attributes: boundary_opto on page 1248\n(root) boundary_optimize_invert_hpins on page 1048\nAffects this attribute: (pin) boundary_optimize_invert_hpins on page 1239\nRelated attributes: (pin) boundary_optimize_constant_hpins on page 1234\n(root) boundary_optimize_constant_hpins on page 1045\n(subdesign) boundary_optimize_constant_hpins on\npage 1249\n(pin) boundary_optimize_equal_opposite_hpins on\npage 1235\n(root) boundary_optimize_equal_opposite_hpins on\npage 1046\n(subdesign) boundary_optimize_equal_opposite_hpins on\npage 1250\n(pin) boundary_optimize_feedthrough_hpins on page 1237\n(root) boundary_optimize_feedthrough_hpins on page 1047\n(subdesign) boundary_optimize_feedthrough_hpins on\npage 1252\nboundary_optimize_invert_hpins_rename_nets on\npage 1049\nboundary_optimize_invert_hpins_renaming_extension on\npage 1050\n```\n\n```\nElaboration and Synthesis\u2014Subdesign Attributes\n```\nJanuary 2019 1255 Product Version 18.1\n\nselects, and so on) in this subdesign during generic synthesis. You can specify any of the\nfollowing values:\n\n**Note:** All control optimization transformations are verifiable. The advanced transformations\nmight result in better QoR but can also increase the runtime. For best results, set this attribute\nafter you have elaborated the design, but before generic synthesis.\n\n**Related Information**\n",
    "delete_flops_on_preserved_net": "\ndelete_flops_on_preserved_net {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Controls the deletion of load flip-flops on a preserved net. By\ndefault, the flops can be deleted.\n\nSet this attribute to false to keep load flip-flops even if they do not drive any primary output,\ncan be replaced with a constant, or can be deleted in some other optimization.\n\n**Related Information**\n",
    "delete_hier_insts_on_preserved_net": "\ndelete_hier_insts_on_preserved_net {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Controls the deletion of empty hierarchical instances driven by a\npreserved net.\n\nSet this attribute to false to keep the empty modules on a preserved net, even if they do not\ndrive any primary output.\n\n**Related Information**\n\n```\nAffects this command: syn_generic\n```\n```\nRelated attributes: (design) control_logic_optimization on page 1180\n(subdesign) control_logic_optimization on page 1254\n```\n```\nAffects these commands: syn_generic\nsyn_map\n```\n```\nAffects these commands: syn_generic\nsyn_map\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1054 Product Version 18.1\n",
    "delete_unloaded_insts": "\ndelete_unloaded_insts {inherited | false | true}\n\n_Default_ : inherited\n\n**Read-write** subdesign attribute. Controls the deletion of unloaded hierarchical instances.\nYou can specify one of the following values:\n\n```\ninherited Inherits the value from the control_logic_optimization\nroot attribute.\nadvanced Applies advanced level optimization\nbasic Applies basic optimization.\nnone Turns off optimization.\n```\n```\nAffects this command: syn_generic\nRelated attributes: (root) control_logic_optimization on page 1052\n(design) control_logic_optimization on page 1180\n```\n```\nfalse Preserves any pre-existing hierarchical instances.\n```\n```\nNote: If you just want to maintain mapped and unmapped\nsequential instances, set the delete_unloaded_seqs\nattribute to false. Unmapped (Boolean) non-hierarchical\ninstances cannot be rescued if they are unloaded.\n```\n```\ninherited Inherits the value from the delete_unloaded_insts root\nattribute.\ntrue Removes logic if none of the outputs are connected.\n```\n\n```\nElaboration and Synthesis\u2014Subdesign Attributes\n```\nJanuary 2019 1256 Product Version 18.1\n\n**Related Information**\n",
    "delete_unloaded_seqs": "\ndelete_unloaded_seqs {inherited | false | true}\n\n_Default_ : inherited\n\n**Read-write** subdesign attribute. Controls the deletion of unloaded sequential instances in\nthis subdesign. You can specify one of the following values:\n\n**Related Information**\n\n```\nAffects these commands: syn_generic\n```\n```\nsyn_map\nAffected by this attribute: (root) delete_unloaded_insts on page 1054\nRelated attributes: (root) delete_unloaded_seqs on page 1054\n(design) delete_unloaded_seqs on page 1181\n(subdesign) delete_unloaded_seqs on page 1256\n```\n```\nfalse Prevents the deletion of unloaded sequential instances.\ninherited Inherits the value from the delete_unloaded_seqs root\nattribute.\ntrue Removes flip-flops and logic if they are not transitively fanning\nout to output ports.\n```\n```\nAffects these commands: syn_generic\nsyn_map\nAffected by this attribute: (root) delete_unloaded_seqs on page 1054\nRelated attributes: (design) delete_unloaded_seqs on page 1181\n(root) delete_unloaded_insts on page 1054\n(subdesign) delete_unloaded_insts on page 1255\nhdl_preserve_unused_registers on page 1106\n```\n\n```\nElaboration and Synthesis\u2014Subdesign Attributes\n```\nJanuary 2019 1257 Product Version 18.1\n",
    "dont_use_qbar_seq_pins": "\ndont_use_qbar_seq_pins {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Controls the use of the Qbar output pins of sequential libcells\nduring optimization if other possibilities exist. By default, these pins can be used.\n\n**Related Information**\n",
    "dp_analytical_opt": "\ndp_analytical_opt {standard |extreme | off}\n\n_Default_ : standard\n\n**Read-write** root attribute. Specifies the effort level for analytical optimization of datapath\nlogic. For best results, set the dp_analytical_opt attribute prior to running the\nelaborate command.\n\nThis attribute can have the following settings:\n\n**Note:** Analytical optimization is not affected by the value of the syn_generic_effort\nattribute, nor by the value of the dp_area_mode attribute (to be obsoleted soon).\n\n```\nAffects these commands: syn_map\nsyn_opt\nRelated attribute: (instance) dont_use_qbar_pin on page 1192\n```\n```\nextreme Enables the most aggressive area-mode analytical\noptimizations, possibly degrading timing.\noff Disables analytical optimization.\nstandard Enables analytical optimizations that reduce area without\ndegrading timing.\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1057 Product Version 18.1\n\n**Related Information**\n\nlAnalytical Optimization in _Genus Datapath Synthesis Guide for Legacy UI_\n",
    "dp_csa": "\ndp_csa {inherited | basic | none}\n\n_Default_ : inherited\n\n**Read-write** subdesign attribute. Controls the carry save adder (CSA) transformations\nwithin the subdesign. CSA opportunities outside the specified subdesign are unaffected.You\ncan specify one of the following values:\n\n**Related Information**\n",
    "dp_rewriting": "\ndp_rewriting {inherited | none | basic | advanced}\n\n_Default_ : inherited\n\n**Read-write** subdesign attribute. Controls how the datapath rewriting optimization occurs\nwhen performing syn_gen with high effort. If the value of this attribute is inherited, the\neffort level of the optimization at the specified module will be identical to (\u201cinherited from\u201d) the\nroot level attribute of the same name.\n\n**Examples**\n\n\u25a0 The following example turns on this optimization only on certain set of modules:\n\n```\nbasic Applies basic transformation.\ninherited Inherits the value from the dp_csa design attribute.\nnone Turns off CSA transformation.\n```\n```\nAffects this command: syn_generic\nRelated attributes: (design) dp_csa on page 1182\n(root) dp_csa on page 1057\n```\n```\nadvanced Applies advanced level optimization\nbasic Applies basic optimization.\ninherited Inherits the value from the dp_rewriting root attribute.\n```\n```\nnone Turns off optimization.\n```\n\n```\nElaboration and Synthesis\u2014Subdesign Attributes\n```\nJanuary 2019 1258 Product Version 18.1\n\n```\nlegacy_genus:/> set_attribute dp_rewriting none /\nlegacy_genus:/> set_attribute dp_rewriting basic $ list_of_subd_vdirs\n```\n\u25a0 The following example turns off this optimization only on a certain set of modules:\n\n```\nlegacy_genus:/> set_attribute dp_rewriting none $ list_of_subd_vdirs\n```\n**Related Information**\n",
    "dp_speculation": "\ndp_speculation {inherited | basic | none}\n\n_Default_ : inherited\n\n**Read-write** subdesign attribute.Controls RTL speculation (unsharing) transformations\nwithin a particular subdesign.\n\nBy default, the subdesign attribute inherits the value of the dp_speculation design\nattribute\n\nWhen the dp_speculation attribute is set to none, no RTL speculation (unsharing)\ntransformations are done.\n\nWhen the dp_speculation attribute is set to basic, but the dp_analytical_opt\nattribute is set to off, speculation transformations are performed when synthesis is\nperformed with the syn_generic_effort attribute set to high. In this case, speculation\ncan only be applied to operators driven by a single MUX.\n\nWhen the dp_speculation attribute is set to basic, and the dp_analytical_opt\nattribute is set to standard or extreme, speculation can be applied to operators driven by\na chain of MUXES. In this case, speculation is independent of the syn_generic_effort\nsetting.\n\n**Example**\n\nThe following command turns off RTL speculation transformations within subdesign mid:\n\nlegacy_genus:/> set_attribute dp_speculation none [find /designs* -subdesign mid]\n\n**Related Information**\n\n```\nAffects this command: syn_generic with high effort\nAffected by these attributes: dp_analytical_opt on page 1056\nsyn_generic_effort on page 1168\nRelated attributes: (design) dp_speculation on page 1184\n(root) dp_speculation on page 1059\n```\n\n```\nElaboration and Synthesis\u2014Subdesign Attributes\n```\nJanuary 2019 1260 Product Version 18.1\n",
    "dp_ungroup_during_syn_map": "\ndp_ungroup_during_syn_map {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Controls whether theinferred datapath hierarchies and\ninstantiated ChipWare hierarchies should be ungrouped during mappin (syn_map). When\nset to false, ungrouping occurs during optimization (syn_opt).\n\n**Related Information**\n\n```\nAffects this command: syn_generic\nAffected by these attributes: dp_analytical_opt on page 1056\nsyn_generic_effort on page 1168\nRelated attributes: (design) dp_speculation on page 1184\n(subdesign) dp_speculation on page 1259\n```\n```\nAffects these commands: syn_map\nsyn_opt\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1061 Product Version 18.1\n",
    "driver_for_unloaded_hier_pins": "\ndriver_for_unloaded_hier_pins {Z| 0}\n\n_Default:_ Z\n\n**Read-write** root attribute. Controls how unloaded subdesign ports are handled during\nincremental optimization. You can specify to connect these ports to constant 0, or you can\nleave them unconnected (default) to minimize the number of assigns in the netlist.\n\n**Note:** This attribute does not apply to clock-gating hierarchies.\n\n**Related Information**\n",
    "exact_match_seq_async_ctrls": "\nexact_match_seq_async_ctrls {false | true}\n\n_Default:_ false\n\n**Read-write** root attribute. If set to true, Genus tries to avoid tying off the asynchronous\ncontrol inputs of a flop to constants during technology mapping.\n\n**Note:** You must set this attribute to true before you load your library.\n\n**Related Information**\n\nSpecifying Set and Reset Synthesis Pragmas in _Genus HDL Modeling Guide for Legacy\nUI_\n\n```\nAffects this command: syn_opt\n```\n```\nAffects this command: syn_map\nRelated attribute exact_match_seq_sync_ctrls on page 1063\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1063 Product Version 18.1\n",
    "exact_match_seq_sync_ctrls": "\nexact_match_seq_sync_ctrls {false | true}\n\n_Default:_ false\n\n**Read-write** root attribute. If set to true, Genus will try to force map the synchronous flops\ninferred from RTL to complex library flip-flops with corresponding synchronous inputs\nregardless of QoR. If the library does not have the appropriate synchronous control libcells,\nsimple flip-flops and combinational logic will be used.\n\nIt is recommended to set this attribute before reading the libraries to reduce the runtime of\nprocessing the libraries.\n\n**Note:** This attribute may have a positive impact on clock gating coverage due to the explicit enable\n\n**Related Information**\n\nSpecifying Set and Reset Synthesis Pragmas in _Genus HDL Modeling Guide for Legacy\nUI_\n\nControlling Clock Gate Enable Modelling for Synchronous Reset in _Genus Low Power\nGuide for Legacy UI_\n\n```\nAffects this command: syn_map\nRelated attribute exact_match_seq_async_ctrls on page 1062\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1064 Product Version 18.1\n",
    "force_merge_combos_into_multibit_cells": "\nforce_merge_combos_into_multibit_cells {false | true}\n\n_Default:_ false\n\n**Read-write** root attribute. Merges single-bit combinational instances into an appropriate\nmultibit combinational instance independent of the impact on the QoR. When enabled,\nmultibit cell inferencing will occur even if it degrades the delay, power, or area QOR of the\ndesign. This is useful for increasing multibit coverage but might negatively impact the QoR.\n\n**Examples**\n\nAssume two single bit instances g1 and 2 can be merged into a multibit instance. The library\nhas three suitable multibit cells: 2g1x1, 2g1x2, and 2g1x3.\n\n\u25a0 Consider only force_merge_combos_into_multibit_cells enabled:\n\n```\nset_attribute multibit_adaptive_costing false /\nset_attribute force_merge_combos_into_multibit_cells true /\nIn this case, the tool computes the total cost with timing for each of the possible multibit\nlibcell candidates. The best candidate for multibit cell merging will be chosen irrespective\nof whether it improves or degrades the delay QoR of the design.\n```\n\u25a0 Consider both force_merge_combos_into_multibit_cells and\nmultibit_adaptive_costing are enabled:\nset_attribute multibit_adaptive_costing true /\nset_attribute force_merge_combos_into_multibit_cells true /\nIn this case, the tool computes the power and area costs for each of the possible multibit\nlibcell candidates. The best candidate for multibit cell merging will be chosen irrespective\nof whether it improves the delay QoR of the design.\n\n**Related Information**\n\nMapping to Multibit Cells in _Genus Synthesis Flows Guide for Legacy UI_\n\n```\nAffects this command: syn_opt\nAffected by this attribute: use_multibit_cells on page 1173\nRelated attributes: dont_merge_multibit on page 1190\nforce_merge_seqs_into_multibit_cells on page 1065\nmerge_multibit on page 1193\nmap_to_multibit_register on page 1196\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1065 Product Version 18.1\n",
    "force_merge_seqs_into_multibit_cells": "\nforce_merge_seqs_into_multibit_cells {false | true}\n\n_Default:_ false\n\n**Read-write** root attribute. Merges single-bit sequential instances into an appropriate\nmultibit sequential instance independent of the impact on the QoR. When enabled, multibit\ncell inferencing will occur even if it degrades the delay, power, or area QOR of the design. This\nis useful for increasing multibit coverage but might negatively impact the QoR.\n\n**Examples**\n\nAssume two single bit instances reg1 and reg2 can be merged into a multibit instance. The\nlibrary has three suitable multibit cells: dual1, dual2, and dual3.\n\n\u25a0 Consider only force_merge_seqs_into_multibit_cells enabled:\n\n```\nset_attribute multibit_adaptive_costing false /\nset_attribute force_merge_seqs_into_multibit_cells true /\nIn this case, the tool computes the total cost with timing for each of the possible multibit\nlibcell candidates. The best candidate for multibit cell merging will be chosen irrespective\nof whether it improves or degrades the delay QoR of the design.\n```\n\u25a0 Consider both force_merge_seqs_into_multibit_cells and\nmultibit_adaptive_costing are enabled:\nset_attribute multibit_adaptive_costing true /\nset_attribute force_merge_seqs_into_multibit_cells true /\nIn this case, the tool computes the power and area costs for each of the possible multibit\nlibcell candidates. The best candidate for multibit cell merging will be chosen irrespective\nof whether it improves the delay QoR of the design.\n\n**Related Information**\n\nMapping to Multibit Cells in _Genus Synthesis Flows Guide for Legacy UI_\n\n```\nAffects this command: syn_opt\nAffected by this attribute: use_multibit_cells on page 1173\nRelated attributes: dont_merge_multibit on page 1190\nforce_merge_combos_into_multibit_cells on page 1064\nmerge_multibit on page 1193\nmap_to_multibit_register on page 1196\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1066 Product Version 18.1\n",
    "hdl_append_generic_ports": "\nhdl_append_generic_ports {true | false}\n\n_Default:_ true\n\n**Read-write** root attribute. When set to false, prevents that generic port information is\nappended to the module name. By default, Genus changes the name of the module by\nappending the interface name and modport name to the original module name.\n\n**Example**\n\nConsider the following RTL:\n\ninterface nand_intf (\ninput wire [1:0] a,\ninput wire [1:0] b,\noutput wire [1:0] y );\nmodport FOO (\ninput a, b,\noutput y);\nendinterface\n\n// Top module\nmodule top;\nnand_intf intf_inst ();\ntest1 t1(\nintf_inst.FOO\n);\nendmodule\n\n// Sub Module\nmodule test1(nand_intf.FOO intf);\nassign intf.y = intf.a & intf.b;\nendmodule\n\n```\nAffects this command: read_hdl\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1067 Product Version 18.1\n\nBy default, the generated netlist after elaboration looks like:\n",
    "hdl_auto_async_set_reset": "\nhdl_auto_async_set_reset {false | true}\n\n_Default:_ false\n\n**Read-write** root attribute. When set to true, specifies that Genus implement logic using\nasynchronous set and reset pins on a latch if that logic controls an asynchronous assignment\nof a constant 0 or a constant 1.\n\n**Note:** This attribute is only supported in the RTL flow.\n\n**Note:** This attribute does not affect the syn_map command, which may implement the set\nand reset logic using latch data pins.\n\n**Example**\n\nThe following command implements the reset signal in the RTL using a latch asynchronous\nreset pin. See the example RTL and the corresponding schematic in HDL-Related Attributes\nof _Genus HDL Modeling Guide for Legacy UI_.\n\nlegacy_genus:/ set_attribute hdl_auto_async_set_reset true\n\n**Related Information**\n",
    "hdl_auto_sync_set_reset": "\nhdl_auto_sync_set_reset {true | false}\n\n_Default:_ true\n\n**Read-write** root attribute. When set to true, specifies that Genus implement logic using\nsynchronous set and reset pins on a flip-flop if that logic controls a synchronous assignment\nof a constant 0 or a constant 1.\n\nThis attribute does not affect the syn_map command, which may implement the set and reset\nlogic using flip-flop data pins.\n\n**Note:** This attribute is supported only in the RTL flow.\n\n**Example**\n\nThe following command implements the reset signal shown in the RTL using a flip-flop\nsynchronous reset pin. See the example RTL and the corresponding schematic in the\nHDL-Related Attributes section of the _Genus HDL Modeling Guide for Legacy UI_ manual.\n\nlegacy_genus:/ set_attribute hdl_auto_sync_set_reset true\n\n**Related Information**\n",
    "hdl_bidirectional_assign": "\nhdl_bidirectional_assign {true |false}\n\n_Default:_ true\n\n**Read-write** root attribute. When set to true, specifies that Genus must interpret Verilog\ncontinuous assign statements, where the right-hand-side is undriven, as being bidirectional.\nIn this case, Genus matches the behavior of the Conformal\u00ae Logical Equivalence Checker.\nTo prevent bidirectional assignments, set this attribute to false. In the latter case, Genus\nmatches the behavior of the Verilog Language Reference and the Incisive Simulator.\n\n**Note:** The attribute does not affect VHDL designs.\n\n**Related Information**\n\n```\nAffects these commands: elaborate\nread_hdl\n```\n```\nAffects this command: elaborate\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1072 Product Version 18.1\n",
    "hdl_bidirectional_wand_wor_assign": "\nhdl_bidirectional_wand_wor_assign {false | true}\n\n_Default:_ false\n\n**Read-write** root attribute. Controls the handling of assignments involving signal names\ndeclared as wand or wor nettypes in System Verilog (SV) designs.\n\nGenus can treat assignments as bidirectional, if the LHS and RHS of the assignment only\nconsists of simple signal references or their constant-indexed part-selects or concatenations.\nIn such assignments, the driver pins or load pins can be on either side of the assignment,\nsince the assignment is treated like a simple connection between the pins.\n\nIf connections involve multiple driver pins then the type of the net (as per declaration type\nwand/wor/wire) determines the final value of the net and this value is used to drive all the load\npins on the net.\n\nThe attribute addresses situations, when two conditions are present:\n\n**1.** A connection (net) is determined by one/more bidirectional assignments.\n**2.** One or more of the signals involved in the assignments are declared as wand/wor.\n\nWhen the attribute is set to false (default), assignments to wand/wor declared signals are\ntreated as unidirectional and the driver/loads on the LHS side of the assignment are not\nconsidered part of the same net as the driver-loads of the RHS side of the assignment.\n\nWhen the attribute is set to true, assignments to wand/wor declared signals are treated as\nbidirectional and the driver/loads on the LHS side of the assignment are considered part of\nthe same net as the driver-loads of the RHS side of the assignment. As a result, all drivers\n(from both sides) are resolved as per wand/wor resolution to determine the value of the net.\n\n**Example**\n\nConsider the following RTL:\n\nmodule t (input in1, in2, in4, input in3, output out1, out2 );\nwire temp1,temp2,temp3;\nwor temp1_wor;\nassign temp1 = (in1 == in2);\nassign temp2 = (in3 == in4);\nassign out1 = temp1;\nassign temp1_wor = temp1; //// assignment to a wor type\nassign temp1_wor = temp2; //// assignment to a wor type\nassign out2 = ~temp3;\nassign temp3 = temp1_wor & in3;\n\nendmodule\n\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1073 Product Version 18.1\n\n\u25a0 By default, the generated netlist after elaboration looks like:\n\n```\nmodule t(in1, in2, in4, in3, out1, out2);\ninput in1, in2, in4, in3;\noutput out1, out2;\nwire in1, in2, in4, in3;\nwire out1, out2;\nwire n_2, temp1_wor, temp3;\nnot g1 (out2, temp3);\nand g2 (temp3, temp1_wor, in3);\nor g3 (temp1_wor, out1, n_2);\nxnor g4 (out1, in1, in2);\nxnor g5 (n_2, in3, in4);\nendmodule\nNote: out1 is xnor of in1 and in2. out1 does not depend on in3, in4.\n```\n\u25a0 When you set this attribute to true, the generated netlist after elaboration looks like:\n\n```\nmodule t(in1, in2, in4, in3, out1, out2);\ninput in1, in2, in4, in3;\noutput out1, out2;\nwire in1, in2, in4, in3;\nwire out1, out2;\nwire n_1, n_2, temp3;\nnot g1 (out2, temp3);\nand g2 (temp3, out1, in3);\nor g3 (out1, n_1, n_2);\nxnor g4 (n_1, in1, in2);\nxnor g5 (n_2, in3, in4);\nendmodule\nNote: out1 depends on all four inputs: in1, in2, in3 and in4.\n```",
    "hdl_case_mux_threshold": "\nhdl_case_mux_threshold _integer_\n\n_Default:_ 2\n\n**Read-write** root attribute. Determines whether a binary multiplexer (encoded select inputs)\nor a one-hot multiplexer (decoded select inputs) is generated to implement signals assigned\nwithin case, if-then-else, and choice statements. If the number of distinct values assigned to\nthe signal is greater than or equal to the specified value, a binary multiplexer is implemented,\notherwise a one-hot multiplexer is implemented.\n\n**Example**\n\nConsider the following RTL code.\n\nmodule bmux(a_1,a_2,a_3,a_4,a_5,a_6,a_7,a_8,a_9,a_10,out_1,sel);\ninput a_1,a_2,a_3,a_4,a_5,a_6,a_7,a_8,a_9,a_10;\ninput [3:0] sel;\noutput out_1;\nreg out_1;\nalways @(sel or a_1 or a_2 or a_3 or a_4 or a_5 or a_6 or a_7 or a_8 or a_9 or a_10)\nbegin\ncase(sel)\n4\u2019d6: out_1 = a_1;\n4\u2019d11: out_1 = a_2;\n4\u2019d13: out_1 = a_3;\n4\u2019d9: out_1 = a_4;\n4\u2019d7: out_1 = a_5;\n4\u2019d3: out_1 = a_6;\n4\u2019d4: out_1 = a_7;\n4\u2019d2: out_1 = a_8;\n4\u2019d14: out_1 = a_9;\n4\u2019d15: out_1 = a_10;\ndefault: out_1 = 1\u2019b0;\nendcase\nend\nendmodule // bmux\n\nIncluding the default branch, there are 11 case items in this case statement, which are\naddressed using a 4 bit sel signal. The tool needs to implement a 16-to-1 binary multiplexer\nto select among these 11 case items.\n\n\u25a0 Assume the following script:\n\n```\nset_attr library tutorial.lib /\nset_attr hdl_case_mux_threshold 17 /\nread_hdl test.v\nelaborate\nThe number of distinct values supported by the binary mux needed (16) is less than value\nof the hdl_case_mux_threshold attribute (17). Therefore, the tool will use a one hot\nmux to implement this case statement.\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1076 Product Version 18.1\n\n\u25a0 Assume the following script:\n\n```\nset_attr hdl_case_mux_threshold 15 /\nset_attr library tutorial.lib /\nread_hdl test.v\nelaborate\nThe number of distinct values supported by the binary mux needed (16) is more than\nvalue of the hdl_case_mux_threshold attribute (15). Therefore, the tool will use a\nbinary multiplexer to implement this case statement.\n```\n**Related Information**\n",
    "hdl_delete_transparent_latch": "\nhdl_delete_transparent_latch {true | false}\n\n_Default:_ true\n\n**Read-write** root attribute. Controls whether transparent latches are preserved or deleted\nduring elaboration. When set to true, deletes latches that are always enabled.\n\n**Note:** This attribute is supported only in the RTL flow.\n\n**Related Information**\n",
    "hdl_enable_proc_name": "\nhdl_enable_proc_name {false | true}\n\n_Default:_ false\n\n**Read-write** root attribute. When set to true, updates the value of the hdl_proc_name\ninstance attribute for sequential elements during elaboration.\n\n**Related Information**\n",
    "hdl_index_mux_threshold": "\nhdl_index_mux_threshold _integer_\n\n_Default:_ 8\n\n**Read-write** root attribute. Specifies the minimum number of data inputs the tool requires to\nimplement binary multiplexers instead of AND/OR logic for variable index array references,\nsuch as y = x[i].\n\n**Example**\n\nConsider the following RTL code:\n\nmodule top (bit_out, dword, sel);\noutput big_out;\ninput [3:0] dword;\ninput [1:0] sel;\nassign big_vect = dword[sel];\nendmodule\n\nUsing the following script:\n\nset_attr library tutorial.lib\nset_attribute hdl_index_mux_threshold 4 /\nread_hdl test.v\nelab\n\nThe number of data inputs in the array indexing (4) is not less than the value of the\nhdl_index_mux_threshold attribute (4). Therefore, a 4-to-1 binary mux is used to\nimplement the selection of one of the four bits of signal dword.\n\n**Related Information**\n",
    "hdl_max_map_to_mux_control_width": "\nhdl_max_map_to_mux_control_width _integer_\n\n_Default:_ 10\n\n**Read-write** root attribute. Specifies the maximum size of multiplexers that can be\ngenerated by Genus for HDL case statements that are marked with the map_to_mux\npragma. If the width of the case condition, which is implemented as the multiplexer control\ninput, exceeds the value set by this attribute, Genus will ignore the pragma and generate\nmore efficient logic using AND and OR gates.\n\n**Related Information**\n",
    "hdl_parameterize_module_name": "\nhdl_parameterize_module_name {true | false}\n\n_Default:_ true\n\n**Read-write** root attribute. Controls whether to add the parameter values in the\nparameterized module name for the top-level design or the design specified with the\nelaborate command. By default, the parameter value is added to the design name.\n\nThis attribute is supported only in the RTL flow.\n\n**Related Information**\n\nNaming Parameterized Modules in _Genus User Guide for Legacy UI_ manual for detailed\nexamples.\n\n```\nAffects these commands: elaborate\nread_hdl\n```\n```\nAffects this command: elaborate\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1100 Product Version 18.1\n",
    "hdl_preserve_async_sr_priority_logic": "\nhdl_preserve_async_sr_priority_logic {false | true}\n\n_Default:_ false\n\n**Read-write** root attribute. When set to true, Genus is prevented from generating\nredundant logic when, during mapping, a flip-flop cell is selected that has the same priority\nfor the asynchronous set and reset operations as specified in the input HDL.\n\n**Related Information**\n",
    "hdl_preserve_dangling_output_nets": "\nhdl_preserve_dangling_output_nets {true | false}\n\n_Default:_ true\n\n**Read-write** root attribute. When set to true, Genus preserves the names of dangling\noutput nets in designs that are read using the read_netlist command or the\nread_hdl -netlist command.\n\n**Note:** This attribute is supported only in the structural flow.\n\n**Related Information**\n",
    "hdl_preserve_sync_ctrl_logic": "\nhdl_preserve_sync_ctrl_logic {false | true}\n\n_Default:_ false\n\n**Read-write** root attribute. When set to true, Genus will try to keep the synchronous control\nlogic close to the flip-flops and prevent merging it with surrounding logic in the fanin cone.\n\nYou must set this attribute before reading in the design so Genus can automatically preserve\nthe synchronous control pins of the flip-flops. Enabling this attribute can impact QoR.\n\n**Related Information**\n",
    "hdl_preserve_sync_set_reset": "\nhdl_preserve_sync_set_reset {false | true}\n\n_Default:_ false\n\n**Read-write** root attribute. When set to true, Genus will try to keep the synchronous set\n(reset) control logic close to the flip-flops and prevent merging it with surrounding logic in the\nfanin cone.\n\nYou must set this attribute before reading in the design so Genus can automatically preserve\nthe synchronous control pins of the flip-flops. Enabling this attribute can impact QoR.\n\n**Related Information**\n",
    "hdl_preserve_unused_flop": "\nhdl_preserve_unused_flop {false | true}\n\n_Default:_ false\n\n**Read-write** hdl_arch attribute. When set to true, Genus does not remove flip-flops that\ndo not, directly or indirectly, affect any outputs. This can be used, for example, to keep flops\nthat are only used to observe internal nets through scan chains in test mode.\n\nThis attribute only affects flops that are inferred by elaboration. It does not affect flops that are\nexplicitly instantiated in the HDL code.\n\n**Note:** This attribute is ignored in the structural flow.\n\n**Related Information**\n",
    "hdl_preserve_unused_latch": "\nhdl_preserve_unused_latch {false | true}\n\n_Default:_ false\n\n**Read-write** hdl_arch attribute. When set to true, Genus does not remove latches that do\nnot, directly or indirectly, affect any outputs. This can be used, for example, to keep registers\nthat are only used to observe internal nets through scan chains in test mode.\n\nThis attribute only affects latches that are inferred by elaboration. It does not affect latches\nthat are explicitly instantiated in the HDL code.\n\n**Note:** This attribute is ignored in the structural flow.\n\n```\nAffects these commands: elaborate\n```\n```\nread_hdl\n```\n```\nAffects these commands: elaborate\nread_hdl\nRelated attribute: (root) hdl_preserve_unused_flop on page 1102\n```\n\n```\nElaboration and Synthesis\u2014hdl_arch Attributes\n```\nJanuary 2019 1218 Product Version 18.1\n\n**Related Information**\n",
    "hdl_preserve_unused_registers": "\nhdl_preserve_unused_registers {false | true}\n\n_Default:_ false\n\n**Read-write** hdl_arch attribute. When set to true, Genus does not remove registers\n(latches and flip-flops) that do not, directly or indirectly, affect any outputs. This can be used,\nfor example, to keep registers that are only used to observe internal nets through scan chains\nin test mode. This attribute for this object type (hdl_arch) will only affect the module or\nentity represented by the particular hdl_arch.\n\nThis attribute only affects registers that are inferred by elaboration. It does not affect registers\nthat are explicitly instantiated in the HDL code.\n\n**Note:** This attribute is only supported in the RTL flow.\n\n**Related Information**\n",
    "iopt_allow_tiecell_with_inversion": "\niopt_allow_tiecell_with_inversion {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Controls the use of a tie cell with an inverter if either the tie high\nor tie low cell is not found. By default, a tie cell with inverter will not be used.\n\n**Related Information**\n\n```\nAffected by this attribute: use_tiehilo_for_const on page 1178\n```\n```\nRelated attribute: iopt_allow_tiecell_with_inversion on page 1128\n```\n```\nAffects these commands: generate_ilm\n```\n```\nAffects this command: syn_opt\nAffected by this attribute: use_tiehilo_for_const on page 1178\nRelated attribute: ignore_preserve_in_tiecell_insertion on page 1127\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1129 Product Version 18.1\n",
    "iopt_enable_floating_output_check": "\niopt_enable_floating_output_check {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Controls the use of multiple output gates with floating outputs\nduring incremental optimization. By default, multiple output gates with floating outputs can be\nused.\n\nSetting the attribute to true has the following effects:\n\n\u25a0 During sizing, a gate can only be replaced with a higher or lower driver with the same\nnumber of outputs.\n\n\u25a0 During gate composition, a gate will not be replaced with a multiple-output gate with\nfloating outputs, that is, it can be replaced with a single output gate.\n\n**Related Information**\n",
    "iopt_force_constant_removal": "\niopt_force_constant_removal {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Forces the optimization of gates with inputs tied to constants\nindependent of the QoR.\n\n**Related Information**\n",
    "iopt_lp_power_analysis_effort": "\niopt_lp_power_analysis_effort {low | medium | high}\n\n_Default_ : low\n\n```\nAffects this command: syn_opt\n```\n```\nAffects this command: syn_opt\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1130 Product Version 18.1\n\n**Read-write** root attribute. Controls whether to propagate the switching activities in the\ndesign for optimization. The attribute can have the following values:\n\n**Note:** The higher the power analysis effort, the higher the run time and memory usage are\nfor optimization.\n\n**Related Information**\n",
    "iopt_remap_avoided_cells": "\niopt_remap_avoided_cells {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Controls whether to replace (remap) unpreserved avoided cells\nin the mapped netlist. For those cells that cannot be remapped, the tool will issue messages\n\n**Related Information**\n",
    "iopt_sequential_duplication": "\niopt_sequential_duplication {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Controls duplication of sequential (flops) elements during\nincremental optimization. It duplicates the flops on the critical timing path to improve the\ntiming of this path.\n\n```\nhigh Propagate the switching activities in the design during\noptimization with higher accuracy.\nlow Does not propagate the switching activities during optimization.\nmedium Propagates the switching activities in the design during\noptimization.\n```\n```\nAffects this command: syn_opt\n```\n```\nAffects this command: syn_opt\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1131 Product Version 18.1\n\n**Related Information**\n",
    "iopt_sequential_resynthesis": "\niopt_sequential_resynthesis {true |false}\n\n_Default_ : true\n\n**Read-write** root attribute. Controls sequential resynthesis during incremental optimization.\n\n**Related Information**\n",
    "iopt_sequential_resynthesis_min_effort": "\niopt_sequential_resynthesis_min_effort {high |medium | low}\n\n_Default_ : high\n\n**Read-write** root attribute. Specifies the minimum effort required for incremental\noptimization to perform sequential resynthesis.\n\n**Related Information**\n\n```\nAffects this command: syn_opt\n```\n```\nAffects this command: syn_opt\nAffected by this attribute: iopt_sequential_resynthesis_min_effort on page 1131\n```\n```\nAffects this command: syn_opt\nAffects this attribute: iopt_sequential_resynthesis on page 1131\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1132 Product Version 18.1\n",
    "iopt_ultra_optimization": "\niopt_ultra_optimization {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Controls how rigorously incremental optimization should work to\nachieve the best QoR (timing and area).\n\nDue to the iterative nature of the algorithms, this attribute will have an impact on the run-time.\n\n**Related Information**\n\n```\nAffects this command: syn_opt\n```\n```\nAffects this command: syn_opt\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1133 Product Version 18.1\n",
    "lbr_respect_async_controls_priority": "\nlbr_respect_async_controls_priority {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Instructs the library parser to consider the asynchronous control\npins priority description of sequential libcells from the liberty files. This enables the implicit\nimplementation of the priority logic by the sequential library cells during mapping.\n\nSet this attribute to false if you want the priority logic to be implemented explicitly by\ncombinational gates. It is recommended to set this attribute before reading the libraries to\nreduce the runtime of processing the libraries.\n\n**Related Information**\n",
    "map_drc_first": "\nmap_drc_first {false | true}\n\n_Default:_ false\n\n**Read-write** root attribute. Specifies whether to use the design rule constraints as a\npreferred costing factor for selecting cells from the library during mapping. These constraints\nare considered with the other costs, such as area, timing and power, but by default they are\nnot given the highest weight.\n\n**Related Information**\n\n```\nAffects this command: syn_map\nwrite_do_lec\n```\n```\nAffects this command: syn_map\nRelated attribute: drc_first on page 776\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1135 Product Version 18.1\n",
    "map_latch_allow_async_decomp": "\nmap_latch_allow_async_decomp {false | true}\n\n_Default:_ false\n\n**Read-write** root attribute. If set to true, Genus will implement asynchronous control logic\noutside the latch using combinational gates if the library does not have latch libcells with the\nrequired asynchronous functionality. For example, a reset latch could be implemented using\na simple latch libcell with combinational logic driving the d and ena inputs.\n\n**Related Information**\n",
    "map_prefer_non_inverted_clock_line": "\nmap_prefer_non_inverted_clock_line {true | false}\n\n_Default:_ true\n\n**Read-write** root attribute. Controls the insertion of inverters on the clock line. By default,\nthe tool tries to avoid inserting inverters on the clock line. If you set this attribute to false,\nthe tool chooses the best solution for QoR, which might include inserting inverters.\n\n**Related Information**\n",
    "map_respect_rtl_clk_phase": "\nmap_respect_rtl_clk_phase {false | true}\n\n_Default:_ false\n\n**Read-write** root attribute. If set to true, Genus will use sequential elements with the same\nsensitivity, as specified in the RTL:\n\n\u25a0 In case of high-level RTL using @posedge or @negedge\n\n```\nThis applies to flip-flops only. The desired clock edge of the target flip-flop is derived from\nthe @xxxedge.\n```\n```\nAffects this command: syn_map\n```\n```\nAffects this command: syn_map\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1136 Product Version 18.1\n\n\u25a0 In case of netlist RTL\n\n```\nIf Genus finds already instantiated library cells when reading an RTL description it\nremembers the clock edge for flip-flops or the enable active level for latches and tries to\nkeep that in subsequent remappings.\n```\nIf the library has no libcells with the required sensitivity, Genus will use any available libcells.\n\nBy default, Genus will use flip-flop libcells with a certain clock phase that avoid adding an\ninverter for the clock.\n\n**Example**\n\nConsider the following module in RTL.\n\nmodule mix_edge ( clk, d0, q0, q1, q0_inv, q1_inv, d1, d2,d3);\ninput clk, d0, d1, d2, d3;\noutput q0, q1, q0_inv, q1_inv;\nreg q0, q1, q0_inv, q1_inv;\nwire clkn;\n\nassign clkn = ~clk;\nalways @(negedge clk)\nq0 = d0;\nalways @(posedge clk)\nq1 = d1;\nalways @(negedge clkn)\nq0_inv = d2;\nalways @(posedge clkn)\nq1_inv = d3;\nendmodule\n\nIf you use the default setting of false for map_respect_rtl_clk_phase, Genus will use the\nfollowing mappings:\n\nq0_reg will be mapped to FFRNQ1, a negative-edge triggered flip-flop\nq1_reg will be mapped to FFPQ1,a positive-edge triggered flip-flop\nq0_inv_reg will be mapped to FFPQ1,a positive-edge triggered flip-flop\nq1_inv_reg will be mapped to FFRNQ1,a negative-edge triggered flip-flop\n\nIf you set map_respect_rtl_clk_phase to true, Genus uses the following mappings:\n\nq0_reg will be mapped to FFRNQ1, a negative-edge triggered flip-flop\nq1_reg will be mapped to FFPQ1,a positive-edge triggered flip-flop\nq0_inv_reg will be mapped to FFRNQ1,a negative-edge triggered flip-flop + inverter\nq1_inv_reg will be mapped to FFPQ1,a positive-edge triggered flip-flop + inverter\n\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1137 Product Version 18.1\n\n**Related Information**\n",
    "map_to_master_slave_lssd": "\nmap_to_master_slave_lssd {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Specifies to recognize master-slave flip-flops as valid sequential\ncells and not as timing models during library parsing and mapping. You must set this attribute\nbefore reading the libraries. The slave clock, identified by the Liberty clocked_on_also\nattribute in the ff group of the library cell, will be used as the main (triggering) clock pin of the\ncell.\n\n**Related Information**\n\nScan Cell Requirements in the _Genus Library Guide_\n\nUsing Special Master-Slave LSSD Flip-Flops in _Genus Design for Test Guide for Legacy\nUI_\n",
    "map_to_multiple_output_gates": "\nmap_to_multiple_output_gates {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute.When the value is true (default), Genus can map to more\ncomplex multi-output cells beyond half and full adders during incremental optimization.\n\n```\nAffects this command: syn_map\n```\n```\nRelated attribute map_prefer_non_inverted_clock_line on page 1135\n```\n```\nAffects these commands: syn_map\nsyn_opt\nAffects these attributes: (port) lssd_master_clock on page 1247\n(subport) lssd_master_clock on page 1270\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1138 Product Version 18.1\n\n**Related Information**\n",
    "merge_combinational_hier_instances": "\nmerge_combinational_hier_instances {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Allow merging of combinational hierarchical instances.\n\n**Related Information**\n",
    "multibit_allow_async_phase_map": "\nmultibit_allow_async_phase_map {inherited | true | false}\n\n_Default_ : inherited\n\n**Read-write** subdesign attribute. Controls whether phase inversion is allowed during\nmultibit cell inferencing in this subdesign. You can specify one of the following values:\n\n**Examples**\n\nConsider the following netlist after mapping and before incremental optimization: The library\ncontains the multibit cell DUALDFSF.\n\nmodule test(resetn, clk, in, out);\ninput resetn, clk;\ninput [3:0] in;\noutput [3:0] out;\nDFCF cnt_0_reg[0] (.CDN (resetn), .CP (clk), .D(in[0]), .Q (out[0] ));\nDFCF cnt_0_reg[1] (.CDN (resetn), .CP (clk), .D(in[1]), .Q (out[1] ));\nDFCF cnt_0_reg[2] (.CDN (resetn), .CP (clk), .D(in[2]), .Q (out[2] ));\nDFCF cnt_0_reg[3] (.CDN (resetn), .CP (clk), .D(in[3]), .Q (out[3] ));\nendmodule\nmodule top(resetn, clk, in, out);\ninput resetn, clk;\ninput [3:0] in;\noutput [3:0] out;\ntest t(resetn,clk,in,out);\nendmodule\n\n\u25a0 When the multibit_allow_async_phase_map attribute is not set for subdesign\ntest, the subdesign inherits the value from the root attribute (default is true). With\nphase inversion allowed, the netlist is modified as follows:\nmodule test(resetn, clk, in, out);\ninput resetn, clk;\ninput [3:0] in;\noutput [3:0] out;\nwire resetn, clk;\nwire [3:0] in;\nwire [3:0] out;\n**DUALDFSF** \\CDN_MBIT_cnt_0_reg[0_1] (.SDN (resetn), .CP (clk), .D1(in[0]),\n",
    "multibit_allow_unused_bits": "\nmultibit_allow_unused_bits {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Controls whether a mapped multibit instance can have one or\nmore unused bits. By default, Genus will try to merge the single-bit registers to multibit\ninstances without unused bits. If during merging, Genus cannot find a suitable multibit libcell\nwith a width that matches the left-over bits of a bus, it will choose the closest matching width\nwhich leaves the minimum unused bits. If the attribute is set to false, any merging which\nresults in unused (undriven/unloaded) bits will be prevented and thus reduce the multibit\nmerging coverage.\n\n**Related Information**\n\nMapping to Multibit Cells in _Genus Synthesis Flows Guide for Legacy UI_\n\n```\nAffects this command: syn_opt\nRelated attributes: bit_width on page 306\nmultibit_prefix_string on page 1145\nuse_multibit_cells on page 1173\n```\n```\nAffects this command: syn_opt\nRelated attributes: bit_width on page 306\nuse_multibit_cells on page 1173\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1141 Product Version 18.1\n",
    "multibit_auto_exclude_registers_with_exceptions": "\nmultibit_auto_exclude_registers_with_exceptions {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Controls whether timing exception checks should be done on\nsequential instances to exclude them from multibit merging. By default, the exception checks\nare skipped and merging happens for flops with identical exceptions only when all exceptions\nare transferable to the multibit cell that is created. Enabling this attribute will automatically\napply dont_merge_multibit on all sequential instances with exceptions.\n\n**Examples**\n\nAssume two single bit instances reg1 and reg2 have the same timing exceptions. The\nlibrary has a two-bit multibit cell.\n\n\u25a0 If multibit_auto_exclude_registers_with_exceptions is set to true, then\nreg1 and reg2 will not be considered as candidates for multibit merging.\n\n\u25a0 If multibit_auto_exclude_registers_with_exceptions is set to false, then\nreg1 and reg2 will be merged into a multibit libcell.\n\n**Related Information**\n\nMapping to Multibit Cells in _Genus Synthesis Flows Guide for Legacy UI_\n",
    "multibit_cells_from_different_busses": "\nmultibit_cells_from_different_busses {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. If this attribute remains false, only the sequential cells with the\nsame basename will be merged. If this attribute is set to true, Genus can merge single-bit\ncells from different banks (also called busses) into a single, multibit cell. For example, four\nsingle-bit flops:\n\np_reg[4], p_reg[5], q_reg[8] and q_reg[9]\n\ncan be merged into one four-bit flop\n\np_reg[4_5]_q_reg[8_9]\n\nThe single-bit cells affected by this attribute include: flip-flops, latches, and tristate buffers.\n\n```\nAffects this command: syn_opt\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1142 Product Version 18.1\n\n**Related Information**\n\nMapping to Multibit Cells in _Genus Synthesis Flows Guide for Legacy UI_\n",
    "multibit_mapping_effort_level": "\nmultibit_mapping_effort_level {auto| high | low}\n\n_Default_ : auto\n\n**Read-write** root attribute. Controls the effort level for physical-aware multibit mapping: that\nis, controls the tradeoff between multibit coverage and QoR. This attribute can have the\nfollowing values:\n\n**Related Information**\n",
    "multibit_predefined_allow_unused_bits": "\nmultibit_predefined_allow_unused_bits {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Controls whether instances of predefined mulitibit cells can have\nunused bits. By default, Genus does not allow unused bits in predefined multibit instances.\n\n**Related Information**\n\n```\nauto Balances multibit coverage and QoR to get the most optimal\nresults.\nhigh Increases multibit coverage but might impact QoR.\nlow Gives the best QoR.\n```\n```\nAffects this command: syn_opt -physical\nRelated attributes: use_multibit_cells on page 1173\n```\n```\nAffects this command: syn_opt\nRelated attributes: bit_width on page 306\nuse_multibit_cells on page 1173\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1145 Product Version 18.1\n",
    "multibit_preserve_inferred_instances": "\nmultibit_preserve_inferred_instances {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Specifies whether to preserve multibit instances that are inferred\nduring incremental optimization. If set to true, the preserve attribute for all multibit\ninstances is set to size_delete_ok. This preserve setting prevents that any optimization\nstep down the flow breaks the multibit cells. For example, multibit tristate and combinational\ncells can get optimized in many places.\n\n**Related Information**\n",
    "multibit_preserved_net_check": "\nmultibit_preserved_net_check {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Controls whether instances can be merged into multibit\ninstances if the connected nets are marked preserved. Set this attribute to true to prevent\nmultibit merging when any of the nets connected to the instances are marked preserved.\n\n**Related Information**\n\n```\nAffects this command: syn_opt\n```\n```\nRelated attributes: bit_width on page 306\nuse_multibit_cells on page 1173\nmultibit_seqs_members_naming_style on page 1149\n```\n```\nAffects this command: syn_opt\n```\n```\nAffects this command: syn_opt\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1147 Product Version 18.1\n",
    "multibit_seqs_instance_naming_style": "\nmultibit_seqs_instance_naming_style {concat | auto | short}\n\n_Default_ : concat\n\n**Read-write** root attribute. Controls the naming of inferred multibit (flops, latches and\ntristates) instances. This attribute can have the following values:\n\n**Examples**\n\n\u25a0 Consider the following instances:\n\n```\nSCFFQXC1 I3256 (.CLK(CLK), .DATA(D1), .Q(Q1));\nSCFFQXC1 I3267 (.CLK(CLK), .DATA(D2), .Q(Q2));\nSCFFQXC1 I3312 (.CLK(CLK), .DATA(D3), .Q(Q3));\nSCFFQXC1 I3439 (.CLK(CLK), .DATA(D4), .Q(Q4));\nSCFFQXC1 I3572 (.CLK(CLK), .DATA(D5), .Q(Q5));\nSCFFQXC1 I4188 (.CLK(CLK), .DATA(D6), .Q(Q6));\nSCFFQXC1 I4357 (.CLK(CLK), .DATA(D7), .Q(Q7));\nSCFFQXC1 I4567 (.CLK(CLK), .DATA(D8), .Q(Q8));\n```\n```\nauto Creates the name of the multibit instance based on busses of\nmerged instances.\n```\n```\n\u25a0 If the instances belong to the same bus, the name of the\nmultibit instance starts with the bus name followed by the\nrange of the merged bit-indices.\n\u25a0 If the instances belong to different busses, the name of the\nmultibit instance contains each bus name followed by the\nrange of corresponding bit-indices.\nconcat Creates the name of the multibit instance by concatenating the\nnames of merged instances.\nshort Creates the name of the multibit instance by using the bus\nname for only the first index of a multibit cell if all instances\nbelong to the same bus.\nIf the multibit instance contains single bits from different busses,\nthe short naming style has no effect and the concat style is\nfollowed.\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1148 Product Version 18.1\n\n```\n\u2751 Using the auto setting:\nset_attr multibit_seqs_instance_naming_style auto /\nThe multibit instances are named as follows:\nSCCSGFF4QXC1 I3256_3439(.CLK (CLK), .DATA0 (D1), .DATA1 (D2),\n.DATA2 (D3), .DATA3 (D4), .Q0 (Q1), .Q1 (Q2), .Q2 (Q3), .Q3 (Q4));\nSCCSGFF4QXC1 I3572_4567(.CLK (CLK), .DATA0 (D5), .DATA1 (D6),\n.DATA2 (D7), .DATA3 (D8), .Q0 (Q5), .Q1 (Q6), .Q2 (Q7), .Q3 (Q8));\n\u2751 Using the concat setting:\nset_attr multibit_seqs_instance_naming_style concat /\nThe multibit instances are named as follows:\nSCCSGFF4QXC1 I3256_I3267_I3312_I3439(.CLK (CLK), .DATA0 (D1), .DATA1 (D2),\n.DATA2 (D3), .DATA3 (D4), .Q0 (Q1), .Q1 (Q2), .Q2 (Q3), .Q3 (Q4));\nSCCSGFF4QXC1 I3572_I4188_I4357_I4567(.CLK (CLK), .DATA0 (D5), .DATA1 (D6),\n.DATA2 (D7), .DATA3 (D8), .Q0 (Q5), .Q1 (Q6), .Q2 (Q7), .Q3 (Q8));\n```\n\u25a0 Consider the following instances:\n\n```\na_reg[2]\na_reg[1]\nb_reg[2]\nb_reg[1]\na_reg[0]\nb_reg[0]\nUsing the short setting:\nset_attr multibit_seqs_instance_naming_style short /\nThe multibit instances are named as follows:\nCDN_MBIT_ a_reg [0]_MB_ a_reg [1]_MB_ a_reg [2]_MB _b_reg [0]\nCDN_MBIT_ b_reg [1]_MB_[2]\nThe short naming style was not used for the first multibit instance because it contains\nsingle bits from two different busses.\nThe short naming style was used for the second multibit instance because both single\nbits belong to the same bus. The bus name is only shown for the first bit.\n```\n**Related Information**\n\n```\nAffects this command: syn_opt\nRelated attribute: multibit_seqs_name_concat_string on page 1150\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1149 Product Version 18.1\n",
    "optimize_constant_0_flops": "\noptimize_constant_0_flops {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Allows constant 0 propagation through flip-flops.\n\n**Related Information**\n",
    "optimize_constant_1_flops": "\noptimize_constant_1_flops {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Allows constant 1 propagation through flip-flops.\n\n```\nAffects this command: syn_opt\nRelated attribute: use_multibit_cells on page 1173\n```\n```\nAffects these commands: elaborate\nsyn_generic\nsyn_map\nAffects this attribute: optimize_constant_0_seq on page 1201\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1154 Product Version 18.1\n\n**Related Information**\n",
    "optimize_constant_feedback_seqs": "\noptimize_constant_feedback_seqs {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Controls constant propagation through a FF with feedback. By\ndefault, these flip-flops can be optimized, that is, replaced with a logic constant.\n\n**Example**\n\nConsider the following RTL:\n\nmodule test(clk, a, z, z2);\ninput clk, a;\noutput z, z2;\nwire clk, d;\nreg z, z2, q;\nassign d2 = 1'b1;\nassign d = q & a;\nalways @(posedge clk) begin\nz2 <= d2;\nq <= d;\nz <= q;\nend\nendmodule // test\n\nAssume the following script:\n\nset_attribute library tutorial.lib /\nset_attribute information_level 9 /\nread_hdl test.v\nelab\n#set_attribute optimize_constant_feedback_seqs false /\nsyn_gen\nsyn_map\nwrite\n\n```\nAffects these commands: elaborate\n```\n```\nsyn_generic\nsyn_map\nAffects this attribute: optimize_constant_1_seq on page 1202\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1155 Product Version 18.1\n\n\u25a0 When you use the default value of the optimize_constant_feedback_seqs\nattribute, the following netlist is written after mapping:\nmodule test(clk, a, z, z2);\ninput clk, a;\noutput z, z2;\nwire clk, a;\nwire z, z2;\nassign z2 = 1'b1;\nassign z = 1'b0;\nendmodule\nRegister q is an uninitialized flip-flop with feedback. Because the input d is the output of\nan AND logic, the stable state will be constant 0. When both the\noptimize_constant_feedback_seqs root attribute and the\noptimize_constant_feedback_seq instance attribute for q_reg are set to true,\nq_reg is replaced with constant 0.\n\n\u25a0 When you set the optimize_constant_feedback_seqs attribute to false, the\nfollowing netlist is written after mapping:\nmodule test(clk, a, z, z2);\ninput clk, a;\noutput z, z2;\nwire clk, a;\nwire z, z2;\nwire n_0, n_1, q;\nassign z2 = 1'b1;\nfflopd q_reg(.CK (clk), .D (n_1), .Q (q));\ninv1 g27(.A (n_0), .Y (n_1));\nnand2 g28__7837(.A (q), .B (a), .Y (n_0));\nfflopd z_reg(.CK (clk), .D (q), .Q (z));\nendmodule\nIn this case, the q_reg (with feedback loop) is not replaced by a constant.\n\n**Related Information**\n\n```\nAffects these commands: elaborate\nsyn_generic\nsyn_map\nAffects this attribute: optimize_constant_feedback_seq on page 1202\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1156 Product Version 18.1\n",
    "optimize_constant_latches": "\noptimize_constant_latches {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. When set to true, a latch whose output never changes is\nreplaced by the corresponding constant value.\n\n**Related Information**\n",
    "optimize_merge_flops": "\noptimize_merge_flops {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Controls merging of equivalent flops. Set this attribute to false\nto prevent merging.\n\n**Related Information**\n\n```\nAffects these commands: elaborate\nsyn_generic\nsyn_map\nAffects this attribute: optimize_constant_0_seq on page 1201\noptimize_constant_1_seq on page 1202\n```\n```\nAffects these commands: syn_generic\nsyn_map\nwrite_hdl -lec\nAffects this attribute: optimize_merge_seq on page 1203\nRelated attribute: optimize_merge_latches on page 1157\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1157 Product Version 18.1\n",
    "optimize_merge_latches": "\noptimize_merge_latches {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Controls merging of equivalent latches. Set this attribute to\nfalse to prevent merging.\n\n**Related Information**\n",
    "optimize_net_area": "\noptimize_net_area {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Controls optimization of the net area during global mapping and\nincremental optimization. By default, optimization tries to minimize the total area (the sum of\nthe cell and net area). If this attribute is set to false, only the cell area will be minimized,\nwhich reduces the cell area at the cost of higher net area.\n\n**Related Information**\n\n```\nAffects these commands: syn_generic\nsyn_map\nwrite_hdl -lec\nAffects this attribute: optimize_merge_seq on page 1203\nRelated attribute: optimize_merge_flops on page 1156\n```\n```\nAffects these commands: syn_map\nsyn_opt\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1158 Product Version 18.1\n",
    "optimize_seq_x_to": "\noptimize_seq_x_to {0 | 1}\n\n_Default:_ 0\n\n**Read-write** root attribute. Allows the propagation of the specified constant value ( 0 or 1 )\nthrough flops/latches when they are in dont care (x) state.\n",
    "partition_based_synthesis": "\npartition_based_synthesis {true | false}\n\n**Read-write** root attribute. Controls the partition-based synthesis flow.\n\n**Note:** Setting this attribute to false can significantly impact the runtime.\n",
    "propagate_constant_from_timing_model": "\npropagate_constant_from_timing_model {inherited | false | true}}\n\n_Default:_ inherited\n\n**Read-write** instance attribute. Controls constant propagation from this timing model\ninstance.\n\n**Note:** This attribute applies to instances of timing models whose output function is defined\nas constant 0 or 1.\n\nYou can specify the following values:\n\n**Related Information**\n\n```\n(net) preserve on page 1233\n(pin) preserve on page 1242\n(subdesign) preserve on page 1264\n```\n```\nfalse (or 0) Prevents constant propagation from this timing model instance.\ninherited Inherits the value of the\npropagate_constant_from_timing_model root attribute.\ntrue (or 1) Allows constant propagation from this timing model instance.\n```\n```\nAffects these commands: syn_generic\nsyn_map\nsyn_opt\nRelated attribute: (root) propagate_constant_from_timing_model on\npage 1159\n```\n\n```\nElaboration and Synthesis\u2014Instance Attributes\n```\nJanuary 2019 1206 Product Version 18.1\n",
    "remove_assigns": "\nremove_assigns {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Determines whether assign statements should be replaced with\nbuffers or inverters in the netlist.\n\nWhen this attribute is set to true, the generated netlist will not contain any assign\nstatements. Depending on the availability of cells in the library, and the settings of the\nset_remove_assign_options command, the assign statements might be replaced with\nbuffers or inverters.\n\n**Examples**\n\nFor the following examples, assume the following constant assignments in the RTL code:\n\nassign out1 = 1\u2019b0;\nassign out2 = 1\u2019b0;\n\n\u25a0 If the remove_assigns attribute us set to false, the netlist will remain unchanged.\n\n\u25a0 If the remove_assigns attribute us set to true, the netlist will look like:\n\n```\nBUFX1 rm_assigns_buf_q3(.A (1\u2019b0), .Y (out1));\nBUFX1 rm_assigns_buf_q3(.A (1\u2019b0), .Y (out2));\n```\n**Related Information**\n",
    "retime_async_reset": "\nretime_async_reset {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Specifies whether registers with asynchronous set or reset\nsignals should be retimed. Registers with both asynchronous set and reset signals will not be\nretimed regardless of this attribute\u2019s value.\n\n```\nAffects this command: syn_opt\nAffected by this command: set_remove_assign_options\nAffects this attribute: use_tiehilo_for_const on page 1178\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1163 Product Version 18.1\n\n**Example**\n\nThe following example specifies that all asynchronous registers with set or reset signals\nshould be considered for retiming:\n\nlegacy_genus:/> set_attribute retime_async_reset true /\n...\nlegacy_genus:/> retime -min_delay\n\n**Related Information**\n",
    "retime_effort_level": "\nretime_effort_level {medium | low | high}\n\n_Default_ : medium\n\n**Read-write** root attribute. Controls the optimizations used during retiming.\n\nUsing the default effort ensures that the design can be verified with the Conformal\u00ae Logical\nEquivalence Checker using the default flow. Using high effort causes the tool to use\noptimization techniques which could trade off better QoR against ease of formal verification.\n\n**Related Information**\n\n```\nAffects these commands: retime\nsyn_generic\nRelated attributes: dont_retime on page 1191\n(design) retime on page 1265\n(subdesign) retime on page 1265\nretime_optimize_reset on page 1164\n```\n```\nAffects these commands: retime\nsyn_generic\nwrite_do_lec\nRelated attributes: dont_retime on page 1191\n(design) retime on page 1265\n(subdesign) retime on page 1265\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1164 Product Version 18.1\n",
    "retime_move_mux_loop_with_reg": "\nretime_move_mux_loop_with_reg {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Directs retiming to maintain the mux-feedback loop for a flop with\nthe flop itself during the retiming moves. This implies that retiming cannot separate the mux\nloop and move logic through the feedback loop.\n\n**Related Information**\n",
    "retime_optimize_reset": "\nretime_optimize_reset {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Specifies whether the asynchronous reset signals of registers\nshould be optimized during retiming optimization. If set to true, any asynchronous reset\nsignal that can be eliminated while preserving the functionality of the logic will be removed.\nThat is, the reset will be dropped if the computation results in a dont_care value.\n\n**Example**\n\nThe following example specifies that all reset signals of registers should be optimized during\nretiming:\n\nset_attribute retime_optimize_reset true /\n..\nretime -min_area\n\n**Related Information**\n\n```\nAffects these commands: retime\nsyn_generic\nRelated attributes: dont_retime on page 1191\n(design) retime on page 1265\n(subdesign) retime on page 1265\n```\n```\nAffects these commands: retime\nsyn_generic\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1165 Product Version 18.1\n",
    "syn_generic_effort": "\nsyn_generic_effort {medium | low | high | express}\n\n_Default_ : medium\n\n**Read-write** root attribute. Specifies the optimization effort to use for the syn_generic\ncommand. The express value provides early feasibility analysis by performing quick\nsynthesis of the design.\n\n**Related Information**\n",
    "syn_map_effort": "\nsyn_map_effort {high | low | medium | express}\n\n_Default_ : high\n\n**Read-write** root attribute. Specifies the optimization effort to use for the syn_map\ncommand. The express value provides early feasibility analysis by performing quick\nsynthesis of the design.\n\n**Related Information**\n",
    "syn_opt_effort": "\nsyn_opt_effort {high | low | medium | express | extreme |none}\n\n_Default_ : high\n\n**Read-write** root attribute. Specifies the optimization effort to use for the syn_opt\ncommand.\n\nSetting the effort to express provides early feasibility analysis by performing quick\nsynthesis of the design.\n\nSetting the effort to extreme invokes rigorous incremental optimization to achieve the best\nQoR (timing and area). Due to the iterative nature of the algorithms, this value will have an\nimpact on the run-time.\n\n**Related Information**\n",
    "tns_opto": "\ntns_opto {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Controls whether timing slack is optimized only on the most\ncritical path or also on other paths with negative slack.\n\nBy default, the syn_map command focuses on the critical path to produce a smaller design.\nWhen the critical path has negative slack, other near critical paths can also be relaxed to\nrecover area.\n\nWhen the tns_opto attribute is set to true, it forces the tool to consider all the endpoints\nfor the optimization. The appropriate weight is given to the slack of each endpoint during the\noptimization. More drastic area recovery is not performed on violating paths to prevent\nworsening the total negative slack (TNS).\n\n**Related Information**\n\n```\nAffects this command: syn_map\n```\n```\nAffects these commands: syn_map\nsyn_opt\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1171 Product Version 18.1\n",
    "use_compatibility_based_grouping": "\nuse_compatibility_based_grouping {true | false}\n\n_Default_ : true\n\n**Read-write** root attribute. Controls the mapping of single-bit sequential, combinational, and\ntristate cells into multibit cells based on common control signals.\n\nBy default, the tool will create groups of compatible single-bit cells that have common control\nsignals. Merging is only done within a group of compatible cells.\n\n**Related Information**\n",
    "use_max_cap_lut": "\nuse_max_cap_lut {true|false}\n\n_Default_ : true\n\n**Read-write** root attribute. Controls the use of frequency-based max_cap lookup table\nvalues from the library for design rule verification. By default, the use of frequency-based\nmax_cap lookup table values is enabled.\n\n**Related Information**\n\n```\nAffects this command: syn_opt\n```\n```\nAffects this command: report design_rules\nRelated attribute: timing_library_lookup_drv_per_frequency on page 793\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1173 Product Version 18.1\n",
    "use_multibit_cells": "\nuse_multibit_cells {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. If set to true, single-bit cells are mapped to an appropriate\nmultibit cell from the technology library.\n\nFor example, four single-bit flops:\n\nff_reg[0] ff_reg[1] ff_reg[2] ff_reg[3]\n\ncan be merged into one four-bit flop\n\nff_reg[0_3]\n\nSingle-bit cells that can be merged include: flip-flops, latches, tristate buffers, combinatorial\ncells, isolation cells and level-shifter cells.\n\nWhen merging flops, the shared input is the clock line. When merging latches, the shared\ninput is the gate line. When merging tri-state cells, the shared input is the enable line.\n\n**Note:** Multibit cell inferencing is performed during the mapping stage. While cells that are\nmarked unusable by Genus cannot be used during mapping, they can be used during\nincremental optimization.\n\nThis attribute controls both logical and physical-aware multibit mapping. If the design is placed,\nphysical-aware multibit mapping is performed, otherwise logical multibit mapping is performed.\n\n**Related Information**\n\n```\nAffects these commands: syn_map\nsyn_opt\nAffects these attributes: force_merge_combos_into_multibit_cells on page 1064\nforce_merge_seqs_into_multibit_cells on page 1065\nuse_multibit_combo_cells on page 1174\nuse_multibit_seq_and_tristate_cells on page 1176\nAffected by this attribute: multibit_seqs_members_naming_style on page 1149\nRelated attributes: bit_width on page 306\nmultibit_cells_from_different_busses on page 1141\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1174 Product Version 18.1\n",
    "use_multibit_combo_cells": "\nuse_multibit_combo_cells {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Controls the mapping of single-bit combinational cells to\nappropriate multibit combinational cells from the technology library.\n\nBy default, this attribute inherits the last setting of the use_multibit_cells attribute, but\nyou can explicitly override this setting to enable or disable combinational cell mapping.\n\n**Note:** Multibit cell inferencing is performed during incremental optimization rather than during\nthe mapping stage. While cells that are marked unusable by Genus cannot be used during\nmapping, they can be used during incremental optimization.\n\n**Example**\n\nlegacy_genus:/> get_attr use_multibit_cells\nfalse\nlegacy_genus:/> get_attr use_multibit_combo_cells\nfalse\nlegacy_genus:/> set_attr use_multibit_cells true /\nSetting attribute of root \u2019/\u2019: \u2019use_multibit_cells\u2019 = true\nlegacy_genus:/> get_attr use_multibit_combo_cells\ntrue\nlegacy_genus:/> set_attr use_multibit_combo_cells false /\nSetting attribute of root \u2019/\u2019: \u2019use_multibit_combo_cells\u2019 = false\nlegacy_genus:/> set_attr use_multibit_cells true /\nSetting attribute of root \u2019/\u2019: \u2019use_multibit_cells\u2019 = true\nlegacy_genus:/> get_attr use_multibit_combo_cells\ntrue\n\n**Related Information**\n\n```\nAffects this command: syn_opt\nAffected by this attribute: use_multibit_cells on page 1173\nRelated attribute: bit_width on page 306\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1175 Product Version 18.1\n",
    "use_multibit_seq_and_tristate_cells": "\nuse_multibit_seq_and_tristate_cells {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Controls the mapping of single-bit sequential and tristate cells to\nappropriate multibit cells from the technology library.\n\nBy default, this attribute inherits the last setting of the use_multibit_cells attribute, but\nyou can explicitly override this setting to enable or disable sequential and tristate cell mapping.\n\n**Note:** Multibit cell inferencing is performed during incremental optimization rather than during\nthe mapping stage. While cells that are marked unusable by Genus cannot be used during\nmapping, they can be used during incremental optimization.\n\n**Example**\n\nlegacy_genus:/> get_attr use_multibit_cells\nfalse\nlegacy_genus:/> get_attr use_multibit_seq_and_tristate_cells\nfalse\nlegacy_genus:/> set_attr use_multibit_cells true /\nSetting attribute of root \u2019/\u2019: \u2019use_multibit_cells\u2019 = true\nlegacy_genus:/> get_attr use_multibit_seq_and_tristate_cells\ntrue\nlegacy_genus:/> set_attr use_multibit_seq_and_tristate_cells false /\nSetting attribute of root \u2019/\u2019: \u2019use_multibit_seq_and_tristate_cells\u2019 = false\nlegacy_genus:/> set_attr use_multibit_cells true /\nSetting attribute of root \u2019/\u2019: \u2019use_multibit_cells\u2019 = true\nlegacy_genus:/> get_attr use_multibit_seq_and_tristate_cells\ntrue\n\n**Related Information**\n",
    "use_nextstate_type_only_to_assign_sync_ctrls": "\nuse_nextstate_type_only_to_assign_sync_ctrls {false | true}\n\n_Default_ : false\n\n**Read-write** root attribute. Forces the tool to use the nextstate_type .lib pin attribute\n(when available in the library) to assign synchronous control pins.\n\n```\nAffects this command: syn_opt\nAffected by this attribute: use_multibit_cells on page 1173\nRelated attribute: bit_width on page 306\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1177 Product Version 18.1\n\nBy default, the tool uses the nextstate_type .lib pin attribute along with some heuristics\nbased on pin names to assign synchronous control pins.\n\n**Related Information**\n",
    "use_scan_seqs_for_non_dft": "\nuse_scan_seqs_for_non_dft {true|false|degenerated_only}\n\n_Default_ : true\n\n**Read-write** root attribute. Controls the mapping of registers to scan flip-flops for functional\npurposes. This attribute can have the following values:\n\n**Note:** A flop can only be mapped to scan for DFT if you run the check_dft_rules\ncommand and the flop passes the DFT rules check or if prior to mapping, you set the\ndft_scan_map_mode design attribute to force_all.\n\n**Related Information**\n\n```\nAffects these commands: syn_map\nsyn_opt\nAffects this attribute: sync_clear_pins on page 334\n```\n```\ndegenerated_only Allows mapping to scan flip-flops with the scan-related pins tied\noff (also known as degenerated scan flops).\nThis value is typically used when only scan flop library cells are\navailable for use during technology mapping.\nfalse Avoids mapping to scan flip-flops for functional use.\nThis value is typically used when the flip-flops will be mapped to\nscan for DFT by setting the dft_scan_map_mode attribute to\neither force_all or tdrc_pass.\ntrue Allows registers not targeted for DFT to be mapped to scan\nflip-flops for functional use.\n```\n```\nAffects these commands: syn_map\nsyn_opt\nRelated attributes: dft_mapped on page 1585\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1178 Product Version 18.1\n",
    "use_tiehilo_for_const": "\nuse_tiehilo_for_const {none | duplicate | unique}\n\n_Default_ : none\n\n**Read-write** root attribute. Determines whether a constant assignment should be replaced\nwith a tie cell in the netlist. The attribute can have the following values:\n\n**Note:** When tie-cell insertion is done as part of incremental optimization, hierarchical\nconstant connected pins which are not used inside the module are by default skipped during\ninsertion of tie high and tie low cells. If you use the insert_tiehilo_cells command to\ninsert tie high and tie low cells, these hierarchical pins are not skipped by default and you can\nuse the -skip_unused_hier_pins option to skip them.\n\n**Examples**\n\nFor the following examples, assume the following constant assignments in the RTL code:\n\nassign out1 = 1\u2019b0;\nassign out2 = 1\u2019b0;\n\nIn addition, assume the remove_assigns attribute is set to false.\n\n\u25a0 If the use_tiehilo_for_const attribute us set to none, the netlist will remain\nunchanged.\n\n\u25a0 If the use_tiehilo_for_const attribute us set to duplicate, the netlist will look\nlike:\nTIELO tie_0_cell(.Y (out1));\nTIELO tie_0_cell(.Y (out2));\n\n```\ndft_scan_map_mode on page 1569\n```\n```\nduplicate Allows each constant assignment to be replaced with a tie cell.\n```\n```\nnone Prevents the replacement of constants in the netlist with tie\ncells.\nunique Allows only one unique tie cell in the netlist. Treatment of the\nremaining constant assignments depends on settings of the\nremove_assigns attribute and the command.\n```\n\n```\nElaboration and Synthesis\u2014Root Attributes\n```\nJanuary 2019 1179 Product Version 18.1\n\n\u25a0 If the use_tiehilo_for_const attribute us set to unique, the netlist will look like:\n\n```\nTIELO tie_0_cell(.Y (out1));\nassign out2 = out1;\n```\n**Related Information**\n\n```\nAffects these commands: syn_map\nsyn_opt\nAffected by this command: set_remove_assign_options\nAffected by these attribute: ignore_preserve_in_tiecell_insertion on page 1127\nremove_assigns on page 1162\n```\n\n```\nElaboration and Synthesis\u2014Design Attributes\n```\nJanuary 2019 1180 Product Version 18.1\n\n**Design Attributes**\n\nContain information about the specified design.\n\n\u27a4 To set a design attribute, type\n\n```\nset_attribute attribute_name attribute_value /designs/ design\nor\nset_attribute attribute_name attribute_value [find /des* -design name ]\n```\n\u27a4 To get a design attribute value, type\n\n```\nget_attribute attribute_name design\n```",
    "ultra_global_mapping": "'\nultra_global_mapping {false | true | auto}\n\n_Default_ : false\n\n**Read-write** root attribute. Controls the use of some enhanced optimization algorithms\nduring global mapping which could improve the QoR on some designs. When enabled, this\nwill have an impact on runtime due to the iterative nature of the algorithms. If you set the value\nto auto, Genus will automatically decide whether or not to invoke these algorithms.\n\n**Note:** These enhanced optimization algorithms are only available when you use the\nsyn_map command with high effort.\n\nThis attribute is automatically enabled when you use physical-aware mapping and\nphysical-aware structuring.\n\n**Related Information**\n\nAffects these commands: syn_map\n\n```\nsyn_opt\n```\nAffects this command: syn_map\n\n\n```\nElaboration and Synthesis—root Attributes\n```\nSeptember 2017 1083 Product Version 17.1'",
    "multibit_adaptive_costing": "\nforce_merge_seqs_into_multibit_cells {false | true}\n\n_Default:_ false\n\n**Read-write** root attribute. Merges single-bit sequential instances into an appropriate\nmultibit sequential instance independent of the impact on the QoR. When enabled, multibit\ncell inferencing will occur even if it degrades the delay, power, or area QOR of the design. This\nis useful for increasing multibit coverage but might negatively impact the QoR.\n\n**Examples**\n\nAssume two single bit instances reg1 and reg2 can be merged into a multibit instance. The\nlibrary has three suitable multibit cells: dual1, dual2, and dual3.\n\n■ Consider only force_merge_seqs_into_multibit_cells enabled:\n\n```\nset_attribute multibit_adaptive_costing false /\nset_attribute force_merge_seqs_into_multibit_cells true /\nIn this case, the tool computes the total cost with timing for each of the possible multibit\nlibcell candidates. The best candidate for multibit cell merging will be chosen irrespective\nof whether it improves or degrades the delay QoR of the design.\n```\n■ Consider both force_merge_seqs_into_multibit_cells and\nmultibit_adaptive_costing are enabled:\nset_attribute multibit_adaptive_costing true /\nset_attribute force_merge_seqs_into_multibit_cells true /\nIn this case, the tool computes the power and area costs for each of the possible multibit\nlibcell candidates. The best candidate for multibit cell merging will be chosen irrespective\nof whether it improves the delay QoR of the design.\n\n**Related Information**\n\nMapping to Multibit Cells in _Genus Synthesis Flows Guide for Legacy UI_\n\n```\nAffects this command: syn_opt\nAffected by this attribute: use_multibit_cells on page 1173\nRelated attributes: dont_merge_multibit on page 1190\nforce_merge_combos_into_multibit_cells on page 1064\nmerge_multibit on page 1193\nmap_to_multibit_register on page 1196\n```\n\n```\nElaboration and Synthesis—Root Attributes\n```\nJanuary 2019 1066 Product Version 18.1"
}