{
    "margin_by" : "-coreMarginsBy {io | die}\nSpecifies whether the core margins are calculated using the core-to-IO boundary or the core-to-die boundary.\nDefault: io\nData_type: string, optional",
    "origin" : "-fplanOrigin {center | llcorner}\nSpecifies whether the origin of the floorplan should be at the center or at the lower left corner.\nDefault: llcorner (lower left corner)\nData_type: string, optional",
    "mode enum r su" : "-r {aspectRatio [rowDensity [Left Bottom Right Top]]}\nSpecifies the chip's core dimensions as the ratio of the height divided by the width. If a value of 1.0 is used, a square chip is defined. A value of 2.0 will define a\nrectangular chip with height dimension that is twice the width dimension.\n\n- aspectRatio: Specifies the aspect ratio value.\n- rowDensity: Specifies a row density value.\n- rowDensity = (std area + block/macro area) / core area\n- Left: Specifies the margin from the outside edge of the core box to the left.\n- Bottom: Specifies the margin from the outside edge of the core box to the bottom.\n- Right: Specifies the margin from the outside edge of the core box to the right.\nTop: Specifies the margin from the outside edge of the core box to the top.\n\nThe following command creates floorplan by specifying the core dimensions aspect ratio of 1.0,row density of 0.5,and the spacing between core edge to each io box edge of 300.\nfloorPlan -site tsm3site -r {1.0 0.5 300 300 300 300} -coreMarginsBy io -su {aspectRatio [stdCellDensity [Left Bottom Right Top]]}\nDetermines the core and module sizes by standard cell density.\n\n- aspectRatio: Specifies the aspect ratio value.\n- stdCellDensity: Specifies a standard cell density value.\n- stdCellDensity =  std cell area/(core area - block/macro area)\n- Left: Specifies the margin from the outside edge of the core box to the left.\n- Bottom: Specifies the margin from the outside edge of the core box to the bottom.\n- Right: Specifies the margin from the outside edge of the core box to the right.\n- Top: Specifies the margin from the outside edge of the core box to the top.\n\nThe following command creates floorplan by specifying the core dimensions aspect ratio of 1.0,standard cell density of 0.5,and the spacing between core edge to each io box edge of 300.\nfloorPlan -su {1.0 0.5 300 300 300 300}\n\nData_type: list, required aspect float 0.5 1.0",
    "aspect" : "-aspectRatio: Specifies the aspect ratio value.\n ",
    "density" : "- rowDensity = (std area + block/macro area) / core area",
    "margin" : "- Left: Specifies the margin from the outside edge of the core box to the left.\n- Bottom: Specifies the margin from the outside edge of the core box to the bottom.\n- Right: Specifies the margin from the outside edge of the core box to the right.\n- Top: Specifies the margin from the outside edge of the core box to the top.",
    "make_path_groups" : "# Reset all existing path groups, including basic path groups\n\nreset_path_group -all\n\n# Reset all options set on all path groups\n\nresetPathGroupOptions\n\n# Create collection for each category\n\nset inputs   [all_inputs -no_clocks]\nset outputs  [all_outputs]\nset icgs     [filter_collection [all_registers] 'is_integrated_clock_gating_cell == true']\nset regs     [remove_from_collection [all_registers -edge_triggered] $icgs]\nset allregs  [all_registers]\n\n# Create collection for all macros\n\nset blocks      [ dbGet top.insts.cell.baseClass block -p2 ]\nset macro_refs  [ list ]\nset macros      [ list ]\n\n# If the list of blocks is non-empty, filter out non-physical blocks\n\nset blocks_exist  [ expr [ lindex $blocks 0 ] != 0 ]\n\nif { $blocks_exist } {\n  foreach b $blocks {\n    set cell    [ dbGet $b.cell ]\n    set isBlock [ dbIsCellBlock $cell ]\n    set isPhys  [ dbGet $b.isPhysOnly ]\n    # Return all blocks that are _not_ physical-only (e.g., filter out IO bondpads)\n    if { [ expr $isBlock && ! $isPhys ] } {\n      puts [ dbGet $b.name ]\n      lappend macro_refs $b\n      lappend macros     [ dbGet $b.name ]\n    }\n  }\n}\n\n# Group paths (for any groups that exist)\n\ngroup_path -name In2Out -from $inputs -to $outputs\n\nif { $allregs != '' } {\n  group_path -name In2Reg  -from $inputs  -to $allregs\n  group_path -name Reg2Out -from $allregs -to $outputs\n}\n\nif { $regs != '' } {\n  group_path -name Reg2Reg -from $regs -to $regs\n}\n\nif { $allregs != '' && $icgs != '' } {\n  group_path -name Reg2ClkGate -from $allregs -to $icgs\n}\n\nif { $macros != '' } {\n  group_path -name All2Macro -to   $macros\n  group_path -name Macro2All -from $macros\n}\n\n# High-effort path groups\n\nif { $macros != '' } {\n  setPathGroupOptions All2Macro -effortLevel high\n  setPathGroupOptions Macro2All -effortLevel high\n}\n\nif { $regs != '' } {\n  setPathGroupOptions Reg2Reg -effortLevel high\n}"
}