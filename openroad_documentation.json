[
    {
        "source": "install",
        "amount": 7,
        "knowledge": [
            {
                "summary": "",
                "content": "id:install_0\n# Installing OpenROAD\n## Build\n\nThe first step, independent of the build method, is to download the repository:\n\n``` shell\ngit clone --recursive https://github.com/The-OpenROAD-Project/OpenROAD.git\ncd OpenROAD\n```\n\nOpenROAD git submodules (cloned by the `--recursive` flag) are located in `src/`.\n\nThe default build type is RELEASE to compile optimized code.\nThe resulting executable is in `build/src/openroad`.\n\nOptional CMake variables passed as `-D<var>=<value>` arguments to CMake are show below.\n\n| Argument               | Value                     |\n|------------------------|---------------------------|\n| `CMAKE_BUILD_TYPE`     | DEBUG, RELEASE            |\n| `CMAKE_CXX_FLAGS`      | Additional compiler flags |\n| `TCL_LIBRARY`          | Path to Tcl library       |\n| `TCL_HEADER`           | Path to `tcl.h`           |\n| `ZLIB_ROOT`            | Path to `zlib`            |\n| `CMAKE_INSTALL_PREFIX` | Path to install binary    |\n\n> **Note:** There is a `openroad_build.log` file that is generated\nwith every build in the build directory. In case of filing issues,\nit can be uploaded in the \"Relevant log output\" section of OpenROAD\n[issue forms](https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts/issues/new/choose).\n\n",
                "id": "install_0"
            },
            {
                "summary": "",
                "content": "id:install_1\n# Installing OpenROAD\n## Install dependencies\n\nYou may follow our helper script to install dependencies as follows:\n``` shell\nsudo ./etc/DependencyInstaller.sh\n```\n\n> **WARNING**\n>\n> `etc/DependencyInstaller.sh` defaults to installing system \n> packages and requires sudo access. These packages can affect\n> your environment. We recommend users install dependencies\n> locally using [setup.sh](https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts/blob/master/setup.sh)\n> from OpenROAD-flow-scripts.\n\n",
                "id": "install_1"
            },
            {
                "summary": "",
                "content": "id:install_2\n# Installing OpenROAD\n### Build Manually\n\n``` shell\nmkdir build && cd build\ncmake ..\nmake\nmake install \n```\n\nThe default install directory is `/usr/local`.\nTo install in a different directory with CMake use:\n\n``` shell\ncmake .. -DCMAKE_INSTALL_PREFIX=<prefix_path>\n```\n\nAlternatively, you can use the `DESTDIR` variable with make.\n\n``` shell\nmake DESTDIR=<prefix_path> install\n```\n\n",
                "id": "install_2"
            },
            {
                "summary": "",
                "content": "id:install_3\n# Installing OpenROAD\n### Build using support script\n\n``` shell\n./etc/Build.sh\n# To build with debug option enabled and if the Tcl library is not on the default path\n./etc/Build.sh -cmake=\"-DCMAKE_BUILD_TYPE=DEBUG -DTCL_LIB=/path/to/tcl/lib\"\n```\n\nThe default install directory is `/usr/local`.\nTo install in a different directory use:\n\n``` shell\n./etc/Build.sh -cmake=\"-DCMAKE_INSTALL_PREFIX=<prefix_path>\"\n```\n\n",
                "id": "install_3"
            },
            {
                "summary": "",
                "content": "id:install_4\n# Installing OpenROAD\n### LTO Options\nBy default, OpenROAD is built with link time optimizations enabled.\nThis adds about 1 minute to compile times and improves the runtime\nby about 11%. If you would like to disable LTO pass \n`-DLINK_TIME_OPTIMIZATION=OFF` when generating a build.\n\n",
                "id": "install_4"
            },
            {
                "summary": "",
                "content": "id:install_5\n# Installing OpenROAD\n### Build with Address Sanitizer\nTo enable building with Address Sanitizer, use the argument `-DASAN=ON`.\nSetting the `ASAN` variable to `ON` adds necessary compile and link options\nfor using Address Sanitizer.\n\n> **Note:** Address Sanitizer adds instrumentation for detecting memory errors.\n>  Enabling this option will cause OpenROAD to run slower and consume more RAM.\n\n",
                "id": "install_5"
            },
            {
                "summary": "",
                "content": "id:install_6\n# Installing OpenROAD\n### Build with Prebuilt Binaries\n\nCourtesy of [Precision Innovations](https://precisioninno.com/), there are pre-built binaries\nof OpenROAD with self-contained dependencies released on a regular basis.\nRefer to this [link](https://openroad-flow-scripts.readthedocs.io/en/latest/user/BuildWithPrebuilt.html) here.",
                "id": "install_6"
            }
        ]
    },
    {
        "source": "scripts",
        "amount": 16,
        "knowledge": [
            {
                "summary": "",
                "content": "id:scripts_0\n# Welcome to the OpenROAD Flow Scripts documentation!\n\nThe OpenROAD (\"Foundations and Realization of Open, Accessible Design\")\nproject was launched in June 2018 within the DARPA IDEA program. OpenROAD\naims to bring down the barriers of cost, expertise and unpredictability that\ncurrently block designers' access to hardware implementation in advanced\ntechnologies. The project team (Qualcomm, Arm and multiple universities and\npartners, led by UC San Diego) is developing a fully autonomous, open-source\ntool chain for digital SoC layout generation, focusing on the RTL-to-GDSII\nphase of system-on-chip design. Thus, OpenROAD holistically attacks the\nmultiple facets of today's design cost crisis: engineering resources,\ndesign tool licenses, project schedule, and risk.\n\nThe IDEA program targets no-human-in-loop (NHIL) design, with 24-hour\nturnaround time and zero loss of power-performance-area (PPA) design quality.\n\nThe NHIL target requires tools to adapt and auto-tune successfully to\nflow completion, without (or, with minimal) human intervention. Machine\nintelligence augments human expertise through efficient modeling and\nprediction of flow and optimization outcomes throughout the synthesis,\nplacement and routing process. This is complemented by development of\nmetrics and machine learning infrastructure.\n\nThe 24-hour runtime target implies that problems must be strategically\ndecomposed throughout the design process, with clustered and partitioned\nsubproblems being solved and recomposed through intelligent distribution\nand management of computational resources. This ensures that the NHIL design\noptimization is performed within its available `[threads * hours]` \"box\" of\nresources. Decomposition that enables parallel and distributed search over\ncloud resources incurs a quality-of-results loss, but this is subsequently\nrecovered through improved flow predictability and enhanced optimization.\n\nLearn more about the project at our website and our resources page\n[here](https://theopenroadproject.org/resources/).\n\n",
                "id": "scripts_0"
            },
            {
                "summary": "",
                "content": "id:scripts_1\n# Welcome to the OpenROAD Flow Scripts documentation!\n## Getting Started with OpenROAD Flow Scripts\n\nOpenROAD Flow is a full RTL-to-GDS flow built entirely on open-source tools.\nThe project aims for automated, no-human-in-the-loop digital circuit design\nwith 24-hour turnaround time. For more information, refer to our repository\n[README](mainREADME.md).\n\n```{tip}\nSee these [tips](user/FAQS.md#how-do-i-get-better-search-results) to help improve your search results.\n```\n\n\n",
                "id": "scripts_1"
            },
            {
                "summary": "",
                "content": "id:scripts_2\n# Welcome to the OpenROAD Flow Scripts documentation!\n#### Supported Operating Systems\n\nNote that depending on the installation method, we have varying levels of \nsupport for various operating systems. \n\nLegend:\n- `Y` for supported.\n- `-` for unsupported.\n\n| Operating System | Local Installation | Prebuilt Binaries | Docker Installation | Windows Subsystem for Linux | \n| --- | --- | --- | --- | --- |\n| Ubuntu 20.04 | `Y` | `Y` | `Y` | `-` |  \n| Ubuntu 22.04 | `Y` | `Y` | `Y` | `-` |\n| CentOS 7     | `Y` | `-` | `Y` | `-` |\n| CentOS 8     | `Y` | `-` | `Y` | `-` |\n| Debian 10    | `Y` | `Y` | `Y` | `-` |\n| Debian 11    | `Y` | `Y` | `Y` | `-` |\n| RHEL         | `Y` | `-` | `Y` | `-` |\n| Windows 10 and above | `-` | `-` | `Y` | `Y` |\n| macOS        | `Y*` | `-` | `Y` | `-` |\n\n```{warning}\nFor macOS, local compilation for the modules `par` and `mpl2` are not\nfully supported due to an upstream issue with `or-tools`. We recommend\nDocker installation wherever possible.\n```\n\n",
                "id": "scripts_2"
            },
            {
                "summary": "",
                "content": "id:scripts_3\n# Welcome to the OpenROAD Flow Scripts documentation!\n#### System Requirements\n\nTo build the binaries and run `gcd` through the flow:\n\n- Minimum: 1 CPU core and 8GB RAM.\n- Recommended: 4 CPU cores and 16GB of RAM.\n\n```{note}\n`gcd` is a small design, and thus requires less computational power.\nLarger designs may require better hardware.\n\n```\n",
                "id": "scripts_3"
            },
            {
                "summary": "",
                "content": "id:scripts_4\n# Welcome to the OpenROAD Flow Scripts documentation!\n#### Build or Installing ORFS Dependencies\n\nWe support four major ways of installation:\n\n- [Docker](./user/BuildWithDocker.md)\n- [Pre-built Binaries](./user/BuildWithPrebuilt.md)\n- [Windows Subsystem for Linux (WSL)](./user/BuildWithWSL.md)\n- [Local Installation](./user/BuildLocally.md)\n\nYou may also choose use the build script to customise your build process.\nSee more in the next section.\n\n",
                "id": "scripts_4"
            },
            {
                "summary": "",
                "content": "id:scripts_5\n# Welcome to the OpenROAD Flow Scripts documentation!\n##### Build Command and options\n\n``` shell\n./build_openroad.sh --help\n```\n\nOptions for `./build_openroad.sh` script\n| Argument                      | Description                                                                           |\n|-------------------------------|---------------------------------------------------------------------------------------|\n| `-h` or `--help`              | Print help message.                                                                   |\n| `-o` or  `--local`            | Build locally instead of building a Docker image.                                     |\n| `-l` or  `--latest`           | Use the head of branch --or_branch or 'master' by default for tools/OpenROAD.         |\n| `--or_branch BRANCH_NAME`     | Use the head of branch BRANCH for tools/OpenROAD.                                     |\n| `--or_repo REPO_URL`          | Use a fork at REPO-URL (https/ssh) for tools/OpenROAD.                                |\n| `--no_init`                   | Skip initializing submodules.                                                         |\n| `-t N` or `--threads N`       | Use N cpus when compiling software.                                                   |\n| `-n` or `--nice`              | Nice all jobs. Use all cpus unless `--threads` is also given, then use N threads.     |\n| `--yosys-args-overwrite`      | Do not use default flags set by this scrip during Yosys compilation.                  |\n| `--yosys-args STRING`         | Aditional compilation flags for Yosys compilation.                                    |\n| `--openroad-args-overwrite`   | Do not use default flags set by this script during OpenROAD app compilation.          |\n| `--openroad-args STRING`      | Aditional compilation flags for OpenROAD app compilation.                             |\n| `--lsoracle-enable`           | Compile LSOracle. Disable by default as it is not currently used on the flow.         |\n| `--lsoracle-args-overwrite`   | Do not use default flags set by this scrip during LSOracle compilation.               |\n| `--lsoracle-args STRING`      | Aditional compilation flags for LSOracle compilation.                                 |\n| `--install-path PATH`         | Path to install tools. Default is `${INSTALL_PATH}`.                                  |\n| `--clean`                     | Call git clean interactively before compile. Useful to remove old build files.        |\n| `--clean-force`               | Call git clean before compile. WARNING: this option will not ask for confirmation. Useful to remove old build files. |\n| `-c` or `--copy-platforms`    | Only applicable for docker builds. Copy platforms to inside docker image.             |\n| `--docker-args-overwrite`     | Only applicable for docker builds. Do not use default flags set by this script for Docker builds.  |\n| `--docker-args STRING`        | Only applicable for docker builds. Additional compilation flags for Docker build.     |\n\n\n",
                "id": "scripts_5"
            },
            {
                "summary": "",
                "content": "id:scripts_6\n# Welcome to the OpenROAD Flow Scripts documentation!\n### Running a Design\n\nSample design configurations are available in the `designs` directory.\nYou can select a design using either of the following methods:\n\n1. The flow\n   [Makefile](https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts/blob/master/flow/Makefile)\n   contains a list of sample design configurations at the top of the\n   file. Uncomment the respective line to select the design.\n2. Specify the design using the shell environment. For example:\n\n```shell\nmake DESIGN_CONFIG=./designs/nangate45/swerv/config.mk\n# or\nexport DESIGN_CONFIG=./designs/nangate45/swerv/config.mk\nmake\n```\n\nBy default, the `gcd` design is selected using the\n`nangate45` platform. The resulting GDS will be available at\n`flow/results/nangate45/gcd/6_final.gds`. The flow should take only a few\nminutes to produce a GDS for this design. We recommend implementing this\ndesign first to validate your flow and tool setup.\n\n",
                "id": "scripts_6"
            },
            {
                "summary": "",
                "content": "id:scripts_7\n# Welcome to the OpenROAD Flow Scripts documentation!\n### Design exploration and automatic parameter tuning\n\nAutoTuner is an automatic parameter tuning framework capable of performing\nautomatic parameter tuning framework for commercial and academic RTL-to-GDS\nflows. The two main functionalities that AutoTuner provides are:\n\n- Automatic hyperparameter tuning framework for OpenROAD-flow-scripts\n- Parametric sweeping experiments for OpenROAD-flow-scripts\n\n```{tip}\nRefer to the detailed [instructions here](./user/InstructionsForAutoTuner.md) for AutoTuner.\n\n```\n\n",
                "id": "scripts_7"
            },
            {
                "summary": "",
                "content": "id:scripts_8\n# Welcome to the OpenROAD Flow Scripts documentation!\n### Adding a Design\n\nTo add a new design to the `flow` directory, refer to the document [here](./user/AddingNewDesign.md).\n\n",
                "id": "scripts_8"
            },
            {
                "summary": "",
                "content": "id:scripts_9\n# Welcome to the OpenROAD Flow Scripts documentation!\n### Platforms\n\nOpenROAD-flow-scripts supports Verilog to GDS for the following open platforms:\n\n- ASAP7\n- Nangate45 / FreePDK45\n- SKY130\n\nThese platforms have a permissive license which allows us to\nredistribute the PDK and OpenROAD platform-specific files. The platform\nfiles and license(s) are located in `platforms/{platform}`.\n\nOpenROAD-flow-scripts also supports the following proprietary platforms:\n\n- GF12\n- TSMC65LP\n\nThe PDKs and platform-specific files for these kits cannot be provided\ndue to NDA restrictions. However, if you are able to access these\nplatforms, you can create the necessary platform-specific files\nyourself.\n\nOnce the platform is set up, you can create a new design configuration with\ninformation about the design. See sample configurations in the `design`\ndirectory.\nRefer to the [Flow variables](./user/FlowVariables.md) document for details on how to use\nenvironment variables in OpenROAD-flow-scripts to configure platform and design specific parameters.\n\n",
                "id": "scripts_9"
            },
            {
                "summary": "",
                "content": "id:scripts_10\n# Welcome to the OpenROAD Flow Scripts documentation!\n#### Adding a Platform\n\nRefer to the [platform bring up](./contrib/PlatformBringUp.md) documentation\nto set up a new platform for OpenROAD-flow-scripts.\n\n",
                "id": "scripts_10"
            },
            {
                "summary": "",
                "content": "id:scripts_11\n# Welcome to the OpenROAD Flow Scripts documentation!\n### Implement the Design\n\nRun `make` to perform Verilog to GDS. The final output will be located\nat `flow/results/{platform}/{design_name}/6_final.gds`\n\n\n",
                "id": "scripts_11"
            },
            {
                "summary": "",
                "content": "id:scripts_12\n# Welcome to the OpenROAD Flow Scripts documentation!\n#### Smoke-test harness for top-level Verilog designs\n\n1. Drop your Verilog files into `designs/src/harness`\n2. Start the workflow:\n\n```{tip}\nStart with a very small submodule in your design that has only a few pins.\n```\n\n```shell\nmake DESIGN_NAME=TopLevelName DESIGN_CONFIG=$(pwd)/designs/harness.mk\n```\n\n",
                "id": "scripts_12"
            },
            {
                "summary": "",
                "content": "id:scripts_13\n# Welcome to the OpenROAD Flow Scripts documentation!\n## How to contribute\n\nIf you are willing to **contribute**, see the\n[Getting Involved](contrib/GettingInvolved.md) section.\n\nIf you are a **developer** with EDA background, learn more about how you\ncan use OpenROAD as the infrastructure for your tools in the\n[Developer Guide](contrib/DeveloperGuide.md) section.\n\n",
                "id": "scripts_13"
            },
            {
                "summary": "",
                "content": "id:scripts_14\n# Welcome to the OpenROAD Flow Scripts documentation!\n## How to get in touch\n\nWe maintain the following channels for communication:\n\n- Project homepage and news: <https://theopenroadproject.org>\n- Twitter: <https://twitter.com/OpenROAD_EDA>\n- Issues and bugs:\n  - OpenROAD Flow: <https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts/issues>\n  - OpenROAD with OpenROAD Flow Scripts: <https://github.com/The-OpenROAD-Project/OpenROAD/issues/>\n- Discussions:\n  - OpenROAD Flow: <https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts/discussions>\n- Inquiries: openroad@ucsd.edu\n\nSee also our [FAQs](user/FAQS.md).\n\n",
                "id": "scripts_14"
            },
            {
                "summary": "",
                "content": "id:scripts_15\n# Welcome to the OpenROAD Flow Scripts documentation!\n## Code of conduct\n\nPlease read our code of conduct [here](./contrib/CODE_OF_CONDUCT.md).\n",
                "id": "scripts_15"
            }
        ]
    },
    {
        "source": "get_start",
        "amount": 13,
        "knowledge": [
            {
                "summary": "",
                "content": "id:get_start_0\n# OpenROAD\n## About OpenROAD\n\nOpenROAD is the leading open-source, foundational application for\nsemiconductor digital design. The OpenROAD flow delivers an\nAutonomous, No-Human-In-Loop (NHIL) flow, 24 hour turnaround from\nRTL-GDSII for rapid design exploration and physical design implementation.\n\n```{mermaid}\n:align: center\n\n%%{\n  init: {\n    'theme': 'neutral',\n    'themeVariables': {\n      'textColor': '#000000',\n      'noteTextColor' : '#000000',\n      'fontSize': '20px'\n    }\n  }\n}%%\n\nflowchart LR\n    b0[                  ] --- b2[ ] --- b4[ ] --- ORFlow --- b1[ ] --- b3[ ] --- b5[                  ]\n    style b0 stroke-width:0px, fill: #FFFFFF00, color:#FFFFFF00\n    style b1 stroke-width:0px, fill: #FFFFFF00\n    style b2 stroke-width:0px, fill: #FFFFFF00\n    style b3 stroke-width:0px, fill: #FFFFFF00\n    style b4 stroke-width:0px, fill: #FFFFFF00\n    style b5 stroke-width:0px, fill: #FFFFFF00, color:#FFFFFF00\n\n    linkStyle 0 stroke-width:0px\n    linkStyle 1 stroke-width:0px\n    linkStyle 2 stroke-width:0px\n    linkStyle 3 stroke-width:0px\n    linkStyle 4 stroke-width:0px\n    linkStyle 5 stroke-width:0px\n\n\n    subgraph ORFlow\n    direction TB\n    style ORFlow fill:#ffffff00, stroke-width:0px\n        A[Verilog\\n+ libraries\\n + constraints] --> FLOW\n        style A fill:#74c2b5,stroke:#000000,stroke-width:4px\n        subgraph FLOW\n        style FLOW fill:#FFFFFF00,stroke-width:4px\n\n        direction TB\n            B[Synthesis]\n            B --> C[Floorplan]\n            C --> D[Placement]\n            D --> E[Clock Tree Synthesis]\n            E --> F[Routing]\n            F --> G[Finishing]\n            style B fill:#f8cecc,stroke:#000000,stroke-width:4px\n            style C fill:#fff2cc,stroke:#000000,stroke-width:4px\n            style D fill:#cce5ff,stroke:#000000,stroke-width:4px\n            style E fill:#67ab9f,stroke:#000000,stroke-width:4px\n            style F fill:#fa6800,stroke:#000000,stroke-width:4px\n            style G fill:#ff6666,stroke:#000000,stroke-width:4px\n        end\n\n        FLOW --> H[GDSII\\n Final Layout]\n        %% H --- H1[ ]\n        %% style H1 stroke-width:0px, fill: #FFFFFF00\n        %% linkStyle 11 stroke-width:0px\n        style H fill:#ff0000,stroke:#000000,stroke-width:4px\n    end\n\n```\n\n\n",
                "id": "get_start_0"
            },
            {
                "summary": "",
                "content": "id:get_start_1\n# OpenROAD\n## OpenROAD Mission\n\n[OpenROAD](https://theopenroadproject.org/) eliminates the barriers\nof cost, schedule risk and uncertainty in hardware design to promote\nopen access to rapid, low-cost IC design software and expertise and\nsystem innovation. The OpenROAD application enables flexible flow\ncontrol through an API with bindings in Tcl and Python.\n\nOpenROAD is used in research and commercial applications such as,\n- [OpenROAD-flow-scripts](https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts)\n  from [OpenROAD](https://theopenroadproject.org/)\n- [OpenLane](https://github.com/The-OpenROAD-Project/OpenLane) from\n  [Efabless](https://efabless.com/)\n- [Silicon Compiler](https://github.com/siliconcompiler/siliconcompiler)\n  from [Zero ASIC](https://www.zeroasic.com/)\n- [Hammer](https://docs.hammer-eda.org/en/latest/Examples/openroad-nangate45.html)\n  from [UC Berkeley](https://github.com/ucb-bar)\n- [OpenFASoC](https://github.com/idea-fasoc/OpenFASOC) from\n  [IDEA-FASoC](https://github.com/idea-fasoc) for mixed-signal design flows\n\nOpenROAD fosters a vibrant ecosystem of users through active\ncollaboration and partnership through software development and key\nalliances. Our growing user community includes hardware designers,\nsoftware engineers, industry collaborators, VLSI enthusiasts,\nstudents and researchers.\n\nOpenROAD strongly advocates and enables IC design-based education\nand workforce development initiatives through training content and\ncourses across several global universities, the Google-SkyWater\n[shuttles](https://platform.efabless.com/projects/public) also\nincludes GlobalFoundries shuttles, design contests and IC design\nworkshops. The OpenROAD flow has been successfully used to date\nin over 600 silicon-ready tapeouts for technologies up to 12nm.\n\n",
                "id": "get_start_1"
            },
            {
                "summary": "",
                "content": "id:get_start_2\n# OpenROAD\n## Getting Started with OpenROAD-flow-scripts\n\nOpenROAD provides [OpenROAD-flow-scripts](https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts)\nas a native, ready-to-use prototyping and tapeout flow. However,\nit also enables the creation of any custom flow controllers based\non the underlying tools, database and analysis engines. Please refer to the flow documentation [here](https://openroad-flow-scripts.readthedocs.io/en/latest/).\n\nOpenROAD-flow-scripts (ORFS) is a fully autonomous, RTL-GDSII flow\nfor rapid architecture and design space exploration, early prediction\nof QoR and detailed physical design implementation. However, ORFS\nalso enables manual intervention for finer user control of individual\nflow stages through Tcl commands and Python APIs.\n\nFigure below shows the main stages of the OpenROAD-flow-scripts:\n\n```{mermaid}\n:align: center\n\n%%{init: { 'logLevel': 'debug', 'theme': 'dark'\n  } }%%\ntimeline\n  title RTL-GDSII Using OpenROAD-flow-scripts\n  Synthesis\n    : Inputs  [RTL, SDC, .lib, .lef]\n    : Logic Synthesis  (Yosys)\n    : Output files  [Netlist, SDC]\n  Floorplan\n    : Floorplan Initialization\n    : IO placement  (random)\n    : Timing-driven mixed-size placement\n    : Macro placement\n    : Tapcell and welltie insertion\n    : PDN generation\n  Placement\n    : Global placement without placed IOs\n    : IO placement  (optimized)\n    : Global placement with placed IOs\n    : Resizing and buffering\n    : Detailed placement\n  CTS : Clock Tree Synthesis\n    : Timing optimization\n    : Filler cell insertion\n  Routing\n    : Global Routing\n    : Detailed Routing\n  Finishing\n    : Metal Fill insertion\n    : Signoff timing report\n    : Generate GDSII  (KLayout)\n    : DRC/LVS check (KLayout)\n```\n\nHere are the main steps for a physical design implementation\nusing OpenROAD;\n\n- `Floorplanning`\n  - Floorplan initialization - define the chip area, utilization\n  - IO pin placement (for designs without pads)\n  - Tap cell and well tie insertion\n  - PDN- power distribution network creation\n- `Global Placement` \n  - Macro placement (RAMs, embedded macros)\n  - Standard cell placement\n  - Automatic placement optimization and repair for max slew,\n    max capacitance, and max fanout violations and long wires\n- `Detailed Placement`\n  - Legalize placement - align to grid, adhere to design rules\n  - Incremental timing analysis for early estimates\n- `Clock Tree Synthesis` \n  - Insert buffers and resize for high fanout nets\n- `Optimize setup/hold timing`\n- `Global Routing`\n  - Antenna repair\n  - Create routing guides\n- `Detailed Routing`\n  - Legalize routes, DRC-correct routing to meet timing, power\n    constraints\n- `Chip Finishing`\n  - Parasitic extraction using OpenRCX\n  - Final timing verification\n  - Final physical verification\n  - Dummy metal fill for manufacturability\n  - Use KLayout or Magic using generated GDS for DRC signoff\n\n",
                "id": "get_start_2"
            },
            {
                "summary": "",
                "content": "id:get_start_3\n# OpenROAD\n### GUI\n\nThe OpenROAD GUI is a powerful visualization, analysis, and debugging\ntool with a customizable Tcl interface. The below figures show GUI views for\nvarious flow stages including floorplanning, placement congestion,\nCTS and post-routed design.\n\n\n",
                "id": "get_start_3"
            },
            {
                "summary": "",
                "content": "id:get_start_4\n# OpenROAD\n### PDK Support\n\nThe OpenROAD application is PDK independent. However, it has been tested\nand validated with specific PDKs in the context of various flow\ncontrollers.\n\nOpenLane supports SkyWater 130nm and GlobalFoundries 180nm.\n\nOpenROAD-flow-scripts supports several public and private PDKs\nincluding:\n\n",
                "id": "get_start_4"
            },
            {
                "summary": "",
                "content": "id:get_start_5\n# OpenROAD\n#### Open-Source PDKs\n\n-   `GF180` - 180nm\n-   `SKY130` - 130nm\n-   `Nangate45` - 45nm\n-   `ASAP7` - Predictive FinFET 7nm\n\n",
                "id": "get_start_5"
            },
            {
                "summary": "",
                "content": "id:get_start_6\n# OpenROAD\n#### Proprietary PDKs\n\nThese PDKS are supported in OpenROAD-flow-scripts only. They are used to\ntest and calibrate OpenROAD against commercial platforms and ensure good\nQoR. The PDKs and platform-specific files for these kits cannot be\nprovided due to NDA restrictions. However, if you are able to access\nthese platforms independently, you can create the necessary\nplatform-specific files yourself.\n\n-   `GF55` - 55nm\n-   `GF12` - 12nm\n-   `Intel22` - 22nm\n-   `Intel16` - 16nm\n-   `TSMC65` - 65nm\n\n",
                "id": "get_start_6"
            },
            {
                "summary": "",
                "content": "id:get_start_7\n# OpenROAD\n## Tapeouts\n\nOpenROAD has been used for full physical implementation in over\n600 tapeouts in SKY130 and GF180 through the Google-sponsored,\nEfabless [MPW shuttle](https://efabless.com/open_shuttle_program)\nand [ChipIgnite](https://efabless.com/) programs.\n\n\n\n",
                "id": "get_start_7"
            },
            {
                "summary": "",
                "content": "id:get_start_8\n# OpenROAD\n### Continuous Tapeout Integration into CI\n\nThe OpenROAD project actively adds successfully taped out MPW shuttle\ndesigns to the [CI regression\ntesting](https://github.com/The-OpenROAD-Project/OpenLane-MPW-CI).\nExamples of designs include Open processor cores, RISC-V based SoCs,\ncryptocurrency miners, robotic app processors, amateur satellite radio\ntransceivers, OpenPower-based Microwatt etc.\n\n\n",
                "id": "get_start_8"
            },
            {
                "summary": "",
                "content": "id:get_start_9\n# OpenROAD\n## Regression Tests\n\nThere are a set of executable regression test scripts in `./test/`.\n\n``` shell\n# run tests for all tools\n./test/regression\n\n# run all flow tests\n./test/regression flow\n\n# run <tool> tests\n./test/regression <tool>\n\n# run all <tool>-specific unit tests\ncd src/<tool>\n./test/regression\n\n# run only <TEST_NAME> for <tool>\ncd src/<tool>\n./test/regression <TEST_NAME>\n```\n\nThe flow tests check results such as worst slack against reference values.\nUse `report_flow_metrics [test]...` to see all of the metrics.\n\n``` text\n% report_flow_metrics gcd_nangate45\n                       insts    area util slack_min slack_max  tns_max clk_skew max_slew max_cap max_fanout DPL ANT drv\ngcd_nangate45            368     564  8.8     0.112    -0.015     -0.1    0.004        0       0          0   0   0   0\n```\n\nTo update a failing regression, follow the instructions below:\n\n```tcl\n# update log files (i.e. *ok)\nsave_ok <TEST_NAME>\n\n# update \"*.metrics\" for tests that use flow test\nsave_flow_metrics <TEST_NAME> \n\n# update \"*.metrics_limits\" files\nsave_flow_metrics_limits <TEST_NAME>\n```\n\n",
                "id": "get_start_9"
            },
            {
                "summary": "",
                "content": "id:get_start_10\n# OpenROAD\n## Run\n\n``` text\nopenroad [-help] [-version] [-no_init] [-exit] [-gui]\n         [-threads count|max] [-log file_name] cmd_file\n  -help              show help and exit\n  -version           show version and exit\n  -no_init           do not read .openroad init file\n  -threads count|max use count threads\n  -no_splash         do not show the license splash at startup\n  -exit              exit after reading cmd_file\n  -gui               start in gui mode\n  -python            start with python interpreter [limited to db operations]\n  -log <file_name>   write a log in <file_name>\n  cmd_file           source cmd_file\n```\n\nOpenROAD sources the Tcl command file `~/.openroad` unless the command\nline option `-no_init` is specified.\n\nOpenROAD then sources the command file `cmd_file` if it is specified on\nthe command line. Unless the `-exit` command line flag is specified, it\nenters an interactive Tcl command interpreter.\n\nA list of the available tools/modules included in the OpenROAD app\nand their descriptions are available [here](../contrib/Logger.md#openroad-tool-list).\n\n",
                "id": "get_start_10"
            },
            {
                "summary": "",
                "content": "id:get_start_11\n# OpenROAD\n## Git Quickstart\nOpenROAD uses Git for version control and contributions. \nGet familiarised with a quickstart tutorial to contribution [here](../contrib/GitGuide.md).\n\n\n",
                "id": "get_start_11"
            },
            {
                "summary": "",
                "content": "id:get_start_12\n# OpenROAD\n## Understanding Warning and Error Messages\nSeeing OpenROAD warnings or errors you do not understand? We have compiled a table of all messages\nand you may potentially find your answer [here](https://openroad.readthedocs.io/en/latest/user/MessagesFinal.html).\n",
                "id": "get_start_12"
            }
        ]
    },
    {
        "source": "tapcell_insertion",
        "amount": 6,
        "knowledge": [
            {
                "summary": "",
                "content": "id:tapcell_insertion_0\n# Tapcell\n\nTapcell and endcap insertion.\n\n",
                "id": "tapcell_insertion_0"
            },
            {
                "summary": "",
                "content": "id:tapcell_insertion_1\n### Add Tapcell/Endcap\n\n```tcl\ntapcell \n    [-tapcell_master tapcell_master]\n    [-endcap_master endcap_master]\n    [-distance dist]\n    [-halo_width_x halo_x]\n    [-halo_width_y halo_y]\n    [-tap_nwin2_master tap_nwin2_master]\n    [-tap_nwin3_master tap_nwin3_master]\n    [-tap_nwout2_master tap_nwout2_master]\n    [-tap_nwout3_master tap_nwout3_master]\n    [-tap_nwintie_master tap_nwintie_master]\n    [-tap_nwouttie_master tap_nwouttie_master]\n    [-cnrcap_nwin_master cnrcap_nwin_master]\n    [-cnrcap_nwout_master cnrcap_nwout_master]\n    [-incnrcap_nwin_master incnrcap_nwin_master]\n    [-incnrcap_nwout_master incnrcap_nwout_master]\n    [-tap_prefix tap_prefix]\n    [-endcap_prefix endcap_prefix]\n    [-tbtie_cpp tbtie_cpp]\n    [-no_cell_at_top_bottom]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-tapcell_master` | Master used as a tapcell. |\n| `-endcap_master` | Master used as an endcap. |\n| `-distance` | Distance (in microns) between each tapcell in the checkerboard. |\n| `-halo_width_x` | Horizontal halo size (in microns) around macros during cut rows. |\n| `-halo_width_y` | Vertical halo size (in microns) around macros during cut rows. |\n| `-tap_nwintie_master` | Master cell placed at the top and bottom of|macros and the core area according the row orientation. |\n| `-tap_nwin2_master` | Master cell placed at the top and bottom of macros and the core area according the row orientation. This master should be smaller than `tap_nwintie_master` |\n| `-tap_nwin3_master` | Master cell placed at the top and bottom of macros and the core area according the row orientation. This master should be smaller than `tap_nwin2_master`. |\n| `-tap_nwouttie_master` | Master cell placed at the top and bottom of macros and the core area according the row orientation. |\n| `-tap_nwout2_master` | Master cell placed at the top and bottom of macros and the core area according the row orientation. This master should be smaller than `tap_nwouttie_master`. |\n| `-tap_nwout3_master` | Master cell placed at the top and bottom of macros and the core area according the row orientation | This master should be smaller than `tap_nwout2_master`. |\n| `-incnrcap_nwin_master` | Master cell placed at the corners of macros, according the row orientation. |\n| `-incnrcap_nwout_master` | Master cell placed at the corners of macros, according the row orientation. |\n| `-cnrcap_nwin_master` | Macro cell placed at the corners the core area according the row orientation. |\n| `-cnrcap_nwout_master` | Macro cell placed at the corners the core area according the row orientation. |\n| `-tap_prefix` | Prefix for the tapcell instances. The default value is `TAP_`. |\n| `-endcap_prefix` | Prefix for the endcaps instances. The default value is `PHY_`. |\n| `-tbtie_cpp` | Option is deprecated. |\n| `-no_cell_at_top_bottom` | Option is deprecated. |\n\nThe figures below show two examples of tapcell insertion. When only the \n`-tapcell_master` and `-endcap_master` masters are given, the tapcell placement\nis similar to Figure 1. When the remaining masters are give, the tapcell\nplacement is similar to Figure 2.\n\n| <img src=\"./doc/image/tapcell_example1.svg\" width=450px> | <img src=\"./doc/image/tapcell_example2.svg\" width=450px> |\n|:--:|:--:|\n| Figure 1: Tapcell insertion representation | Figure 2:  Tapcell insertion around macro representation |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "tapcell_insertion_1"
            },
            {
                "summary": "",
                "content": "id:tapcell_insertion_2\n### Only cutting rows\n\n```tcl\ncut_rows \n    [-endcap_master endcap_master]\n    [-halo_width_x halo_x]\n    [-halo_width_y halo_y]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-endcap_master` | Master used as an endcap. |\n| `-halo_width_x` | Horizontal halo size (in microns) around macros during cut rows. |\n| `-halo_width_y` | Vertical halo size (in microns) around macros during cut rows. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "tapcell_insertion_2"
            },
            {
                "summary": "",
                "content": "id:tapcell_insertion_3\n### Only adding boundary/endcap cells\n\nPlace endcaps into the design, the naming for the arguments to `place_endcaps` is based on the \nLEF58 `CLASS` specification foe endcaps.\n\n```tcl\nplace_endcaps\n    [-corner master]\n    [-edge_corner master]\n    [-endcap masters]\n    [-endcap_horizontal masters]\n    [-endcap_vertical master]\n    [-prefix prefix]\n    [-left_top_corner master]\n    [-right_top_corner master]\n    [-left_bottom_corner master]\n    [-right_bottom_corner master]\n    [-left_top_edge master]\n    [-right_top_edge master]\n    [-left_bottom_edge master]\n    [-right_bottom_edge master]\n    [-left_edge master]\n    [-right_edge master]\n    [-top_edge masters]\n    [-bottom_edge masters]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-prefix` | Prefix to use for the boundary cells. Defaults to \"PHY_\". |\n| `-corner` | Master for the corner cells on the outer corners. |\n| `-edge_corner` | Master for the corner cells on the inner corners. |\n| `-endcap` | Master used as an endcap. |\n| `-endcap_horizontal` | List of masters for the top and bottom row endcaps. (overrides `-endcap`). |\n| `-endcap_vertical` | Master for the left and right row endcaps. (overrides `-endcap`). |\n| `-left_top_corner` | Master for the corner cells on the outer top left corner. (overrides `-corner`). |\n| `-right_top_corner` | Master for the corner cells on the outer top right corner. (overrides `-corner`). |\n| `-left_bottom_corner` | Master for the corner cells on the outer bottom left corner. (overrides `-corner`). |\n| `-right_bottom_corner` | Master for the corner cells on the outer bottom right corner. (overrides `-corner`). |\n| `-left_top_edge` | Master for the corner cells on the inner top left corner. (overrides `-edge_corner`). |\n| `-right_top_edge` | Master for the corner cells on the inner top right corner. (overrides `-edge_corner`). |\n| `-left_bottom_edge` | Master for the corner cells on the inner bottom left corner. (overrides `-edge_corner`). |\n| `-right_bottom_edge` | Master for the corner cells on the inner bottom right corner. (overrides `-edge_corner`). |\n| `-left_edge` | Master for the left row endcaps. (overrides `-endcap_vertical`). |\n| `-right_edge` | Master for the right row endcaps. (overrides `-endcap_vertical`). |\n| `-top_edge` | List of masters for the top row endcaps. (overrides `-endcap_horizontal`). |\n| `-bottom_edge` | List of masters for the bottom row endcaps. (overrides `-endcap_horizontal`). |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "tapcell_insertion_3"
            },
            {
                "summary": "",
                "content": "id:tapcell_insertion_4\n### Only adding tapcells cells\n\n```tcl\nplace_tapcells\n    -master tapcell_master\n    -distance dist\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-master` | Master to use for the tapcells. |\n| `-distance` | Distance between tapcells. |\n\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "tapcell_insertion_4"
            },
            {
                "summary": "",
                "content": "id:tapcell_insertion_5\n# Tapcell\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-tap_prefix` | Remove tapcells with said prefix. |\n| `-endcap_prefix` | Remove endcaps with said prefix. |\n\n",
                "id": "tapcell_insertion_5"
            }
        ]
    },
    {
        "source": "code_generator",
        "amount": 1,
        "knowledge": [
            {
                "summary": "",
                "content": "id:code_generator_0\n# Automatic Code Generator\n\nThis is an automatic code generation tool for OpenDB objects and Iterators. To test the tool you can use the following command\n\n``` shell\npython3 gen.py --json schema.json --src_dir ../db --include_dir ../../include/odb --templates templates\n```\n\nWhere schema.json is the json file that includes the requirements, src is the source files directory, include is the include directory, and templates is the directory including the jinja templates for the classes.\n\n",
                "id": "code_generator_0"
            }
        ]
    },
    {
        "source": "add_new_fileds",
        "amount": 1,
        "knowledge": [
            {
                "summary": "",
                "content": "id:add_new_fileds_0\n# Adding new fields in DB Object\n\nFor example `add_pitchDiag` in object `DbTechLayer`.\n\n|   | Action                                                 | File              | Source Code                                                                        |\n|---|--------------------------------------------------------|-------------------|------------------------------------------------------------------------------------|\n| 1 | Add Fields at the .h file                              | `dbTechLayer.h`   |                                                                                    |\n| 2 | Define a keyword for db rev number                     | `dbDatabase.h`    | `#define ADS_DB_DF58 52`                                                           |\n| 3 | Set the current rev number same as                     | `dbDatabase.h`    | `#define ADS_DB_SCHEMA_MINOR 52`                                                   |\n| 4 | Stream in new fields Conditionally upon Schema number  | `dbTechLayer.cpp` | `if ( stream.getDatabase()->isSchema(ADS_DB_DF58) ) { stream >> layer._pitchDiag;` |\n| 5 | Stream out new fields Conditionally upon Schema number | `dbTechLayer.cpp` | `if ( stream.getDatabase()->isSchema(ADS_DB_DF58) ) { stream << layer._pitchDiag;` |\n| 6 | Conditionally Diff new fields                          | `dbTechLayer.cpp` | `if ( stream.getDatabase()->isSchema(ADS_DB_DF58) ) { DIFF_FIELD(_pitchDiag);`     |\n| 7 | Conditionally Diff Out new fields                      | `dbTechLayer.cpp` | `if ( stream.getDatabase()->isSchema(ADS_DB_DF58) ) { DIFF_OUT_FIELD(_pitchDiag);` |\n| 8 | Created access APIs to the fields                      | `dbTechLayer.cpp` | `\"dbTechLayer::getPitchDiag(), dbTechLayer::setPitchDiag( int pitch )\"`            |\n",
                "id": "add_new_fileds_0"
            }
        ]
    },
    {
        "source": "unit_test",
        "amount": 11,
        "knowledge": [
            {
                "summary": "",
                "content": "id:unit_test_0\n# Python Unit Tests\n\n",
                "id": "unit_test_0"
            },
            {
                "summary": "",
                "content": "id:unit_test_1\n# Python Unit Tests\n## Running tests\n\nFor running the python unit tests you will need to install first *testtools* and *unittest-parallel* which enables concurrent unit testing\n\n``` shell\npip3 install testtools\npip3 install unittest-parallel\n```\n\nThen, you can run the unit tests  in sequence by running\n\n``` shell\n../unitTests.sh\n```\n\nor in parallel by running\n\n``` shell\n../unitTests.sh parallel\n```\n\n**Note**: The test cases within each Unit Test run in parallel in both situations\n\n--------------------------------------------------------------------------\n\n",
                "id": "unit_test_1"
            },
            {
                "summary": "",
                "content": "id:unit_test_2\n# Python Unit Tests\n## <u>Tests Structure</u>\n\nThe directory unitTestsPython includes unit tests for OpenDB Python APIs. Any test file starts with 'Test' followed by the test target.\n\n",
                "id": "unit_test_2"
            },
            {
                "summary": "",
                "content": "id:unit_test_3\n# Python Unit Tests\n### odbUnitTest.py:\n\nThis includes `TestCase` class which inherits from `unittest.TestCase` with additional functionalities:\n\n* `changeAndTest(self,obj,SetterName,GetterName,expectedVal,*args)`which is a function for changing a value and testing for the effect of that change where:\n\n  * `obj` is the object to be tested\n  * `SetterName` is the name of the function to be called for changing a value\n  * `GetterName` is the name of the function to be called for testing the effect\n  * `expectedVal` is the expected value for the testing\n  * `*args` are the arguments passed to the `SetterName` function\n\n  So, in the end, the expected behavior is:\n\n``` python\nobj.SetterName(*args)\n\nassert(obj.GetterName()==expectedVal)\n```\n\n\n* `check(self,obj,GetterName,expectedVal,*args)` which tests against expected value\n\n* `change(self,obj,SetterName,*args)` which changes a value in the object\n\n* `main()` runs the `TestCase` in sequential order\n\n* `mainParallel(Test)` runs the passed `Test` class in parallel\n\n",
                "id": "unit_test_3"
            },
            {
                "summary": "",
                "content": "id:unit_test_4\n# Python Unit Tests\n### helper.py:\n\nA set of functions for creating simple db instances to be used for testing.  You can find the description of each function in the comments\n\n",
                "id": "unit_test_4"
            },
            {
                "summary": "",
                "content": "id:unit_test_5\n# Python Unit Tests\n### TestNet.py:\n\nUnit test class for testing dbNet. It inherits from `odbUnitTest.TestCase` . it consists of\n\n* `setUp(self)` function to be called before each test case. Here, we create the database with the desired chip, block, masters, instances and nets.\n* `tearDown(self)` function to be called after each test case. Here, we destroy our db.\n* `test_*(self)` the test cases functions. Their names should start with `test` for the unittest suite to recognize.\n\n",
                "id": "unit_test_5"
            },
            {
                "summary": "",
                "content": "id:unit_test_6\n# Python Unit Tests\n### TestDestroy.py:\n\nIntegration test class for testing the `destroy(*args)` function on OpenDB.\n\n* `test_destroy_net` destroying net and testing for the effect on the *block,inst, iterms and bterms*\n* `test_destroy_inst` destroying instance and testing for the effect on *block, iterms, net, bterms*\n* `test_destroy_bterm` destroying bterm and testing for the effect on *block and net*\n* `test_destroy_block` destroying block and testing for the effect on *block(parent and child relation), and chip*\n* `test_destroy_bpin` destroying bpin and testing for the effect on *bterm*\n* `test_create_destroy_wire` destroying wire and test for the effect on *net*\n* `test_destroy_capnode` destroying capnode and test for the effect on *net(node and connected ccsegs)*\n* `test_destroy_ccseg` destroying ccseg and test for the effect on *node,block and net*\n\n* `test_destroy_lib` destroying lib and test for the effect on *db*\n\n* `test_destroy_obstruction` destroying obstruction and test for the effect on *block*\n* `test_create_regions` creating regions and test for the effect on *block and region(parent and child relation)*\n* `test_destroy_region_child` destroying _ and test for the effect on *block and region(parent)*\n\n* `test_destroy_region_parent` destroying _ and test for the effect on *block*\n\n",
                "id": "unit_test_6"
            },
            {
                "summary": "",
                "content": "id:unit_test_7\n# Python Unit Tests\n### TestBlock.py:\n\nUnit Test for dbBlock\n\n* `test_find` testing the find function with *BTerm, Child, Inst, Net, ITerm, ExtCornerBlock, nonDefaultRule, Region*\n\n* Testing the ComputeBBox() function through the first call of getBBox:\n  * `test_bbox0` testing empty block box\n  * `test_bbox1` testing block box with Inst placed\n  * `test_bbox2` testing block box with Inst and BPin placed\n  * `test_bbox3` testing block box with Inst, BPin and Obstruction placed\n  * `test_bbox3` testing block box with Inst, BPin, Obstruction and SWire placed\n\n",
                "id": "unit_test_7"
            },
            {
                "summary": "",
                "content": "id:unit_test_8\n# Python Unit Tests\n### TestBTerm.py:\n\nUnit Test for dbBTerm\n\n* `test_idle` testing for idle disconnected  `BTerm` behavior\n* `test_connect` testing connect function of `BTerm` on `BTerm` and `Net`\n* `test_disconnect` testing disconnect function of `BTerm` on `BTerm` and `Net`\n\n",
                "id": "unit_test_8"
            },
            {
                "summary": "",
                "content": "id:unit_test_9\n# Python Unit Tests\n### TestInst.py:\n\nUnit Test for dbInst\n\n* `test_swap_master` testing swap master function\n\n",
                "id": "unit_test_9"
            },
            {
                "summary": "",
                "content": "id:unit_test_10\n# Python Unit Tests\n### TestITerm.py:\n\nUnit Test for dbITerm\n\n* `test_idle` testing for disconnected ITerm without a net\n* `test_connection_from_iterm` testing the connect(ITerm,...) and disconnect functions of ITerm and their effect on ITerm and Net\n* `test_connection_from_inst` testing the connect(Inst,...) and disconnect functions of ITerm and their effect on ITerm and Net\n* Testing for getAvgXY() function\n  * `test_avgxy_R0` testing with default orientation R0\n  * `test_avgxy_R90` testing with different orientation R90 for transformation\n\n--------------------------\n\n",
                "id": "unit_test_10"
            }
        ]
    },
    {
        "source": "database",
        "amount": 8,
        "knowledge": [
            {
                "summary": "",
                "content": "id:database_0\n# OpenDB\n\nOpenDB is a design database to support tools for physical chip design. It\nwas originally developed by Athena Design Systems. Nefelus, Inc. acquired\nthe rights to the code and open-sourced it with BSD-3 license in 2019 to support the DARPA\nOpenROAD project.\n\nThe structure of OpenDB is based on the text file formats LEF\n(library) and DEF (design) formats version 5.6.  OpenDB supports a\nbinary file format to save and load the design much faster than using\nLEF and DEF.\n\nOpenDB is written in C++ 98 with standard library style iterators.\nThe classes are designed to be fast enough to base an application on without\nhaving to copy them into application-specific structures.\n\n\n",
                "id": "database_0"
            },
            {
                "summary": "",
                "content": "id:database_1\n# OpenDB\n## Directory structure\n\n```\ninclude/odb/db.h - public header for all database classes\nsrc/db - private/internal database representations\nsrc/lefin - LEF reader\nsrc/lefout - LEF writer\nsrc/defin - DEF reader\nsrc/defout - DEF writer\n```\n\n",
                "id": "database_1"
            },
            {
                "summary": "",
                "content": "id:database_2\n# OpenDB\n## Database API\n\nWe are still working on documenting the APIs.  We have over 1,800 objects\nand functions that we are still documenting (for both TCL and Python).\n**Contributions are very welcome in this effort**. Find starting points below.\n\n",
                "id": "database_2"
            },
            {
                "summary": "",
                "content": "id:database_3\n# OpenDB\n### TCL\n\nAfter building successfully, run OpenDB Tcl shell using\n`../../build/src/odb/src/swig/tcl/odbtcl`. An example usage:\n\n```\nset db [dbDatabase_create]\nset lef_parser [new_lefin $db true]\nset tech [lefin_createTech $lef_parser ./src/odb/test/data/gscl45nm.lef]\n```\n\nYou can find examples on using the API from Tcl under `test/tcl/` directory.\n\nThe full set of the Tcl commands exposed can be found under\n`./build/src/swig/tcl/opendb_wrapper.cpp`. Search for `SWIG_prefix`.\n\n\n",
                "id": "database_3"
            },
            {
                "summary": "",
                "content": "id:database_4\n# OpenDB\n### Python\n\nAfter building successfully, run `openroad -python` to enable the Python\ninterpreter. You can find examples on using the API from Python under\n`test/python/` directory.\n\nTo list the full set of the Python classes exposed run `openroad -python`\nthen:\n```\nimport openroad\nimport odb\nprint(', '.join(dir(openroad)))\nprint(', '.join(dir(odb)))\n```\n\n",
                "id": "database_4"
            },
            {
                "summary": "",
                "content": "id:database_5\n# OpenDB\n### C++\n\nAll public database classes are defined in `db.h`. These class definitions\nprovide all functions for examining and modifying the database objects. The\ndatabase is an object itself, so multiple database objects can exist\nsimultaneously (no global state).\n\n`dbTypes.h` defines types returned by database class member functions.\n\nAll database objects are in the `odb` namespace.\n\n-   `dbChip`\n-   `dbBlock`\n-   `dbTech`\n-   `dbLib`\n\nAll database objects have a 32bit object identifier accessed with the\n`dbObject::getOID` base class member function that returns a `uint`. This\nidentifier is preserved across save/restores of the database so it should\nbe used to reference database object by data structures instead of pointers\nif the reference lifetime is across database save/restores. OIDs allow the\ndatabase to have exactly the same layout across save/restores.\n\nThe database distance units are **nanometers** and use the type `uint`.\n\n",
                "id": "database_5"
            },
            {
                "summary": "",
                "content": "id:database_6\n# OpenDB\n## Example scripts\n\n",
                "id": "database_6"
            },
            {
                "summary": "",
                "content": "id:database_7\n# OpenDB\n## Regression tests\n\nThere are a set of regression tests in /test.\n\n```\n./test/regression-tcl.sh\n./test/regression-py.sh\n```\n\n",
                "id": "database_7"
            }
        ]
    },
    {
        "source": "partition_manager",
        "amount": 16,
        "knowledge": [
            {
                "summary": "",
                "content": "id:partition_manager_0\n# Partition Manager\n\nThe partitioning module (`par`) is based on TritonPart, an open-source \nconstraints-driven partitioner. `par` can be used \nto partition a hypergraph or a gate-level netlist.\n\n",
                "id": "partition_manager_0"
            },
            {
                "summary": "",
                "content": "id:partition_manager_1\n# Partition Manager\n## Highlights\n- Start of the art multiple-constraints driven partitioning \u201cmulti-tool\u201d\n- Optimizes cost function based on user requirement\n- Permissive open-source license\n- Solves multi-way partitioning with following features:\n  - Multidimensional real-value weights on vertices and hyperedges\n  - Multilevel coarsening and refinement framework\n  - Fixed vertices constraint\n  - Timing-driven partitioning framework \n  - Group constraint: Groups of vertices need to be in same block\n  - Embedding-aware partitioning\n  \n",
                "id": "partition_manager_1"
            },
            {
                "summary": "",
                "content": "id:partition_manager_2\n# Partition Manager\n## Dependency\n\nWe use Google OR-Tools as our ILP solver. \n\nOur recommendation is to follow the OpenROAD [DependencyInstaller](../etc/DependencyInstaller.sh) for installation of this requirement.\n\nAlternatively, you may also install Google OR-Tools \nfollowing these [instructions](https://developers.google.com/optimization/install).\n\n```{warning}\nDue to a build issue, TritonPart is not supported for macOS. Stay tuned to this page for updates!\n```\n\n",
                "id": "partition_manager_2"
            },
            {
                "summary": "",
                "content": "id:partition_manager_3\n# Partition Manager\n## Main Algorithm\n\nAn overview of the TritonPart algorithm is shown below. It takes as inputs \n- Hypergraph $H(V,E)$ in `.hgr` format.\n- Vertex weight $w_v \\in \\mathcal{R}_+^m$\n- Hyperedge weight $w_e \\in \\mathcal{R}_+^n$\n- Number of blocks $K$.\n- Imbalance factor $\\epsilon$.\n- User-specified cost function $\\phi$.\n\nThere are five main steps in the main algorithm,\nmainly 1) constraints-driven coarsening,\n2) initial partitioning, 3) refinement, 4) cut-overlay clustering and\npartitioning (COCP), and 5) V-cycle refinement. The steps for the \ntiming-aware algorithm may be found in the next [section](#timing-aware-algorithm). \n\n1. Constraints-Driven Coarsening\n\nThe first step involves multilevel coarsening. Specifically, at each level,\nclusters of vertices are identified, and the merged and represented\nas a single vertex in the resulting coarser hypergraph. In this algorithm,\nthe First-Choice scheme is used, which traverses the vertices in the \nhypergraph according to a given ordering and merges pairs of vertices with\nhigh connectivity. The connectivity between a pair of vertices $(u,v)$\nis measured as follows:\n\n$$r(u, v) = \\sum_{e\\in \\{I(v)\\cap I(u)\\}} \\frac{\\langle \\alpha, w_e\\rangle}{|e|-1}$$\n\nTo efficiently manage multiple constraints, the following enhancements are \nmade to the coarsening scheme above:\n\n- **Fixed Vertex Constraint**: Fixed vertices that belong to the same partitioning block are merged into a single vertex. \n- **Grouping Constraint**: Vertices that belong to the same group are merged into a single vertex.\n- **Embedding Constraint**: The embedding information is incorporated into the heavy-edge rating function. The new connectivity is updated as follows:\n\n$$\\hat{r}(u, v) = r(u, v) + \\rho\\frac{1}{||X_u - X_v||_2}$$\n\nwhere $\\rho$ is a normalization factor set to the average distance between two\nvertex embeddings. When vertices $v_1, ... , v_t$ are merged into a single\nvertex $v_{coarse}$, the corresponding vertex embedding $X_{v_{coarse}}$\nis defined as the *center of gravity* of $t$ vertices:\n\n$$X_{v_{coarse}} = \\sum_{j=1}^{t} \\frac{||w_{v_j}||}{M} X_{v_j},\\ where\\ M= \\sum_{j=1}^t ||w_{v_j}|| $$\n\n- **Community Guidance**: Only vertices within the same community are\n  considered for merging.\n- **Tie-breaking mechanism**: If multiple neighbor pairs have the same rating\n  score, combine the lexicographically first unmatched vertex to break ties.\n\n2. Initial Partitioning\n\nAfter completing the coarsening process, an initial partitioning solution for\nthe coarsest hypergraph $H_c$ is derived. Two sub-steps are involved in this:\nthe best partitioning solution from random and VILE partitioning is chosen\nfrom $\\eta = 50$ runs as a warm-start to the ILP-based partitioner. The\noptimization is based on only the cut size rather than the cost function\n$\\phi$ to keep the runtime reasonable.\n\n3. Refinement\n\nAfter a feasible solution $H_{c_\\xi}$ is obtained by initial partitioning,\nuncoarsening and move-based refinement is performed to improve the\npartitioning solution. Three refinement heuristics are applied in sequence:\n- **$K$-way pairwise FM (PM)**: This addresses multi-way partitioning\n  as concurrent bi-partitioning problems in a restricted version of K-way\n  Fiduccia\u2013Mattheyses (FM) algorithm. First, $\\lfloor K/2\\rfloor $ pairs of\n  blocks are obtained, with refinement-specific vertex movements restricted\n  to associated paired blocks. Next, two-way FM is concurrently performed on\n  all the block pairs. finally, a new configuration of block pairs is computed\n  at the end of the PM.\n- **Direct $K$-way FM**: Using $K$ priority queues, for each block $V_i$,\n  establish a priority queue that stores the vertices that can be potentially\n  moved from the current block to block $V_i$. This queue is ordered according\n  to the gain of the vertices. Gain is defined as the reduction in cost\n  function from the movement of the vertex from the current block to $V_i$.\n  Next, after a vertex move, each priority queue is updated independently, thus\n  enabling parallel updates via multi-threading. Next, early-stop is implemented\n  by limiting the maximum number of vertices moved to 100 per pass. Finally,\n  the *corking effect* is mitigated by traversing the priority queue belonging\n  to the vertex with the highest gain and identifying a feasible vertex move.\n- **Greedy Hyperedge Refinement (HER)**: First, randomly visit all\n  hyperedges. For each hyperedge $e$ that crosses the partition boundary,\n  determine whether a subset of vertices in $e$ can be moved without violating\n  the multi-dimensional balance constraints. The objective is to make $e$\n  entirely constrained in a block.\n\n4. Cut-Overlay Clustering and Partitioning (COCP)\n\nCut-overlay Clustering and Partitioning (COCP) is a mechanism to\ncombine multiple good-quality partitioning solutions to generate an\nimproved solution. To begin, the sets of hyperedges cut in the $\\theta$\ncandidate solutions are denoted as $E_1,..., E_\\theta \\subset E$.  First,\n$\\cup_{i=1}^\\theta E_i$ is removed from the hypergraph $H(V, E)$, resulting in\na number of connected components. Next, all vertices within each connected\ncomponent are merged to form a coarser hypergraph $H_{overlay}$. If the\nnumber of vertices in $H_{overlay}$ is less than $thr_{ilp}$, ILP-based\npartitioning is performed. If not, a single round of constraints-driven\ncoarsening is conducted to further reduce the size of $H_{overlay}$\nand generate a coarser hypergraph $H_{overlay}^{'}$. Finally, multilevel\nrefinement is performed to further improve the partitioning solution at\neach level of the hierarchy and return the improved solution $S^{'}$.\n\n5. V-Cycle Refinement\n\nCut-overlay clustering and partitioning produces a high-quality partitioning\nsolution $S^{'}$. To improve it, there are three phases similar to *hMETIS*,\nnamely multilevel coarsening, ILP-based partitioning, and refinement.\nFirstly, in multilevel partitioning, $S^{'}$ is used as a community guidance\nfor the constraints-driven coarsening. Only vertices within the same block\nare permitted to be merged to ensure that the current solution $S^{'}$\nis preserved in the coarsest hypergraph $H_{c_\\xi}$. In the ILP-based\npartitioning phase, if the number of vertices in $H_{c_\\xi}$ does not exceed\n$thr_{ilp}$, run ILP-based partitioning to improve $S^{'}$. Otherwise,\ncontinue with $S^{'}$ in successive iterations of these two steps (default\nset to 2). The refinement phase is conducted as per step 3.\n\n![](./doc/algo.webp)<center>TritonPart algorithm at a glance</center>\n\n",
                "id": "partition_manager_3"
            },
            {
                "summary": "",
                "content": "id:partition_manager_4\n# Partition Manager\n## Timing Aware Algorithm\n\n`par` can also be used as a timing-aware partitioning framework. A slack\npropagation methodology is used that optimizes cuts for both timing-critical\nand timing-noncritical paths.\n\n1. Extraction of Timing Paths and Slack Information\n\nFirst, the top $P$ timing-critical paths and the slack information of each\nhyperedge using the wireload model (WLM) is obtained from *OpenSTA*. The\ntiming cost of each path is then calculated:\n\n$$t_p = (1- \\frac{slack_p - \\Delta}{clock\\_period})^\\mu$$\n\nwhere a fixed extra delay $\\Delta$ is introduced for timing guardband,\nand $\\mu$ (default 2) is the exponent.\n\nThe snaking factor of a path $SF(p)$ is defined as the maximum number\nof block reentries along the path $p$. The timing cost of a hyperedge is\ncomputed using the timing weight corresponding to hyperedge slack $slack_e$\nand the accumulated timing cost of all paths traversing the hyperedge.\n\n$$t_e = (1- \\frac{slack_e -\\Delta}{clock\\_period})^\\mu + \\sum_{\\{p|e\\in p\\}}t_p$$\n\n2. Timing-aware Coarsening\n\nThe timing-aware feature is achieved by adding a timing cost of hyperedge\n$t_e$ to the connectivity score earlier mentioned. If vertices $(u,v)$\nare associated with multiple critical paths, then they are more likely to\nbe merged. This is reflected in the update score function:\n\n$$r_t(u,v) = \\hat{r}(u,v) + \\sum_{e\\in\\{I(v) \\cap I(u)\\}} \\frac{\\beta t_e}{|e| - 1}$$\n\n3. Timing-aware Refinement\n\nTiming-aware refinement is based on a similar cost function as the main\nalgorithm. Instead, an additional slack propagation step is performed at\nthe end of each PM/FM/HER pass.\n\n",
                "id": "partition_manager_4"
            },
            {
                "summary": "",
                "content": "id:partition_manager_5\n### Partition Netlist\n\n```tcl\ntriton_part_hypergraph\n    -hypergraph_file hypergraph_file  \n    -num_parts num_parts  \n    -balance_constraint balance_constraint \n    [-base_balance base_balance]\n    [-seed seed] \n    [-vertex_dimension vertex_dimension] \n    [-hyperedge_dimension hyperedge_dimension] \n    [-placement_dimension placement_dimension] \n    [-fixed_file fixed_file] \n    [-community_file community_file] \n    [-group_file group_file] \n    [-placement_file placement_file] \n    [-e_wt_factors e_wt_factors] \n    [-v_wt_factors <v_wt_factors>] \n    [-placement_wt_factors <placement_wt_factors>]\n    [-thr_coarsen_hyperedge_size_skip thr_coarsen_hyperedge_size_skip] \n    [-thr_coarsen_vertices thr_coarsen_vertices] \n    [-thr_coarsen_hyperedges thr_coarsen_hyperedges] \n    [-coarsening_ratio coarsening_ratio] \n    [-max_coarsen_iters max_coarsen_iters] \n    [-adj_diff_ratio adj_diff_ratio] \n    [-min_num_vertices_each_part min_num_vertices_each_part] \n    [-num_initial_solutions num_initial_solutions] \n    [-num_best_initial_solutions num_best_initial_solutions] \n    [-refiner_iters refiner_iters] \n    [-max_moves max_moves] \n    [-early_stop_ratio early_stop_ratio] \n    [-total_corking_passes total_corking_passes] \n    [-v_cycle_flag v_cycle_flag ] \n    [-max_num_vcycle max_num_vcycle] \n    [-num_coarsen_solutions num_coarsen_solutions] \n    [-num_vertices_threshold_ilp num_vertices_threshold_ilp] \n    [-global_net_threshold global_net_threshold] \n```\n\n#### Options\n\n| Switch Name | Description | \n| ----- | ----- |\n| `-num_parts` | Number of partitions. The default value is `2`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-balance_constraint` | Allowed imbalance between blocks. The default value is `1.0`, and the allowed values are floats. |\n| `-base_balance` | Tcl list of baseline imbalance between partitions. The default value is `{1.0}`, and the allowed values are floats that sum up to `1.0`. |\n| `-seed` | Random seed. The default value is `0`, and the allowed values are integers `[-MAX_INT, MAX_INT]`. |\n| `-vertex_dimension` | Number of vertices in the hypergraph. The default value is `1`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-hyperedge_dimension` | Number of hyperedges in hypergraph. The default value is `1`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-placement_dimension` | Number of dimensions for canvas if placement information is provided. The default value is `0`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-hypergraph_file` | Path to hypergraph file. |\n| `-fixed_file` | Path to fixed vertices constraint file. |\n| `-community_file` | Path to `community` attributes file to guide the partitioning process. |\n| `-group_file` | Path to `stay together` attributes file. |\n| `-placement_file` | Placement information file, each line corresponds to a group fixed vertices, community, and placement attributes following the [hMETIS](https://course.ece.cmu.edu/~ee760/760docs/hMetisManual.pdf) format. |\n| `-e_wt_factors` | Hyperedge weight factor. |\n| `-v_wt_factors` | Vertex weight factors. |\n| `-placement_wt_factors` | Placement weight factors. |\n| `-thr_coarsen_hyperedge_size_skip` | Threshold for ignoring large hyperedge (default 200, integer). |\n| `-thr_coarsen_vertices` | Number of vertices of coarsest hypergraph (default 10, integer). |\n| `-thr_coarsen_hyperedges` | Number of vertices of coarsest hypergraph (default 50, integer). |\n| `-coarsening_ratio` | Coarsening ratio of two adjacent hypergraphs (default 1.6, float). |\n| `-max_coarsen_iters` | Number of iterations (default 30, integer). |\n| `-adj_diff_ratio` | Minimum difference of two adjacent hypergraphs (default 0.0001, float). |\n| `-min_num_vertices_each_part` | Minimum number of vertices in each partition (default 4, integer). |\n| `-num_initial_solutions` | Number of initial solutions (default 50, integer). |\n| `-num_best_initial_solutions` | Number of top initial solutions to filter out (default 10, integer). |\n| `-refiner_iters` | Refinement iterations (default 10, integer). |\n| `-max_moves` | The allowed moves for each Fiduccia-Mattheyes (FM) algorithm pass or greedy refinement (default 60, integer). |\n| `-early_stop_ratio` | Describes the ratio $e$ where if the $n_{moved vertices} > n_{vertices} * e$, the tool exits the current FM pass. The intention behind this is that most of the gains are achieved by the first few FM moves. (default 0.5, float). |\n| `-total_corking_passes` | Maximum level of traversing the buckets to solve the \"corking effect\" (default 25, integer). |\n| `-v_cycle_flag` | Disables v-cycle is used to refine partitions (default true, bool). |\n| `-max_num_vcycle` | Maximum number of `vcycles` (default 1, integer). |\n| `-num_coarsen_solutions` | Number of coarsening solutions with different randoms seed (default 3, integer). |\n| `-num_vertices_threshold_ilp` | Describes threshold $t$, the number of vertices used for integer linear programming (ILP) partitioning. if $n_{vertices} > t$, do not use ILP-based partitioning.(default 50, integer). |\n| `-global_net_threshold` | If the net is larger than this, it will be ignored by TritonPart (default 1000, integer). |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "partition_manager_5"
            },
            {
                "summary": "",
                "content": "id:partition_manager_6\n### Evaluate Hypergraph Partition\n\n```tcl\nevaluate_hypergraph_solution\n  -num_parts num_parts\n  -balance_constraint balance_constraint\n  -hypergraph_file hypergraph_file\n  -solution_file solution_file\n  [-base_balance base_balance]\n  [-vertex_dimension vertex_dimension]\n  [-hyperedge_dimension hyperedge_dimension]\n  [-fixed_file fixed_file]\n  [-group_file group_file]\n  [-e_wt_factors e_wt_factors]\n  [-v_wt_factors v_wt_factors] \n```\n\n#### Options\n\n| Switch Name | Description | \n| ----- | ----- |\n| `-num_parts` | Number of partitions. The default value is `2`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-balance_constraint` | Allowed imbalance between blocks. The default value is `1.0`, and the allowed values are floats. |\n| `-vertex_dimension` | Number of vertices in the hypergraph. The default value is `1`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-hyperedge_dimension` | Number of hyperedges in hypergraph. The default value is `1`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-hypergraph_file` | Path to hypergraph file. |\n| `-solution_file` | Path to solution file. |\n| `-base_balance` | Tcl list of baseline imbalance between partitions. The default value is `{1.0}`, and the allowed values are floats that sum up to `1.0`. |\n| `-fixed_file` | Path to fixed vertices constraint file. |\n| `-group_file` | Path to `stay together` attributes file. |\n| `-e_wt_factors` | Hyperedge weight factor. |\n| `-v_wt_factors` | Vertex weight factor. |\n\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "partition_manager_6"
            },
            {
                "summary": "",
                "content": "id:partition_manager_7\n### Partition Netlist \n\n```tcl\ntriton_part_design\n    [-num_parts num_parts]\n    [-balance_constraint balance_constraint]\n    [-base_balance base_balance]\n    [-seed seed]\n    [-timing_aware_flag timing_aware_flag]\n    [-top_n top_n]\n    [-placement_flag placement_flag]\n    [-fence_flag fence_flag]\n    [-fence_lx fence_lx]\n    [-fence_ly fence_ly]\n    [-fence_ux fence_ux]\n    [-fence_uy fence_uy]\n    [-fixed_file fixed_file]\n    [-community_file community_file]\n    [-group_file group_file]\n    [-solution_file solution_file]\n    [-net_timing_factor net_timing_factor]\n    [-path_timing_factor path_timing_factor]\n    [-path_snaking_factor path_snaking_factor]\n    [-timing_exp_factor timing_exp_factor]\n    [-extra_delay extra_delay]\n    [-guardband_flag guardband_flag]\n    [-e_wt_factors e_wt_factors]\n    [-v_wt_factors v_wt_factors]\n    [-placement_wt_factors placement_wt_factors]\n    [-thr_coarsen_hyperedge_size_skip thr_coarsen_hyperedge_size_skip]\n    [-thr_coarsen_vertices thr_coarsen_vertices]\n    [-thr_coarsen_hyperedges thr_coarsen_hyperedges]\n    [-coarsening_ratio coarsening_ratio]\n    [-max_coarsen_iters max_coarsen_iters]\n    [-adj_diff_ratio adj_diff_ratio]\n    [-min_num_vertices_each_part min_num_vertices_each_part]\n    [-num_initial_solutions num_initial_solutions]\n    [-num_best_initial_solutions num_best_initial_solutions]\n    [-refiner_iters refiner_iters]\n    [-max_moves max_moves]\n    [-early_stop_ratio early_stop_ratio]\n    [-total_corking_passes total_corking_passes]\n    [-v_cycle_flag v_cycle_flag ]\n    [-max_num_vcycle max_num_vcycle]\n    [-num_coarsen_solutions num_coarsen_solutions]\n    [-num_vertices_threshold_ilp num_vertices_threshold_ilp]\n    [-global_net_threshold global_net_threshold]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-num_parts` | Number of partitions. The default value is `2`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-balance_constraint` | Allowed imbalance between blocks. The default value is `1.0`, and the allowed values are floats. |\n| `-base_balance` | Tcl list of baseline imbalance between partitions. The default value is `{1.0}`, and the allowed values are floats that sum up to `1.0`. |\n| `-seed` | Random seed. The default value is `1`, and the allowed values are integers `[-MAX_INT, MAX_INT]`. |\n| `-timing_aware_flag` | Enable timing-driven mode. The default value is `true`, and the allowed values are booleans. |\n| `-top_n` | Extract the top n critical timing paths. The default value is `1000`, and the allowed values are integers `[0, MAX_INT`. |\n| `-placement_flag` | Enable placement driven partitioning. The default value is `false`, and the allowed values are booleans. |\n| `-fence_flag ` | Consider fences in the partitioning. The default value is `false`, and the allowed values are booleans. |\n| `-fence_lx ` | Fence lower left x in microns. The default value is `0.0`, and the allowed values are floats. |\n| `-fence_ly ` | Fence lower left y in microns. The default value is `0.0`, and the allowed values are floats. |\n| `-fence_ux ` | Fence upper right x in microns. The default value is `0.0`, and the allowed values are floats. |\n| `-fence_uy ` | Fence upper right y in microns. The default value is `0.0`, and the allowed values are floats. |\n| `-fixed_file` | Path to fixed vertices constraint file |\n| `-community_file` | Path to `community` attributes file to guide the partitioning process. |\n| `-group_file` | Path to `stay together` attributes file. |\n| `-solution_file` | Path to solution file. |\n| `-net_timing_factor` | Hyperedge timing weight factor (default 1.0, float). |\n| `-path_timing_factor` | Cutting critical timing path weight factor (default 1.0, float). |\n| `-path_snaking_factor` | Snaking a critical path weight factor (default 1.0, float). |\n| `-timing_exp_factor` | Timing exponential factor for normalized slack (default 1.0, float). |\n| `-extra_delay` | Extra delay introduced by a cut (default 1e-9, float). |\n| `-guardband_flag` | Enable timing guardband option (default false, bool). |\n| `-e_wt_factors` | Hyperedge weight factor. |\n| `-v_wt_factors` | Vertex weight factor. |\n| `-placement_wt_factors` | Placement weight factor. |\n| `-thr_coarsen_hyperedge_size_skip` | Threshold for ignoring large hyperedge. The default value is `1000`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-thr_coarsen_vertices` | Number of vertices of coarsest hypergraph. The default value is `10`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-thr_coarsen_hyperedges` | Number of vertices of the coarsest hypergraph. The default value is `50`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-coarsening_ratio` | Coarsening ratio of two adjacent hypergraphs. The default value is `1.5`, and the allowed values are floats. |\n| `-max_coarsen_iters` | Number of iterations. The default value is `30`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-adj_diff_ratio` | Minimum ratio difference of two adjacent hypergraphs. The default value is `0.0001`, and the allowed values are floats. |\n| `-min_num_vertices_each_part` | Minimum number of vertices in each partition. The default value is `4`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-num_initial_solutions` | Number of initial solutions. The default value is `100`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-num_best_initial_solutions` | Number of top initial solutions to filter out. The default value is `10`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-refiner_iters` | Refinement iterations. The default value is `10`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-max_moves` | The allowed moves for each Fiduccia-Mattheyes (FM) algorithm pass or greedy refinement. The default value is `100`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-early_stop_ratio` | Describes the ratio $e$ where if the $n_{moved vertices} > n_{vertices} * e$, the tool exists the current FM pass. The intention behind this is that most of the gains are achieved by the first few FM moves. The default value is `0.5`, and the allowed values are floats. |\n| `-total_corking_passes` | Maximum level of traversing the buckets to solve the \"corking effect\". The default value is `25`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-v_cycle_flag` | Disables v-cycle is used to refine partitions. The default value is `true`, and the allowed values are booleans. |\n| `-max_num_vcycle` | Maximum number of vcycles. The default value is `1`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-num_coarsen_solutions` | Number of coarsening solutions with different randoms seed. The default value is `4`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-num_vertices_threshold_ilp` | Describes threshold $t$, the number of vertices used for integer linear programming (ILP) partitioning. if $n_{vertices} > t$, do not use ILP-based partitioning. The default value is `50`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-global_net_threshold` | If the net is larger than this, it will be ignored by TritonPart. The default value is `1000`, and the allowed values are integers `[0, MAX_INT]`. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "partition_manager_7"
            },
            {
                "summary": "",
                "content": "id:partition_manager_8\n### Evaluation Netlist Partition\n\n```tcl\nevaluate_part_design_solution\n    [-num_parts num_parts]\n    [-balance_constraint balance_constraint]\n    [-base_balance base_balance]\n    [-timing_aware_flag timing_aware_flag]\n    [-top_n top_n]\n    [-fence_flag fence_flag]\n    [-fence_lx fence_lx]\n    [-fence_ly fence_ly]\n    [-fence_ux fence_ux]\n    [-fence_uy fence_uy]\n    [-fixed_file fixed_file]\n    [-community_file community_file]\n    [-group_file group_file]\n    [-hypergraph_file hypergraph_file]\n    [-hypergraph_int_weight_file hypergraph_int_weight_file]\n    [-solution_file solution_file]\n    [-net_timing_factor net_timing_factor]\n    [-path_timing_factor path_timing_factor]\n    [-path_snaking_factor path_snaking_factor]\n    [-timing_exp_factor timing_exp_factor]\n    [-extra_delay extra_delay]\n    [-guardband_flag guardband_flag]\n    [-e_wt_factors e_wt_factors]\n    [-v_wt_factors v_wt_factors]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-num_parts` | Number of partitions. The default value is `2`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-balance_constraint` | Allowed imbalance between blocks. The default value is `1.0`, and the allowed values are floats. |\n| `-base_balance` | Tcl list of baseline imbalance between partitions. The default value is `{1.0}`, and the allowed values are floats that sum up to `1.0`. |\n| `-timing_aware_flag` | Enable timing-driven mode. The default value is `true`, and the allowed values are booleans. |\n| `-top_n` | Extract the top n critical timing paths. The default value is `1000`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-fence_flag ` | Consider fences in the partitioning. The default value is `false`, and the allowed values are booleans. |\n| `-fence_lx ` | Fence lower left x in microns. The default value is `0.0`, and the allowed values are floats. |\n| `-fence_ly ` | Fence lower left y in microns. The default value is `0.0`, and the allowed values are floats. |\n| `-fence_ux ` | Fence upper right x in microns. The default value is `0.0`, and the allowed values are floats. |\n| `-fence_uy ` | Fence upper right y in microns. The default value is `0.0`, and the allowed values are floats. | \n| `-fixed_file` | Path to fixed vertices constraint file. |\n| `-community_file` | Path to `community` attributes file to guide the partitioning process. |\n| `-group_file` | Path to `stay together` attributes file. |\n| `-hypergraph_file` | Path to hypergraph file. |\n| `-hypergraph_int_weight_file` | Path to `hMETIS` format integer weight file. |\n| `-solution_file` | Path to solution file. |\n| `-net_timing_factor` | Hyperedge timing weight factor. The default value is `1.0`, and the allowed values are floats. |\n| `-path_timing_factor` | Cutting critical timing path weight factor. The default value is `1.0`, and the allowed values are floats. |\n| `-path_snaking_factor` | Snaking a critical path weight factor. The default value is `1.0`, and the allowed values are floats. |\n| `-timing_exp_factor` | Timing exponential factor for normalized slack. The default value is `1.0`, and the allowed values are floats. |\n| `-extra_delay` | Extra delay introduced by a cut. The default value is `1e-9`, and the allowed values are floats. |\n| `-guardband_flag` | Enable timing guardband option. The default value is 1`false`, and the allowed values are booleans. |\n| `-e_wt_factors` | Hyperedge weight factors. |\n| `-v_wt_factors` | Vertex weight factors. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "partition_manager_8"
            },
            {
                "summary": "",
                "content": "id:partition_manager_9\n### Write Partition to Verilog\n\n```tcl\nwrite_partition_verilog\n    [-port_prefix prefix]\n    [-module_suffix suffix]\n    [file]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-port_prefix` | Port name prefix. |\n| `-module_suffix` | Module name suffix. |\n| `file` | Filename to write partition verilog to. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "partition_manager_9"
            },
            {
                "summary": "",
                "content": "id:partition_manager_10\n### Read the Partition file\n\n```tcl\nread_partitioning\n    -read_file name\n    [-instance_map_file file_path]\n\n\n## Example Scripts\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "partition_manager_10"
            },
            {
                "summary": "",
                "content": "id:partition_manager_11\n## Example Scripts\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "partition_manager_11"
            },
            {
                "summary": "",
                "content": "id:partition_manager_12\n### How to partition a hypergraph in the way you would using hMETIS (min-cut partitioning)\n\n```tcl\ntriton_part_hypergraph -hypergraph_file des90.hgr -num_parts 5 -balance_constraint 2 -seed 2\n```\nYou can also check the provided example [here](./examples/min-cut-partitioning/run_openroad.tcl).\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "partition_manager_12"
            },
            {
                "summary": "",
                "content": "id:partition_manager_13\n### How to perform the embedding-aware partitioning\n\n```tcl\nset num_parts 2\nset balance_constraint 2\nset seed 0\nset design sparcT1_chip2\nset hypergraph_file \"${design}.hgr\"\nset placement_file \"${design}.hgr.ubfactor.2.numparts.2.embedding.dat\"\nset solution_file \"${design}.hgr.part.${num_parts}\"\n\ntriton_part_hypergraph  -hypergraph_file $hypergraph_file -num_parts $num_parts \\\n                        -balance_constraint $balance_constraint \\\n                        -seed $seed  \\\n                        -placement_file ${placement_file} -placement_wt_factors { 0.00005 0.00005 } \\\n                        -placement_dimension 2\n\n```\n\nYou can find the provided example [here](./examples/embedding-aware-partitioning/run_placement_aware_flow.tcl).\n\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "partition_manager_13"
            },
            {
                "summary": "",
                "content": "id:partition_manager_14\n### How to partition a netlist\n\n```tcl\n# set technology information\nset ALL_LEFS \u201clist_of_lefs\u201d\nset ALL_LIBS \u201clist_of_libs\u201d\n# set design information\nset design \u201cdesign_name\u201d\nset top_design \u201ctop_design\u201d\nset netlist \u201cnetlist.v\u201d\nset sdc \u201ctiming.sdc\u201d\nforeach lef_file ${ALL_LEFS} {\n  read_lef $lef_file\n}\nforeach lib_file ${ALL_LIBS} {\n  read_lib $lib_file\n}\nread_verilog $netlist\nlink_design $top_design\nread_sdc $sdc\n\nset num_parts 5\nset balance_constraint 2\nset seed 0\nset top_n 100000\n# set the extra_delay_cut to 20% of the clock period\n# the extra_delay_cut is introduced for each cut hyperedge\nset extra_delay_cut 9.2e-10  \nset timing_aware_flag true\nset timing_guardband true\nset part_design_solution_file \"${design}_part_design.hgr.part.${num_parts}\"\n\n##############################################################################################\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "partition_manager_14"
            },
            {
                "summary": "",
                "content": "id:partition_manager_15\n# Partition Manager\n##############################################################################################\nputs \"Start TritonPart with slack propagation\"\n# call triton_part to partition the netlist\ntriton_part_design -num_parts $num_parts -balance_constraint $balance_constraint \\\n                   -seed $seed -top_n $top_n \\\n                   -timing_aware_flag $timing_aware_flag -extra_delay $extra_delay_cut \\\n                   -guardband_flag $timing_guardband \\\n                   -solution_file $part_design_solution_file \n```\n\nYou can find the provided example [here](./examples/timing-aware-partitioning/run_timing_aware_flow.tcl).\n\n\n\n",
                "id": "partition_manager_15"
            }
        ]
    },
    {
        "source": "global_routing",
        "amount": 19,
        "knowledge": [
            {
                "summary": "",
                "content": "id:global_routing_0\n# Global Routing\n\nThe global routing module in OpenROAD (`grt`) is based on FastRoute, an\nopen-source global router originally derived from Iowa State University's\nFastRoute4.1 algorithm.\n\n",
                "id": "global_routing_0"
            },
            {
                "summary": "",
                "content": "id:global_routing_1\n### Global Route\n\n```tcl\nglobal_route \n    [-guide_file out_file]\n    [-congestion_iterations iterations]\n    [-congestion_report_file file_name]\n    [-congestion_report_iter_step steps]\n    [-grid_origin {x y}]\n    [-critical_nets_percentage percent]\n    [-allow_congestion]\n    [-verbose]\n    [-start_incremental]\n    [-end_incremental]\n```\n\n#### Options\n\n| Switch Name | Description | \n| ----- | ----- |\n| `-guide_file` | Set the output guides file name (e.g., `route.guide`). |\n| `-congestion_iterations` | Set the number of iterations made to remove the overflow of the routing. The default value is `50`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-congestion_report_file` | Set the file name to save the congestion report. The file generated can be read by the DRC viewer in the GUI (e.g., `report_file.rpt`). |\n| `-congestion_report_iter_step` | Set the number of iterations to report. The default value is `0`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-grid_origin` | Set the (x, y) origin of the routing grid in DBU. For example, `-grid_origin {1 1}` corresponds to the die (0, 0) + 1 DBU in each x--, y- direction. |\n| `-critical_nets_percentage` | Set the percentage of nets with the worst slack value that are considered timing critical, having preference over other nets during congestion iterations (e.g. `-critical_nets_percentage 30`). The default value is `0`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-allow_congestion` | Allow global routing results to be generated with remaining congestion. The default is false. |\n| `-verbose` | This flag enables the full reporting of the global routing. |\n| `-start_incremental` | This flag initializes the GRT listener to get the net modified. The default is false. |\n| `-end_incremental` | This flag run incremental GRT with the nets modified. The default is false. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_1"
            },
            {
                "summary": "",
                "content": "id:global_routing_2\n### Set Routing Layers\n\n```tcl\nset_routing_layers \n    [-signal min-max]\n    [-clock min-max]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-signal` | Set the min and max routing signal layer (names) in this format \"%s-%s\". |\n| `-clock` | Set the min and max routing clock layer (names) in this format \"%s-%s\". |\n\nExample: `set_routing_layers -signal Metal2-Metal10 -clock Metal6-Metal9`\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_2"
            },
            {
                "summary": "",
                "content": "id:global_routing_3\n### Set Macro Extension\n\n```tcl\nset_macro_extension extension\n```\n\n#### Options\n\n| Argument Name | Description | \n| ----- | ----- |\n| `extension` | Number of `GCells` added to the blockage boundaries from macros. A `GCell` is typically defined in terms of `Mx` routing tracks.  The default `GCell` size is 15 `M3` pitches. | \n\nExample: `set_macro_extension 2`\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_3"
            },
            {
                "summary": "",
                "content": "id:global_routing_4\n### Set Pin Offset\n\n```tcl\nset_pin_offset offset \n```\n\n#### Options\n\n| Argument Name | Description | \n| ----- | ----- |\n| `offset` | Pin offset in microns (must be a positive integer). | \n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_4"
            },
            {
                "summary": "",
                "content": "id:global_routing_5\n### Set Global Routing Layer Adjustment\n\nThe `set_global_routing_layer_adjustment` command sets routing resource\nadjustments in the routing layers of the design.  Such adjustments reduce the number of\nrouting tracks that the global router assumes to exist. This promotes the spreading of routing\nand reduces peak congestion, to reduce challenges for detailed routing.\n\n```tcl\nset_global_routing_layer_adjustment layer adjustment\n```\n\n#### Options\n\n| Argument Name | Description | \n| ----- | ----- |\n| `layer` | Integer for the layer number (e.g. for M1 you would use 1). |\n| `adjustment` | Float indicating the percentage reduction of each edge in the specified layer. |\n\nYou can set adjustment for a\nspecific layer, e.g., `set_global_routing_layer_adjustment Metal4 0.5` reduces\nthe routing resources of routing layer `Metal4` by 50%.  You can also set adjustment\nfor all layers at once using `*`, e.g., `set_global_routing_layer_adjustment * 0.3` reduces the routing resources of all routing layers by 30%.  And, you can\nalso set resource adjustment for a layer range, e.g.: `set_global_routing_layer_adjustment\nMetal4-Metal8 0.3` reduces the routing resources of routing layers  `Metal4`,\n`Metal5`, `Metal6`, `Metal7` and `Metal8` by 30%.\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_5"
            },
            {
                "summary": "",
                "content": "id:global_routing_6\n### Set Routing Alpha\n\nBy default the global router uses heuristic rectilinear Steiner minimum\ntrees (RSMTs) as an initial basis to construct route guides. An RSMT\ntries to minimize the total wirelength needed to connect a given set\nof pins.  The Prim-Dijkstra heuristic is an alternative net topology\nalgorithm that supports a trade-off between total wirelength and maximum\npath depth from the net driver to its loads. The `set_routing_alpha`\ncommand enables the Prim/Dijkstra algorithm and sets the alpha parameter\nused to trade-off wirelength and path depth.  Alpha is between 0.0\nand 1.0. When alpha is 0.0 the net topology minimizes total wirelength\n(i.e. capacitance).  When alpha is 1.0 it minimizes longest path between\nthe driver and loads (i.e., maximum resistance).  Typical values are\n0.4-0.8. You can call it multiple times for different nets.\n\n```tcl\nset_routing_alpha \n    [-net net_name] \n    [-min_fanout fanout]\n    [-min_hpwl hpwl]\n    [-clock_nets]\n    alpha\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-net` | Net name. | \n| `-min_fanout` | Set the minimum number for fanout. | \n| `-min_hpwl` | Set the minimum half-perimetere wirelength (microns). | \n| `-clock_nets` | Flag to set routing alpha for clock nets. The default value is `False`, and the allowed values are bools. |\n| `alpha` | Set the trade-off value between wirelength and path depth. The allowed values are floats `[0, 1]`. |\n\nExample: `set_routing_alpha -net clk 0.3` sets the alpha value of 0.3 for net *clk*.\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_6"
            },
            {
                "summary": "",
                "content": "id:global_routing_7\n### Set Global Routing Region Adjustment\n\n```tcl\nset_global_routing_region_adjustment\n    {lower_left_x lower_left_y upper_right_x upper_right_y}\n    -layer layer \n    -adjustment adjustment\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `lower_left_x`, `lower_left_y`, `upper_right_x` , `upper_right_y` | Bounding box to consider. |\n| `-layer` | Integer for the layer number (e.g. for M1 you would use 1). |\n| `-adjustment` | Float indicating the percentage reduction of each edge in the specified layer. |\n\nExample: `set_global_routing_region_adjustment {1.5 2 20 30.5} -layer Metal4 -adjustment 0.7`\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_7"
            },
            {
                "summary": "",
                "content": "id:global_routing_8\n### Set Global Routing Randomness\n\nThe randomized global routing shuffles the\norder of the nets and randomly subtracts or adds to the capacities of\na random set of edges. \n\n```tcl\nset_global_routing_random \n    [-seed seed]\n    [-capacities_perturbation_percentage percent]\n    [-perturbation_amount value]\n```\n\n#### Options\n\n| Switch Name | Description | \n| ----- | ----- |\n| `-seed` | Sets the random seed (must be non-zero for randomization). |\n| `-capacities_perturbation_percentage` | Sets the percentage of edges whose capacities are perturbed. By default, the edge capacities are perturbed by adding or subtracting 1 (track) from the original capacity.  |\n| `-perturbation_amount` | Sets the perturbation value of the edge capacities. This option is only meaningful when `-capacities_perturbation_percentage` is used. |\n\nExample:\n`set_global_routing_random -seed 42 \\\n  -capacities_perturbation_percentage 50 \\\n  -perturbation_amount 2`\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_8"
            },
            {
                "summary": "",
                "content": "id:global_routing_9\n### Set Specific Nets to Route\n\nThe `set_nets_to_route` command defines a list of nets to route. Only the nets\ndefined in this command are routed, leaving the remaining nets without any\nglobal route guides.\n\n```tcl\nset_nets_to_route \n    net_names \n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `net_names` | Tcl list of set of nets (e.g. `{net1, net2}`). |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_9"
            },
            {
                "summary": "",
                "content": "id:global_routing_10\n### Repair Antennas\n\nThe `repair_antennas` command checks the global routing for antenna\nviolations and repairs the violations by inserting diodes near the\ngates of the violating nets.  By default the command runs only one\niteration to repair antennas. Filler instances added by the\n`filler_placement` command should NOT be in the database when\n`repair_antennas` is called. \n\n```tcl\nrepair_antennas \n    [diode_cell]\n    [-iterations iterations]\n    [-ratio_margin margin]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `diode_cell` | Diode cell to fix antenna violations. |\n| `-iterations` | Number of iterations. The default value is `1`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-ratio_margin` | Add a margin to the antenna ratios. The default value is `0`, and the allowed values are integers `[0, 100]`. |\n\nSee LEF/DEF 5.8 Language Reference, Appendix C, \"Calculating and\nFixing Process Antenna Violations\" for a [description](coriolis.lip6.fr/doc/lefdef/lefdefref/lefdefref.pdf) \nof antenna violations.\n\nIf no `diode_cell` argument is specified the LEF cell with class CORE, ANTENNACELL will be used.\nIf any repairs are made the filler instances are remove and must be\nplaced with the `filler_placement` command.\n\nIf the LEF technology layer `ANTENNADIFFSIDEAREARATIO` properties are constant\ninstead of PWL, inserting diodes will not improve the antenna ratios, \nand thus, no\ndiodes are inserted. The following warning message will be reported:\n\n```\n[WARNING GRT-0243] Unable to repair antennas on net with diodes.\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_10"
            },
            {
                "summary": "",
                "content": "id:global_routing_11\n### Write Global Routing Guides\n\n```tcl\nwrite_guides file_name\n```\n\n| Switch Name | Description |\n| ----- | ----- |\n| `file_name` | Guide file name. |\n\nExample: `write_guides route.guide`.\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_11"
            },
            {
                "summary": "",
                "content": "id:global_routing_12\n### Estimate Global Routing Parasitics\n\nTo estimate RC parasitics based on global route results, use the `-global_routing`\noption of the `estimate_parasitics` command.\n\n```{note}\nTo see the function definition for `estimate_parasitics`, refer to \n[Resizer docs](../rsz/README.md#estimate-parasitics).\n```\n\n```tcl\nestimate_parasitics -global_routing\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_12"
            },
            {
                "summary": "",
                "content": "id:global_routing_13\n### Plot Global Routing Guides\n\nThe `draw_route_guides` command plots the route guides for a set of nets.\nTo erase the route guides from the GUI, pass an empty list to this command:\n`draw_route_guides {}`.\n\n```tcl\ndraw_route_guides \n    net_names \n    [-show_pin_locations]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `net_names` | Tcl list of set of nets (e.g. `{net1, net2}`). |\n| `-show_pin_locations` | Draw circles for the pin positions on the routing grid. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_13"
            },
            {
                "summary": "",
                "content": "id:global_routing_14\n### Report Wirelength\n\nThe `report_wire_length` command reports the wire length of the nets. Use the `-global_route`\nand the `-detailed_route` flags to report the wire length from global and detailed routing,\nrespectively. If none of these flags are used, the tool will identify the state of the design\nand report the wire length accordingly.\n\n```tcl\nreport_wire_length \n    [-net net_list]\n    [-file file]\n    [-global_route]\n    [-detailed_route]\n    [-verbose]\n```\n\n#### Options\n\n| Switch Name | Description | \n| ----- | ----- |\n| `-net` | List of nets to report the wirelength. Use `*` to report the wire length for all nets of the design. |\n| `-file` | The name of the file for the wirelength report. |\n| `-global_route` | Report the wire length of the global routing. |\n| `-detailed_route` | Report the wire length of the detailed routing. |\n| `-verbose` | This flag enables the full reporting of the layer-wise wirelength information. |\n\nExample: `report_wire_length -net {clk net60} -global_route -detailed_route -verbose -file out.csv`\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_14"
            },
            {
                "summary": "",
                "content": "id:global_routing_15\n### Debug Mode\n\nThe `global_route_debug` command allows you to start a debug mode to view the status of the Steiner Trees.\nIt also allows you to dump the input positions for the Steiner tree creation of a net.\nThis must be used before calling the `global_route` command. \nSet the name of the net and the trees that you want to visualize.\n\n```tcl\nglobal_route_debug \n    [-st]\n    [-rst]\n    [-tree2D]\n    [-tree3D]\n    [-saveSttInput file_name]\n    [-net net_name]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-st` | Show the Steiner Tree generated by `stt`. |\n| `-rst` | Show the Rectilinear Steiner Tree generated by `grt`. |\n| `-tree2D` | Show the Rectilinear Steiner Tree generated by `grt` after the overflow iterations. |\n| `-tree3D` | Show the 3D Rectilinear Steiner Tree post-layer assignment. |\n| `-saveSttInput` | File name to save `stt` input of a net. |\n| `-net` | The name of the net name to be displayed. |\n\n## Example scripts\n\nExamples scripts demonstrating how to run FastRoute on a sample design of `gcd` as follows:\n\n```shell\n./test/gcd.tcl\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_15"
            },
            {
                "summary": "",
                "content": "id:global_routing_16\n## Example scripts\n\nExamples scripts demonstrating how to run FastRoute on a sample design of `gcd` as follows:\n\n```shell\n./test/gcd.tcl\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_16"
            },
            {
                "summary": "",
                "content": "id:global_routing_17\n### Read Global Routing Guides\n\n```tcl\nread_guides file_name \n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `file_name` | Path to global routing guide. | \n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_routing_17"
            },
            {
                "summary": "",
                "content": "id:global_routing_18\n# Global Routing\n## Using the Python interface to grt\n\n```{warning}\nThe `Python` interface is currently in development and is subject to change.\n```\n\nThe `Python` API tries to stay close to the API defined in the `C++` class\n`GlobalRouter` that is located [here](./include/grt/GlobalRouter.h)\n\nWhen initializing a design, a sequence of `Python` commands might look like\nthe following:\n\n```python\nfrom openroad import Design, Tech\ntech = Tech()\ntech.readLef(...)\ndesign = Design(tech)\ndesign.readDef(...)\ngr = design.getGlobalRouter()\n```    \n\nHere are some options to the `global_route`\ncommand. (See `GlobalRouter.h` for a complete list)\n\n```python\ngr.setGridOrigin(x, y)                     # int, default 0,0\ngr.setCongestionReportFile(file_name)      # string\ngr.setOverflowIterations(n)                # int, default 50\ngr.setAllowCongestion(allowCongestion)     # boolean, default False\ngr.setCriticalNetsPercentage(percentage)   # float\ngr.setMinRoutingLayer(minLayer)            # int\ngr.setMaxRoutingLayer(maxLayer)            # int\ngr.setMinLayerForClock(minLayer)           # int\ngr.setMaxLayerForClock(maxLayer)           # int\ngr.setVerbose(v)                           # boolean, default False\n```\n\nand when ready to actually do the global route:\n\n```python\ngr.globalRoute(save_guides)                # boolean, default False\n```    \n\nIf you have set `save_guides` to True, you can then save the guides in `file_name` with:\n\n```python\ndesign.getBlock().writeGuides(file_name)\n```\n\nYou can find the index of a named layer with\n\n```python\nlindex = tech.getDB().getTech().findLayer(layer_name)\n```\n\nor, if you only have the `Python` design object\n\n```python\nlindex = design.getTech().getDB().getTech().findLayer(layer_name)\n```    \n\nBe aware that much of the error checking is done in `Tcl`, so that with\nthe current `C++` / `Python` API, that might be an issue to deal\nwith. There are also some useful `Python` functions located in the `grt_aux.py` [file](./test/grt_aux.py)\nbut these are not considered a part of the *final* API and may be subject to change.\n\n\n",
                "id": "global_routing_18"
            }
        ]
    },
    {
        "source": "flute",
        "amount": 1,
        "knowledge": [
            {
                "summary": "",
                "content": "id:flute_0\n# Flute3\n\nFlute3 is an open-source rectilinear Steiner minimum tree heuristic with\nimprovements made by UFRGS students and James Cherry. This tool is used\nfor the calculation of wirelength in `grt` and `rsz`. \n\nThe version in this repository uses\nCMake and C++ namespace, and has dynamic memory allocation. Flute3 can handle nets with any degree.\n\n",
                "id": "flute_0"
            }
        ]
    },
    {
        "source": "clock_tree_synthesis",
        "amount": 5,
        "knowledge": [
            {
                "summary": "",
                "content": "id:clock_tree_synthesis_0\n# Clock Tree Synthesis\n\nThe clock tree synthesis module in OpenROAD (`cts`) is based on TritonCTS\n2.0. It is available from the `clock_tree_synthesis` command. TritonCTS 2.0\nperforms on-the-fly characterization. Thus, there is no need to generate\ncharacterization data. The on-the-fly characterization feature can be optionally\ncontrolled by parameters specified by the `configure_cts_characterization`\ncommand. Use `set_wire_rc` command to set the clock routing layer.\n\n",
                "id": "clock_tree_synthesis_0"
            },
            {
                "summary": "",
                "content": "id:clock_tree_synthesis_1\n### Configure CTS Characterization\n\n```tcl\nconfigure_cts_characterization \n    [-max_slew max_slew]\n    [-max_cap max_cap]\n    [-slew_steps slew_steps]\n    [-cap_steps cap_steps]\n```\n\n#### Options\n\n| Switch Name | Description | \n| ----- | ----- |\n| `-max_slew` | Max slew value (in the current time unit) that the characterization will test. If this parameter is omitted, the code would use max slew value for specified buffer in `buf_list` from liberty file. |\n| `-max_cap` | Max capacitance value (in the current capacitance unit) that the characterization will test. If this parameter is omitted, the code would use max cap value for specified buffer in `buf_list` from liberty file. |\n| `-slew_steps` | Number of steps that `max_slew` will be divided into for characterization. The default value is `12`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-cap_steps` | Number of steps that `max_cap` will be divided into for characterization. The default value is `34`, and the allowed values are integers `[0, MAX_INT]`. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "clock_tree_synthesis_1"
            },
            {
                "summary": "",
                "content": "id:clock_tree_synthesis_2\n### Clock Tree Synthesis\n\n```tcl\nclock_tree_synthesis \n    -buf_list <list_of_buffers>\n    [-root_buf root_buf]\n    [-wire_unit wire_unit]\n    [-clk_nets <list_of_clk_nets>]\n    [-distance_between_buffers]\n    [-branching_point_buffers_distance]\n    [-clustering_exponent]\n    [-clustering_unbalance_ratio]\n    [-sink_clustering_enable]\n    [-sink_clustering_size cluster_size]\n    [-sink_clustering_max_diameter max_diameter]\n    [-balance_levels]\n    [-num_static_layers]\n    [-sink_clustering_buffer]\n    [-use_dummy_load]\n    [-insertion_delay]\n    [-sink_buffer_max_cap_derate derate_value]\n    [-delay_buffer_derate derate_value]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-buf_list` | Tcl list of master cells (buffers) that will be considered when making the wire segments (e.g. `{BUFXX, BUFYY}`). |\n| `-root_buffer` | The master cell of the buffer that serves as root for the clock tree. If this parameter is omitted, the first master cell from `-buf_list` is taken. |\n| `-wire_unit` | Minimum unit distance between buffers for a specific wire. If this parameter is omitted, the code gets the value from ten times the height of `-root_buffer`. |\n| `-clk_nets` | String containing the names of the clock roots. If this parameter is omitted, `cts` automatically looks for the clock roots automatically. |\n| `-distance_between_buffers` | Distance (in microns) between buffers that `cts` should use when creating the tree. When using this parameter, the clock tree algorithm is simplified and only uses a fraction of the segments from the LUT. |\n| `-branching_point_buffers_distance` | Distance (in microns) that a branch has to have in order for a buffer to be inserted on a branch end-point. This requires the `-distance_between_buffers` value to be set. |\n| `-clustering_exponent` | Value that determines the power used on the difference between sink and means on the CKMeans clustering algorithm. The default value is `4`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-clustering_unbalance_ratio` | Value determines each cluster's maximum capacity during CKMeans. A value of `0.5` (i.e., 50%) means that each cluster will have exactly half of all sinks for a specific region (half for each branch). The default value is `0.6`, and the allowed values are floats `[0, 1.0]`. |\n| `-sink_clustering_enable` | Enables pre-clustering of sinks to create one level of sub-tree before building H-tree. Each cluster is driven by buffer which becomes end point of H-tree structure. |\n| `-sink_clustering_size` | Specifies the maximum number of sinks per cluster. The default value is `20`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-sink_clustering_max_diameter` | Specifies maximum diameter (in microns) of sink cluster. The default value is `50`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-balance_levels` | Attempt to keep a similar number of levels in the clock tree across non-register cells (e.g., clock-gate or inverter). The default value is `False`, and the allowed values are bool. |\n| `-clk_nets` | String containing the names of the clock roots. If this parameter is omitted, `cts` looks for the clock roots automatically. |\n| `-num_static_layers` | Set the number of static layers. The default value is `0`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-sink_clustering_buffer` | Set the sink clustering buffer(s) to be used. |\n| `-obstruction_aware` | Enables obstruction-aware buffering such that clock buffers are not placed on top of blockages or hard macros. This option may reduce legalizer displacement, leading to better latency, skew or timing QoR.  The default value is `False`, and the allowed values are bool. |\n| `-apply_ndr` | Applies 2X spacing non-default rule to all clock nets except leaf-level nets. The default value is `False`. |\n| `-no_insertion_delay` | Don't consider insertion delays in macro timing models in balancing latencies between macro cells and registers. This option prevents construction of separate clock trees for macro cells and registers.  The default value is `False`. |\n| `-use_dummy_load` | Applies dummy buffer or inverter cells at clock tree leaves to balance loads.  The default values is `False`. |\n| `-sink_buffer_max_cap_derate` | Use this option to control automatic buffer selection. To favor strong(weak) drive strength buffers use a small(large) value.  The default value is `0.01`, meaning that buffers are selected by derating max cap limit by 0.01. The value of 1.0 means no derating of max cap limit.  |\n| `-delay_buffer_derate` | This option is used with -insertion_delay option that balances latencies between macro cells and registers by inserting delay buffers.  The default values is `1.0`, meaning all needed delay buffers are inserted.  Value of 0.5 means only half of necessary delay buffers are inserted.  Value of 0.0 means no insertion of delay buffers. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "clock_tree_synthesis_2"
            },
            {
                "summary": "",
                "content": "id:clock_tree_synthesis_3\n### Report CTS\n\nAnother command available from `cts` is `report_cts`. It is used to\nextract metrics after a successful `clock_tree_synthesis` run. These are:\n \n- Number of Clock Roots\n- Number of Buffers Inserted\n- Number of Clock Subnets\n- Number of Sinks.  \n\n```tcl\nreport_cts \n    [-out_file file]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-out_file` | The file to save `cts` reports. If this parameter is omitted, the report is streamed to `stdout` and not saved. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "clock_tree_synthesis_3"
            },
            {
                "summary": "",
                "content": "id:clock_tree_synthesis_4\n# Clock Tree Synthesis\n## References\n\n1.   [LEMON](https://lemon.cs.elte.hu/trac/lemon) - **L**ibrary for\n    **E**fficient **M**odeling and **O**ptimization in **N**etworks\n1.  Kahng, A. B., Li, J., & Wang, L. (2016, November). Improved flop tray-based design implementation for power reduction. In 2016 IEEE/ACM International Conference on Computer-Aided Design (ICCAD) (pp. 1-8). IEEE. [(.pdf)](https://vlsicad.ucsd.edu/Publications/Conferences/344/c344.pdf)\n\n",
                "id": "clock_tree_synthesis_4"
            }
        ]
    },
    {
        "source": "chip-level_connections",
        "amount": 15,
        "knowledge": [
            {
                "summary": "",
                "content": "id:chip-level_connections_0\n# Chip-level Connections\n\nThe chip-level connections module in OpenROAD (`pad`) is based on the\nopen-source tool ICeWall. In this utility, either place an IO ring around the\nboundary of the chip and connect with either wirebond pads or a bump array.\n\n",
                "id": "chip-level_connections_0"
            },
            {
                "summary": "",
                "content": "id:chip-level_connections_1\n### Placing Terminals\n\nIn the case where the bond pads are integrated into the padcell, the IO terminals need to be placed.\nTo place a terminals on the padring\n\n```tcl\nplace_io_terminals\n    -allow_non_top_layer\n    inst_pins\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-allow_non_top_layer` | Allow the terminal to be placed below the top layer. |\n| `inst_pins` | Instance pins to place the terminals on. |\n\n#### Examples\n```\nplace_io_terminals u_*/PAD\nplace_io_terminals u_*/VDD\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "chip-level_connections_1"
            },
            {
                "summary": "",
                "content": "id:chip-level_connections_2\n### Defining a Bump Array\n\nTo define a bump array.\n\n```tcl\nmake_io_bump_array \n    -bump master\n    -origin {x y}\n    -rows rows\n    -columns columns\n    -pitch {x y}\n    [-prefix prefix]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-bump` | Name of the bump master. |\n| `-origin` | Origin of the array. |\n| `-rows` | Number of rows to create. |\n| `-columns` | Number of columns to create. |\n| `-pitch` | Pitch of the array. |\n| `-prefix` | Name prefix for the bump array. The default value is `BUMP_`. |\nExample usage:\n\n```tcl\nmake_io_bump_array -bump BUMP -origin \"200 200\" -rows 14 -columns 14 -pitch \"200 200\"\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "chip-level_connections_2"
            },
            {
                "summary": "",
                "content": "id:chip-level_connections_3\n### Removing Entire Bump Array\n\nTo remove a bump array.\n\n```tcl\nremove_io_bump_array -bump master\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-bump` | Name of the bump master. |\n\nExample usage:\n\n```tcl\nremove_io_bump_array -bump BUMP\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "chip-level_connections_3"
            },
            {
                "summary": "",
                "content": "id:chip-level_connections_4\n### Removing a Single Bump Instance\n\nTo remove a single bump instance.\n\n```tcl\nremove_io_bump instance_name\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `instance_name` | Name of the bump. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "chip-level_connections_4"
            },
            {
                "summary": "",
                "content": "id:chip-level_connections_5\n### Assigning a Net to a Bump\n\nTo assign a net to a bump.\n\n```tcl\nassign_io_bump \n    -net net\n    [-terminal iterm]\n    [-dont_route]\n    instance\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-net` | Net to connect to. |\n| `-terminal` | Instance terminal to route to. |\n| `-dont_route` | Flag to indicate that this bump should not be routed, only perform assignment. |\n| `instance` | Name of the bump. |\n\nExample usage:\n\n```tcl\nassign_io_bump -net p_ddr_addr_9_o BUMP_6_0\nassign_io_bump -net p_ddr_addr_8_o BUMP_6_2\nassign_io_bump -net DVSS BUMP_6_4\nassign_io_bump -net DVDD BUMP_7_3\nassign_io_bump -net DVDD -terminal u_dvdd/DVDD BUMP_8_3\nassign_io_bump -net p_ddr_addr_7_o BUMP_7_1\nassign_io_bump -net p_ddr_addr_6_o BUMP_7_0\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "chip-level_connections_5"
            },
            {
                "summary": "",
                "content": "id:chip-level_connections_6\n### Define IO Rows\n\nDefine an IO site for the pads to be placed into.\n\n```tcl\nmake_io_sites \n    -horizontal_site site\n    -vertical_site site\n    -corner_site site\n    -offset offset\n    [-rotation_horizontal rotation]\n    [-rotation_vertical rotation]\n    [-rotation_corner rotation]\n    [-ring_index index]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-horizontal_site` | Name of the site for the horizontal pads (east and west). |\n| `-vertical_site` | Name of the site for the vertical pads (north and south). |\n| `-corner_site` | Name of the site for the corner cells. |\n| `-offset` | Offset from the die edge to place the rows. |\n| `-rotation_horizontal` | Rotation to apply to the horizontal sites to ensure pads are placed correctly. The default value is `R0`. |\n| `-rotation_vertical` | Rotation to apply to the vertical sites to ensure pads are placed correctly. The default value is `R0`. |\n| `-rotation_corner` | Rotation to apply to the corner sites to ensure pads are placed correctly. The default value is `R0`. |\n| `-ring_index` | Used to specify the index of the ring in case of multiple rings. |\n\nExample usage:\n\n```tcl\nmake_io_sites -horizontal_site IOSITE_H -vertical_site IOSITE_V -corner_site IOSITE_C -offset 35\nmake_io_sites -horizontal_site IOSITE_H -vertical_site IOSITE_V -corner_site IOSITE_C -offset 35 -rotation_horizontal R180\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "chip-level_connections_6"
            },
            {
                "summary": "",
                "content": "id:chip-level_connections_7\n### Remove IO Rows\n\nWhen the padring is complete, the following command can remove the IO rows to avoid causing confusion with the other tools.\n\n```tcl\nremove_io_rows\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "chip-level_connections_7"
            },
            {
                "summary": "",
                "content": "id:chip-level_connections_8\n### Placing Corners\n\nTo place the corner cells\n\n```tcl\nplace_corners \n    master\n    [-ring_index index]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `master` | Name of the master for the corners. |\n| `-ring_index` | Used to specify the index of the ring in case of multiple rings. |\n\nExample usage:\n\n```tcl\nplace_corners sky130_fd_io__corner_bus_overlay\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "chip-level_connections_8"
            },
            {
                "summary": "",
                "content": "id:chip-level_connections_9\n### Placing Pads\n\nTo place a pad into the pad ring.\n\n```tcl\nplace_pad \n    -row row_name\n    -location offset\n    -mirror\n    [-master master]\n    name\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-row` | Name of the row to place the pad into, examples include: `IO_NORTH`, `IO_SOUTH`, `IO_WEST`, `IO_EAST`, `IO_NORTH_0`, `IO_NORTH_1`. |\n| `-location` | Offset from the bottom left chip edge to place the pad at. |\n| `-mirror` | Specifies if the pad should be mirrored. |\n| `-master` | Name of the instance master if the instance needs to be created. |\n| `name` | Name of the instance. |\n\nExample usage:\n\n```tcl\nplace_pad -row IO_SOUTH -location 280.0 {u_clk.u_in}\nplace_pad -row IO_SOUTH -location 360.0 -mirror {u_reset.u_in}\nplace_pad -master sky130_fd_io__top_ground_hvc_wpad -row IO_SOUTH -location 439.5 {u_vzz_0}\nplace_pad -master sky130_fd_io__top_power_hvc_wpad -row IO_SOUTH -location 517.5 {u_v18_0}\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "chip-level_connections_9"
            },
            {
                "summary": "",
                "content": "id:chip-level_connections_10\n### Placing IO Filler Cells\n\nTo place the IO filler cells.\n\n```tcl\nplace_io_fill \n    -row row_name\n    [-permit_overlaps masters]\n    masters\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-row` | Name of the row to place the pad into, examples include: `IO_NORTH`, `IO_SOUTH`, `IO_WEST`, `IO_EAST`, `IO_NORTH_0`, `IO_NORTH_1`. |\n| `-permit_overlaps` | Names of the masters for the IO filler cells that allow for overlapping. |\n| `masters` | Names of the masters for the IO filler cells. |\n\nExample usage: \n\n```tcl\nplace_io_fill -row IO_NORTH s8iom0s8_com_bus_slice_10um s8iom0s8_com_bus_slice_5um s8iom0s8_com_bus_slice_1um\nplace_io_fill -row IO_SOUTH s8iom0s8_com_bus_slice_10um s8iom0s8_com_bus_slice_5um s8iom0s8_com_bus_slice_1um\nplace_io_fill -row IO_WEST s8iom0s8_com_bus_slice_10um s8iom0s8_com_bus_slice_5um s8iom0s8_com_bus_slice_1um\nplace_io_fill -row IO_EAST s8iom0s8_com_bus_slice_10um s8iom0s8_com_bus_slice_5um s8iom0s8_com_bus_slice_1um\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "chip-level_connections_10"
            },
            {
                "summary": "",
                "content": "id:chip-level_connections_11\n### Connecting Ring Signals\n\nOnce the ring is complete, use the following command to connect the ring signals.\n\n```tcl\nconnect_by_abutment\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "chip-level_connections_11"
            },
            {
                "summary": "",
                "content": "id:chip-level_connections_12\n### Placing Wirebond Pads\n\nTo place the wirebond pads over the IO cells.\n\n```tcl\nplace_bondpad \n    -bond master\n    [-offset {x y}]\n    [-rotation rotation]\n    io_instances\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-bond` | Name of the bondpad master. |\n| `-offset` | Offset to place the bondpad at with respect to the io instance. |\n| `-rotation` | Rotation of the bondpad. |\n| `io_instances` | Names of the instances to add bond pads to. |\n\nExample usage:\n\n```tcl\nplace_bondpad -bond PAD IO_*\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "chip-level_connections_12"
            },
            {
                "summary": "",
                "content": "id:chip-level_connections_13\n### Creating False IO Sites\n\nIf the library does not contain sites for the IO cells, the following command can be used to add them.\nThis should not be used unless the sites are not in the library.\n\n```tcl\nmake_fake_io_site \n    -name name\n    -width width\n    -height height\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-name` | Name of the site. |\n| `-width` | Width of the site (in microns). |\n| `-height` | Height of the site (in microns). |\n\nExample usage:\n\n```tcl\nmake_fake_io_site -name IO_HSITE -width 1 -height 204\nmake_fake_io_site -name IO_VSITE -width 1 -height 200\nmake_fake_io_site -name IO_CSITE -width 200 -height 204\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "chip-level_connections_13"
            },
            {
                "summary": "",
                "content": "id:chip-level_connections_14\n# Chip-level Connections\n### Useful Developer Commands\n\nIf you are a developer, you might find these useful. More details can be found in the [source file](./src/ICeWall.cpp) or the [swig file](./src/pad.i).\n\n| Command Name | Description |\n| ----- | ----- |\n| `find_site` | Find site given site name. |\n| `find_master` | Find master given master name. |\n| `find_instance` | Find instance given instance name. |\n| `find_net` | Find net given net name. |\n| `assert_required` | Assert argument that is required for `cmd` |\n| `connect_iterm` | Connect instance terminals. Required inputs are: `inst_name`, `iterm_name`, `net_name`. |\n| `convert_tcl` | These functions read from $ICeWall::library parameters to generate a standalone Tcl script. |\n\n",
                "id": "chip-level_connections_14"
            }
        ]
    },
    {
        "source": "restructure",
        "amount": 3,
        "knowledge": [
            {
                "summary": "",
                "content": "id:restructure_0\n# Restructure\n\nThe restructure module in OpenROAD (`rmp`) is based on \nan interface to ABC for local resynthesis. The package allows\nlogic restructuring that targets area or timing. It extracts a cloud of logic\nusing the OpenSTA timing engine, and passes it to ABC through `blif` interface.\nMultiple recipes for area or timing are run to obtain multiple structures from ABC;\nthe most desirable among these is used to improve the netlist.\nThe ABC output is read back by a `blif` reader which is integrated to OpenDB.\n`blif` writer and reader also support constants from and to OpenDB. Reading\nback of constants requires insertion of tie cells which should be provided\nby the user as per the interface described below.\n\n",
                "id": "restructure_0"
            },
            {
                "summary": "",
                "content": "id:restructure_1\n### Area Mode\n\n```tcl\nrestructure \n    -liberty_file liberty_file\n    -target area\n    -tielo_pin  tielo_pin_name\n    -tiehi_pin  tiehi_pin_name\n    -work_dir  workdir_name\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\nRestructuring can be done in two modes: area or delay.\n\n",
                "id": "restructure_1"
            },
            {
                "summary": "",
                "content": "id:restructure_2\n# Restructure\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-liberty_file` | Liberty file with description of cells used in design. This is passed to ABC. |\n| `-target` | Either `area` or `delay`. In area mode, the focus is area reduction, and timing may degrade. In delay mode, delay is likely reduced, but the area may increase. The default value is `area`. |\n| `-slack_threshold` | Specifies a (setup) timing slack value below which timing paths need to be analyzed for restructuring. The default value is `0`, and the allowed values are floats `[0, MAX_FLOAT]`. |\n| `-depth_threshold` | Specifies the path depth above which a timing path would be considered for restructuring. The default value is `16`, and the allowed values are `[0, MAX_INT]`. |\n| `-tielo_pin` | Tie cell pin that can drive constant zero. The format is `<cell>/<port>`. |\n| `-tiehi_pin` | Tie cell pin that can drive constant one. The format is `<cell>/<port>`. |\n| `-work_dir` | Name of the working directory for temporary files. If not provided, `run` directory would be used. |\n\n",
                "id": "restructure_2"
            }
        ]
    },
    {
        "source": "detailed_routing",
        "amount": 6,
        "knowledge": [
            {
                "summary": "",
                "content": "id:detailed_routing_0\n# Detailed Routing\n\nThe Detailed Routing (`drt`) module in OpenROAD is based on the open-source\ndetailed router, TritonRoute. TritonRoute consists of several main \nbuilding blocks, including pin access analysis, track assignment,\ninitial detailed routing,  search and repair, and a DRC engine.\nThe initial development of the\n[router](https://vlsicad.ucsd.edu/Publications/Conferences/363/c363.pdf)\nis inspired by the [ISPD-2018 initial detailed routing\ncontest](http://www.ispd.cc/contests/18/).  However, the current framework\ndiffers and is built from scratch, aiming for an industrial-oriented scalable\nand flexible flow.\n\nTritonRoute provides industry-standard LEF/DEF interface with\nsupport of [ISPD-2018](http://www.ispd.cc/contests/18/) and\n[ISPD-2019](http://www.ispd.cc/contests/19/) contest-compatible route\nguide format.\n\n",
                "id": "detailed_routing_0"
            },
            {
                "summary": "",
                "content": "id:detailed_routing_1\n### Detailed Route\n\n```tcl\ndetailed_route \n    [-output_maze filename]\n    [-output_drc filename]\n    [-output_cmap filename]\n    [-output_guide_coverage filename]\n    [-drc_report_iter_step step]\n    [-db_process_node name]\n    [-disable_via_gen]\n    [-droute_end_iter iter]\n    [-via_in_pin_bottom_layer layer]\n    [-via_in_pin_top_layer layer]\n    [-or_seed seed]\n    [-or_k_ k]\n    [-bottom_routing_layer layer]\n    [-top_routing_layer layer]\n    [-verbose level]\n    [-distributed]\n    [-remote_host rhost]\n    [-remote_port rport]\n    [-shared_volume vol]\n    [-cloud_size sz]\n    [-clean_patches]\n    [-no_pin_access]\n    [-min_access_points count]\n    [-save_guide_updates]\n    [-repair_pdn_vias layer]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-output_maze` | Path to output maze log file (e.g. `output_maze.log`). |\n| `-output_drc` | Path to output DRC report file (e.g. `output_drc.rpt`). |\n| `-output_cmap` | Path to output congestion map file (e.g. `output.cmap`). |\n| `-output_guide_coverage` | Path to output guide coverage file (e.g. `sample_coverage.csv`). |\n| `-drc_report_iter_step` | Report DRC on each iteration which is a multiple of this step. The default value is `0`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-db_process_node` | Specify the process node. |\n| `-disable_via_gen` | Option to diable via generation with bottom and top routing layer. The default value is disabled. | \n| `-droute_end_iter` | Number of detailed routing iterations. The default value is `-1`, and the allowed values are integers `[1, 64]`. |\n| `-via_in_pin_bottom_layer` | Via-in pin bottom layer name. |\n| `-via_in_pin_top_layer` | Via-in pin top layer name. |\n| `-or_seed` | Refer to developer arguments [here](#developer-arguments). |\n| `-or_k` | Refer to developer arguments [here](#developer-arguments). |\n| `-bottom_routing_layer` | Bottommost routing layer name. |\n| `-top_routing_layer` | Topmost routing layer name. |\n| `-verbose` | Sets verbose mode if the value is greater than 1, else non-verbose mode (must be integer, or error will be triggered.) |\n| `-distributed` | Refer to distributed arguments [here](#distributed-arguments). |\n| `-clean_patches` | Clean unneeded patches during detailed routing. | \n| `-no_pin_access` | Disables pin access for routing. |\n| `-min_access_points` | Minimum access points for standard cell and macro cell pins. | \n| `-save_guide_updates` | Flag to save guides updates. |\n| `-repair_pdn_vias` | This option is used for PDKs where M1 and M2 power rails run in parallel. |\n\n#### Developer arguments\n\nSome arguments that are helpful for developers are listed here. \n\n| Switch Name | Description |\n| ----- | ----- |\n| `-or_seed` | Random seed for the order of nets to reroute. The default value is `-1`, and the allowed values are integers `[0, MAX_INT]`. | \n| `-or_k` | Number of swaps is given by $k * sizeof(rerouteNets)$. The default value is `0`, and the allowed values are integers `[0, MAX_INT]`. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "detailed_routing_1"
            },
            {
                "summary": "",
                "content": "id:detailed_routing_2\n### Detailed Route Debugging\n\nThe following command and arguments are useful when debugging error\nmessages from `drt` and to understand its behavior.\n\n```tcl\ndetailed_route_debug \n    [-pa]\n    [-ta]\n    [-dr]\n    [-maze]\n    [-net name]\n    [-pin name]\n    [-worker x y]\n    [-iter iter]\n    [-pa_markers]\n    [-dump_dr]\n    [-dump_dir dir]\n    [-pa_edge]\n    [-pa_commit]\n    [-write_net_tracks]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-pa` | Enable debug for pin access. |\n| `-ta` | Enable debug for track assignment. |\n| `-dr` | Enable debug for detailed routing. |\n| `-maze` | Enable debug for maze routing. | \n| `-net` | Enable debug for net name. |\n| `-pin` | Enable debug for pin name. |\n| `-worker` | Debugs routes that pass through the point `{x, y}`. |\n| `-iter` | Specifies the number of debug iterations. The default value is `0`, and the accepted values are integers `[0, MAX_INT`. |\n| `-pa_markers` | Enable pin access markers. |\n| `-dump_dr` | Filename for detailed routing dump. |\n| `-dump_dir` | Directory for detailed routing dump. |\n| `-pa_edge` | Enable visibility of pin access edges. |\n| `-pa_commit` | Enable visibility of pin access commits. |\n| `-write_net_tracks` | Enable writing of net track assigments. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "detailed_routing_2"
            },
            {
                "summary": "",
                "content": "id:detailed_routing_3\n### Check Pin Access \n\n```tcl\npin_access\n    [-db_process_node name]\n    [-bottom_routing_layer layer]\n    [-top_routing_layer layer]\n    [-min_access_points count]\n    [-verbose level]\n    [-distributed]\n    [-remote_host rhost]\n    [-remote_port rport]\n    [-shared_volume vol]\n    [-cloud_size sz]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-db_process_node` | Specify process node. |\n| `-bottom_routing_layer` | Bottommost routing layer. |\n| `-top_routing_layer` | Topmost routing layer. |\n| `-min_access_points` | Minimum number of access points per pin. |\n| `-verbose` | Sets verbose mode if the value is greater than 1, else non-verbose mode (must be integer, or error will be triggered.) |\n| `-distributed` | Refer to distributed arguments [here](#distributed-arguments). |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "detailed_routing_3"
            },
            {
                "summary": "",
                "content": "id:detailed_routing_4\n### Distributed arguments\n\nWe have compiled all distributed arguments in this section.\n\n```{note}\nAdditional setup is required. Please refer to this [guide](./doc/Distributed.md).\n```\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-distributed` | Enable distributed mode with Kubernetes and Google Cloud. |\n| `-remote_host` | The host IP. |\n| `-remote_port` | The value of the port to access from. |\n| `-shared_volume` | The mount path of the nfs shared folder. |\n| `-cloud_size` | The number of workers. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "detailed_routing_4"
            },
            {
                "summary": "",
                "content": "id:detailed_routing_5\n# Detailed Routing\n## References\n\nPlease cite the following paper(s) for publication:\n\n1.   A. B. Kahng, L. Wang and B. Xu, \"TritonRoute: The Open Source Detailed\n    Router\", IEEE Transactions on Computer-Aided Design of Integrated Circuits\n    and Systems (2020), doi:10.1109/TCAD.2020.3003234. [(.pdf)](https://ieeexplore.ieee.org/ielaam/43/9358030/9120211-aam.pdf)\n1.   A. B. Kahng, L. Wang and B. Xu, \"The Tao of PAO: Anatomy of a Pin Access\n    Oracle for Detailed Routing\", Proc. ACM/IEEE Design Automation Conf., 2020,\n    pp. 1-6. [(.pdf)](https://vlsicad.ucsd.edu/Publications/Conferences/377/c377.pdf)\n\n",
                "id": "detailed_routing_5"
            }
        ]
    },
    {
        "source": "pin_placement",
        "amount": 11,
        "knowledge": [
            {
                "summary": "",
                "content": "id:pin_placement_0\n# Pin Placer\n\nPlace pins on the boundary of the die on the track grid to minimize net\nwirelengths. Pin placement also creates a metal shape for each pin using\nmin-area rules.\n\nFor designs with unplaced cells, the net wirelength is computed considering\nthe center of the die area as the unplaced cells position.\n\n",
                "id": "pin_placement_0"
            },
            {
                "summary": "",
                "content": "id:pin_placement_1\n### Define Pin Shape Pattern\n\nThe `define_pin_shape_pattern` command defines a pin placement grid on the\nspecified layer. This grid has positions inside the die area, not only at\nthe edges of the die boundary.\n\n```tcl\ndefine_pin_shape_pattern \n    [-layer layer]\n    [-x_step x_step]\n    [-y_step y_step]\n    [-region {llx lly urx ury} | *]\n    [-size {width height}]\n    [-pin_keepout dist]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-layer` | The single top-most routing layer of the placement grid. |\n| `-x_step`, `-y_step` | The distance (in microns) between each valid position on the grid in the x- and y-directions, respectively. |\n| `-region` | The `{llx, lly, urx, ury}` region of the placement grid (in microns). If the `*` is specified, the region will be the entire die area. |\n| `-size` | The width and height (in microns) of the pins assigned to this grid. The centers of the pins are placed on the grid positions. Pins may have half of their shapes outside the defined region. |\n| `-pin_keepout` | The boundary (in microns) around existing routing obstructions that the pins should avoid; this defaults to the `layer` minimum spacing. |\n\n#### Face-to-Face direct-bonding IOs\n\nThe `define_pin_shape_pattern` command can be used to place pins in any metal\nlayer with the minimum allowed spacing to facilitate 3DIC integration of\nchips using face-to-face packaging technologies. These technologies include\n[micro bumps](https://semiengineering.com/bumps-vs-hybrid-bonding-for-advanced-packaging/)\nand\n[hybrid bonding](https://www.3dincites.com/2018/04/hybrid-bonding-from-concept-to-commercialization/)\nfor high density face-to-face interconnect.\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "pin_placement_1"
            },
            {
                "summary": "",
                "content": "id:pin_placement_2\n### Set IO Pin Constraint\n\nThe `set_io_pin_constraint` command sets region constraints for pins according\nto the pin direction or the pin name. This command can be called multiple\ntimes with different constraints.\n\nYou can use the `set_io_pin_constraint` command to restrict pins to the\npin placement grid created with the `define_pin_shape_pattern` command.\n\nIt is possible to use the `-region`, `-group` and `-order` arguments together\nper `set_io_pin_constraint` call, but the `-mirrored_pins` argument should be\ncalled alone.\n\n```tcl\nset_io_pin_constraint \n    [-direction direction]\n    [-pin_names names]\n    [-region edge:interval]\n    [-mirrored_pins names]\n    [-group]\n    [-order]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-direction` | Pin direction (`input`, `output`, `inout`, or `feedthrough`). |\n| `-pin_names` | List of names. Only one of (`-direction`, `-pin_names`) should be used in a single call for the `set_io_pin_constraint` command. |\n| `-region` | Syntax is `-region edge:interval`. The `edge` values are (`top\\|bottom\\|left\\|right`). The `interval` can be the whole edge with the wildcard `*` value or a range of values. |\n| `-mirrored_pins` | List of pins that sets pairs of pins that will be symmetrically placed in the vertical or the horizontal edges. The number of pins in this list **must be even**. For example, in `set_io_pin_constraint -mirrored_pins {pin1 pin2 pin3 pin4 pin5 pin6}`, the pins `pin1` and `pin2` will be placed symmetrically to each other. Same for `pin3` and `pin4`, and for `pin5` and `pin6`. |\n| `-group` | Flag places together on the die boundary the pin list defined in `-pin_names,` similar to the `-group_pins` option on the `place_pins` command. |\n| `-order` | Flag places the pins ordered in ascending x/y position and must be used only when `-group` is also used. |\n\nThe `edge` values are (up, top, bottom, left, right), where `up` is\nthe grid created by `define_pin_shape_pattern`. To restrict pins to the\npin placement grid defined with `define_pin_shape_pattern` use:\n\n-   `-region up:{llx lly urx ury}` to restrict the pins into a specific\n    region in the grid. The region is defined in microns.\n-   `-region up:*` to restrict the pins into the entire region of the grid.\n\nThe `up` option is only available when the pin placement grid is created with\nthe `define_pin_shape_pattern` command.\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "pin_placement_2"
            },
            {
                "summary": "",
                "content": "id:pin_placement_3\n### Clear IO Pin Constraints\n\nThe `clear_io_pin_constraints` command clears all the previously-defined\nconstraints and pin shape patterns created with `set_io_pin_constraint` or\n`define_pin_shape_pattern`.\n\n```tcl\nclear_io_pin_constraints\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "pin_placement_3"
            },
            {
                "summary": "",
                "content": "id:pin_placement_4\n### Set Pin Length\n\nThe `set_pin_length` command defines the length of all vertical and horizontal\npins.\n\n```tcl\nset_pin_length \n    [-hor_length h_length]\n    [-ver_length v_length]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-hor_length` | The length (in microns) of the horizontal pins. |\n| `-ver_length` | The length (in microns) of the vertical pins. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "pin_placement_4"
            },
            {
                "summary": "",
                "content": "id:pin_placement_5\n### Set Pin Extension\n\nThe `set_pin_length_extension` command defines the an extension of the length\nof all vertical and horizontal pins. Note that this command may generate pins\npartially outside the die area.\n\n```tcl\nset_pin_length_extension \n    [-hor_extension h_extension]\n    [-ver_extension v_extension]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-hor_extension` | The length (in microns) for the horizontal pins. |\n| `-ver_extension` | The length (in microns) for the vertical pins. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "pin_placement_5"
            },
            {
                "summary": "",
                "content": "id:pin_placement_6\n### Set Pin Thick Multiplier\n\nThe `set_pin_thick_multiplier` command defines a multiplier for the thickness of all\nvertical and horizontal pins.\n\n```tcl\nset_pin_thick_multiplier \n    [-hor_multiplier h_mult]\n    [-ver_multiplier v_mult]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-hor_multiplier` | The thickness multiplier for the horizontal pins. |\n| `-ver_multiplier` | The thickness multiplier for the vertical pins. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "pin_placement_6"
            },
            {
                "summary": "",
                "content": "id:pin_placement_7\n### Set Simulated Annealing Parameters\n\nThe `set_simulated_annealing` command defines the parameters for simulated annealing pin placement.\n\n```tcl\nset_simulated_annealing\n    [-temperature temperature]\n    [-max_iterations iter]\n    [-perturb_per_iter perturbs]\n    [-alpha alpha]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-temperature` | Temperature parameter. The default value is `1.0`, and the allowed values are floats `[0, MAX_FLOAT]`. |\n| `-max_iterations` | The maximum number of iterations. The default value is `2000`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-perturb_per_iter` | The number of perturbations per iteration. The default value is `0`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-alpha` | The temperature decay factor. The default value is `0.985`, and the allowed values are floats `(0, 1]`. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "pin_placement_7"
            },
            {
                "summary": "",
                "content": "id:pin_placement_8\n### Place Individual Pin\n\nThe `place_pin` command places a specific pin in the specified location with the specified size.\nIt is recommended that individual pins be placed before the `place_pins` command,\nas the routing tracks occupied by these individual pins will be blocked, preventing overlaps.\n\nTo place an individual pin:\n\n```tcl\nplace_pin \n    -pin_name pin_name\n    -layer layer\n    -location {x y}\n    [-pin_size {width height}]\n    [-force_to_die_boundary]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-pin_name` | The name of a pin of the design. |\n| `-layer` | The routing layer where the pin is placed. |\n| `-location` | The center of the pin (in microns). |\n| `-pin_size` | The width and height of the pin (in microns). |\n| `-force_to_die_boundary` | When this flag is enabled, the pin will be snapped to the nearest routing track, next to the die boundary. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "pin_placement_8"
            },
            {
                "summary": "",
                "content": "id:pin_placement_9\n### Place All Pins\n\nUse the following command to perform pin placement:\n\n```tcl\nplace_pins \n    -hor_layers h_layers\n    -ver_layers v_layers\n    [-random_seed seed]\n    [-random]\n    [-corner_avoidance length]\n    [-min_distance distance]\n    [-min_distance_in_tracks]\n    [-exclude region]\n    [-group_pins pin_list]\n    [-annealing]\n    [-write_pin_placement file_name]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-hor_layers` | The layers to create the metal shapes of pins placed in horizontal tracks. It can be a single layer or a list of layer names. |\n| `-ver_layers` | The layers to create the metal shapes of pins placed in vertical tracks. It can be a single layer or a list of layer names. |\n| `-corner_avoidance` | The distance (in microns) from each corner within which pin placement should be avoided. |\n| `-min_distance` | The minimum distance between pins on the die boundary. This distance can be in microns (default) or in number of tracks between each pin. |\n| `-min_distance_in_tracks` | Flag that allows setting the min distance in number of tracks instead of microns. |\n| `-exclude` | A region where pins cannot be placed. Either `top|bottom|left|right:edge_interval`, which is the edge interval from the selected edge; `begin:end` for begin-end of all edges. |\n| `-group_pins` | A list of pins to be placed together on the die boundary. |\n| `-annealing` | Flag to enable simulated annealing pin placement. |\n| `-write_pin_placement` | A file with the pin placement generated in the format of multiple calls for the `place_pin` command. |\n\nThe `exclude` option syntax is `-exclude edge:interval`. The `edge` values are\n(top|bottom|left|right). The `interval` can be the whole edge, with the `*`\nvalue, or a range of values. For example, in `place_pins -hor_layers metal2\n-ver_layers metal3 -exclude top:* -exclude right:15-60.5 -exclude left:*-50`\nthree intervals are excluded: the whole top edge, the right edge from 15\nmicrons to 60.5 microns, and the left edge from its beginning to 50 microns.\n\n#### Developer Arguments\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-random_seed` | Specify the seed for random operations. |\n| `-random` | When this flag is enabled, the pin placement is random. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "pin_placement_9"
            },
            {
                "summary": "",
                "content": "id:pin_placement_10\n# Pin Placer\n### Useful Developer Commands\n\nIf you are a developer, you might find these useful. More details can be found in the [source file](./src/IOPlacer.cpp) or the [swig file](./src/IOPlacer.i).\n\n| Command Name | Description |\n| ----- | ----- |\n| `parse_edge` | Parse edge (top/bottom/left/right). |\n| `parse_direction` | Parse direction. |\n| `parse_excludes_arg` | Parse excluded arguments. |\n| `parse_group_pins_arg` | Parse group pins arguments. | \n| `parse_layer_name` | Parse layer name. |\n| `parse_pin_names` | Parse pin names. |\n| `get_edge_extreme` | Get extremes of edge. |\n| `exclude_intervals` | Set exclude interval. |\n| `add_pins_to_constraint` | Add pins to constrained region. |\n| `add_pins_to_top_layer` | Add pins to top layer. | \n\n\n",
                "id": "pin_placement_10"
            }
        ]
    },
    {
        "source": "global_placement",
        "amount": 4,
        "knowledge": [
            {
                "summary": "",
                "content": "id:global_placement_0\n# Global Placement\n\nThe global placement module in OpenROAD (`gpl`) is based on the open-source\nRePlAce tool, from the paper \"Advancing Solution Quality and Routability Validation\nin Global Placement\".\n\nFeatures:\n\n-   Analytic and nonlinear placement algorithm. Solves\n    electrostatic force equations using Nesterov's method.\n    ([link](https://cseweb.ucsd.edu/~jlu/papers/eplace-todaes14/paper.pdf))\n-   Verified with various commercial technologies and research enablements using OpenDB\n    (7/14/16/28/45/55/65nm).\n-   Verified deterministic solution generation with various compilers and OS.\n-   Supports Mixed-size placement mode.\n\n| <img src=\"./doc/image/adaptec2.inf.gif\" width=350px> | <img src=\"./doc/image/coyote_movie.gif\" width=400px> |\n|:--:|:--:|\n| Visualized examples from ISPD 2006 contest; adaptec2.inf |Real-world Design: Coyote (TSMC16 7.5T) |\n\n",
                "id": "global_placement_0"
            },
            {
                "summary": "",
                "content": "id:global_placement_1\n### Global Placement\n\nWhen using the `-timing_driven` flag, `gpl` does a virtual `repair_design` \nto find slacks and\nweight nets with low slack. It adjusts the worst slacks (modified with \n`-timing_driven_nets_percentage`) using a multiplier (modified with \n`-timing_driven_net_weight_max`). The multiplier\nis scaled from the full value for the worst slack, to 1.0 at the\n`timing_driven_nets_percentage` point. Use the `set_wire_rc` command to set\nresistance and capacitance of estimated wires used for timing.\n\n```\nglobal_placement\n    [-timing_driven]\n    [-routability_driven]\n    [-skip_initial_place]\n    [-incremental]\n    [-bin_grid_count grid_count]\n    [-density target_density]\n    [-init_density_penalty init_density_penalty]\n    [-init_wirelength_coef init_wirelength_coef]\n    [-min_phi_coef min_phi_conef]\n    [-max_phi_coef max_phi_coef]\n    [-overflow overflow]\n    [-initial_place_max_iter initial_place_max_iter]\n    [-initial_place_max_fanout initial_place_max_fanout]\n    [-pad_left pad_left]\n    [-pad_right pad_right]\n    [-verbose_level level]\n    [-force_cpu]\n    [-skip_io]\n    [-routability_check_overflow routability_check_overflow]\n    [-routability_max_density routability_max_density]\n    [-routability_max_bloat_iter routability_max_bloat_iter]\n    [-routability_max_inflation_iter routability_max_inflation_iter]\n    [-routability_target_rc_metric routability_target_rc_metric]\n    [-routability_inflation_ratio_coef routability_inflation_ratio_coef]\n    [-routability_pitch_scale routability_pitch_scale]\n    [-routability_max_inflation_ratio routability_max_inflation_ratio]\n    [-routability_rc_coefficients routability_rc_coefficients]\n    [-timing_driven_net_reweight_overflow]\n    [-timing_driven_net_weight_max]\n    [-timing_driven_nets_percentage]\n```\n\n#### General Arguments\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-timing_driven` | Enable timing-driven mode. See [link](#timing-driven-arguments) for timing-specific arguments. |\n| `-routability_driven` | Enable routability-driven mode. See [link](#routability-driven-arguments) for routability-specific arguments. |\n| `-skip_initial_place` | Skip the initial placement (Biconjugate gradient stabilized, or BiCGSTAB solving) before Nesterov placement. Initial placement improves HPWL by ~5% on large designs. Equivalent to `-initial_place_max_iter 0`. | \n| `-incremental` | Enable the incremental global placement. Users would need to tune other parameters (e.g., `init_density_penalty`) with pre-placed solutions. | \n| `-bin_grid_count` | Set bin grid's counts. The internal heuristic defines the default value. Allowed values are integers `[64,128,256,512,...]`. |\n| `-density` | Set target density. The default value is `0.7` (i.e., 70%). Allowed values are floats `[0, 1]`. |\n| `-init_density_penalty` | Set initial density penalty. The default value is `8e-5`. Allowed values are floats `[1e-6, 1e6]`. |\n| `-init_wirelength_coef` | Set initial wirelength coefficient. The default value is `0.25`. Allowed values are floats. |\n| `-min_phi_coef` | Set `pcof_min` ($\\mu_k$ Lower Bound). The default value is `0.95`. Allowed values are floats `[0.95, 1.05]`. |\n| `-max_phi_coef` | Set `pcof_max` ($\\mu_k$ Upper Bound). Default value is 1.05. Allowed values are `[1.00-1.20, float]`. |\n| `-overflow` | Set target overflow for termination condition. The default value is `0.1`. Allowed values are floats `[0, 1]`. |\n| `-initial_place_max_iter` | Set maximum iterations in the initial place. The default value is 20. Allowed values are integers `[0, MAX_INT]`. |\n| `-initial_place_max_fanout` | Set net escape condition in initial place when $fanout \\geq initial\\_place\\_max\\_fanout$. The default value is 200. Allowed values are integers `[1, MAX_INT]`. |\n| `-pad_left` | Set left padding in terms of number of sites. The default value is 0, and the allowed values are integers `[1, MAX_INT]` |\n| `-pad_right` | Set right padding in terms of number of sites. The default value is 0, and the allowed values are integers `[1, MAX_INT]` |\n| `-verbose_level` | Set verbose level for `gpl`. The default value is 1. Allowed values are integers `[0, 5]`. |\n| `-force_cpu` | Force to use the CPU solver even if the GPU is available. |\n| `-skip_io` | Flag to ignore the IO ports when computing wirelength during placement. The default value is False, allowed values are boolean. |\n\n#### Routability-Driven Arguments\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-routability_check_overflow` | Set overflow threshold for routability mode. The default value is `0.2`, and the allowed values are floats `[0, 1]`. |\n| `-routability_max_density` | Set density threshold for routability mode. The default value is `0.99`, and the allowed values are floats `[0, 1]`. |\n| `-routability_max_bloat_iter` | Set bloat iteration threshold for routability mode. The default value is `1`, and the allowed values are integers `[1, MAX_INT]`.|\n| `-routability_max_inflation_iter` | Set inflation iteration threshold for routability mode. The default value is `4`, and the allowed values are integers `[1, MAX_INT]`. |\n| `-routability_target_rc_metric` | Set target RC metric for routability mode. The default value is `1.25`, and the allowed values are floats. |\n| `-routability_inflation_ratio_coef` | Set inflation ratio coefficient for routability mode. The default value is `2.5`, and the allowed values are floats. |\n| `-routability_max_inflation_ratio` | Set inflation ratio threshold for routability mode. The default value is `2.5`, and the allowed values are floats. |\n| `-routability_rc_coefficients` | Set routability RC coefficients. It comes in the form of a Tcl List `{k1, k2, k3, k4}`. The default value for each coefficient is `{1.0, 1.0, 0.0, 0.0}` respectively, and the allowed values are floats. |\n\n#### Timing-Driven Arguments\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-timing_driven_net_reweight_overflow` | Set overflow threshold for timing-driven net reweighting. Allowed value is a Tcl list of integers where each number is `[0, 100]`. |\n| `-timing_driven_net_weight_max` | Set the multiplier for the most timing-critical nets. The default value is `1.9`, and the allowed values are floats. |\n| `-timing_driven_nets_percentage` | Set the reweighted percentage of nets in timing-driven mode. The default value is 10. Allowed values are floats `[0, 100]`. |\n\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_placement_1"
            },
            {
                "summary": "",
                "content": "id:global_placement_2\n### Useful developer functions\n\nIf you are a developer, you might find these useful. More details can be found in the [source file](./src/replace.cpp) or the [swig file](./src/replace.i).\n\n```tcl\n# debugging global placement \nglobal_placement_debug -pause -update -inst -draw_bins -initial\n\n# adds padding and gets global placement uniform target density\nget_global_placement_uniform_density -pad_left -pad_right \n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "global_placement_2"
            },
            {
                "summary": "",
                "content": "id:global_placement_3\n# Global Placement\n## Using the Python interface to gpl\n\nThis API tries to stay close to the API defined in `C++` class `Replace`\nthat is located [here](include/gpl/Replace.h).\n\nWhen initializing a design, a sequence of Python commands might look like\nthe following:\n\n```python\nfrom openroad import Design, Tech\ntech = Tech()\ntech.readLef(...)\ndesign = Design(tech)\ndesign.readDef(...)\ngpl = design.getReplace()\n```    \n\nHere is an example of some options / configurations to the global placer.\n(See [Replace.h](include/gpl/Replace.h) for a complete list)\n\n```python\ngpl.setInitialPlaceMaxIter(iter)\ngpl.setSkipIoMode(skip_io)\ngpl.setTimingDrivenMode(timing_driven)\ngpl.setTimingNetWeightMax(weight)\n```\n\nThere are some useful Python functions located in the file\n[grt_aux.py](test/grt_aux.py) but these are not considered a part of the *final*\nAPI and they may change.\n\n\n",
                "id": "global_placement_3"
            }
        ]
    },
    {
        "source": "gate_resizing",
        "amount": 15,
        "knowledge": [
            {
                "summary": "",
                "content": "id:gate_resizing_0\n# Gate Resizer\n\nGate Resizer commands are described below.  The `resizer` commands stop when\nthe design area is `-max_utilization util` percent of the core area. `util`\nis between 0 and 100.  The `resizer` stops and reports an error if the max\nutilization is exceeded.\n\n",
                "id": "gate_resizing_0"
            },
            {
                "summary": "",
                "content": "id:gate_resizing_1\n### Set Wire RC\n\nThe `set_wire_rc` command sets the resistance and capacitance used to estimate\ndelay of routing wires.  Separate values can be specified for clock and data\nnets with the `-signal` and `-clock` flags. Without either `-signal` or\n`-clock` the resistance and capacitance for clocks and data nets are set.\n\n```tcl\nset_wire_rc \n    [-clock] \n    [-signal]\n    [-layer layer_name]\n\nor \nset_wire_rc\n    [-resistance res]\n    [-capacitance cap]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-clock` | Enable setting of RC for clock nets. |\n| `-signal` | Enable setting of RC for signal nets. | \n| `-layer` | Use the LEF technology resistance and area/edge capacitance values for the layer. This is used for a default width wire on the layer. |\n| `-resistance` | Resistance per unit length, units are from the first Liberty file read, usually in the form of $\\frac{resistanceUnit}{distanceUnit}$. Usually k\u03a9/\u00b5m. |\n| `-capacitance` | Capacitance per unit length, units are from the first Liberty file read, usually in the form of $\\frac{capacitanceUnit}{distanceUnit}$. Usually pF/\u00b5m. |\n\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "gate_resizing_1"
            },
            {
                "summary": "",
                "content": "id:gate_resizing_2\n### Set Layer RC\n\nThe `set_layer_rc` command can be used to set the resistance and capacitance\nfor a layer or via. This is useful if these values are missing from the LEF file,\nor to override the values in the LEF.\n\n```tcl\nset_layer_rc \n    [-layer layer]\n    [-via via_layer]\n    [-resistance res]\n    [-capacitance cap]\n    [-corner corner]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-layer` | Set layer name to modify. Note that the layer must be a routing layer. |\n| `-via` | Select via layer name. Note that via resistance is per cut/via, not area-based. |\n| `-resistance` | Resistance per unit length, same convention as `set_wire_rc`. |\n| `-capacitance` | Capacitance per unit length, same convention as `set_wire_rc`. |\n| `-corner` | Process corner to use. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "gate_resizing_2"
            },
            {
                "summary": "",
                "content": "id:gate_resizing_3\n### Estimate Parasitics\n\nEstimate RC parasitics based on placed component pin locations. If there are\nno component locations, then no parasitics are added. The resistance and capacitance\nvalues are per distance unit of a routing wire. Use the `set_units` command to check\nunits or `set_cmd_units` to change units. The goal is to represent \"average\"\nrouting layer resistance and capacitance. If the set_wire_rc command is not\ncalled before resizing, then the default_wireload model specified in the first\nLiberty file read or with the SDC set_wire_load command is used to make parasitics.\n\nAfter the `global_route` command has been called, the global routing topology\nand layers can be used to estimate parasitics  with the `-global_routing`\nflag.\n\n```tcl\nestimate_parasitics\n    -placement|-global_routing\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-placement` or `-global_routing` | Either of these flags must be set. Parasitics are estimated based after placement stage versus after global routing stage. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "gate_resizing_3"
            },
            {
                "summary": "",
                "content": "id:gate_resizing_4\n### Set Don't Use\n\nThe `set_dont_use` command removes library cells from consideration by\nthe `resizer` engine and the `CTS` engine. `lib_cells` is a list of cells returned by `get_lib_cells`\nor a list of cell names (`wildcards` allowed). For example, `DLY*` says do\nnot use cells with names that begin with `DLY` in all libraries.\n\n```tcl\nset_dont_use lib_cells\nunset_dont_use lib_cells\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "gate_resizing_4"
            },
            {
                "summary": "",
                "content": "id:gate_resizing_5\n### Set Don't Touch\n\nThe `set_dont_touch` command prevents the resizer commands from\nmodifying instances or nets.\n\n```tcl\nset_dont_touch instances_nets\nunset_dont_touch instances_nets\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "gate_resizing_5"
            },
            {
                "summary": "",
                "content": "id:gate_resizing_6\n### Buffer Ports\n\nThe `buffer_ports -inputs` command adds a buffer between the input and its\nloads.  The `buffer_ports -outputs` adds a buffer between the port driver\nand the output port. Inserting buffers on input and output ports makes\nthe block input capacitances and output drives independent of the block\ninternals.\n\n```tcl\nbuffer_ports \n    [-inputs] \n    [-outputs] \n    [-max_utilization util]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-inputs`, `-outputs` | Insert a buffer between the input and load, output and load respectively. The default behavior is `-inputs` and `-outputs` set if neither is specified. |\n| `-max_utilization` | Defines the percentage of core area used. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "gate_resizing_6"
            },
            {
                "summary": "",
                "content": "id:gate_resizing_7\n### Remove Buffers\n\nUse the `remove_buffers` command to remove buffers inserted by synthesis. This\nstep is recommended before using `repair_design` so that there is more flexibility\nin buffering nets. \n\n```tcl\nremove_buffers\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "gate_resizing_7"
            },
            {
                "summary": "",
                "content": "id:gate_resizing_8\n### Repair Design\n\nThe `repair_design` command inserts buffers on nets to repair max slew, max\ncapacitance and max fanout violations, and on long wires to reduce RC delay in\nthe wire. It also resizes gates to normalize slews.  Use `estimate_parasitics\n-placement` before `repair_design` to estimate parasitics considered\nduring repair. Placement-based parasitics cannot accurately predict\nrouted parasitics, so a margin can be used to \"over-repair\" the design\nto compensate. \n\n```tcl\nrepair_design \n    [-max_wire_length max_length]\n    [-slew_margin slew_margin]\n    [-cap_margin cap_margin]\n    [-max_utilization util]\n    [-verbose]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-max_wire_length` | Maximum length of wires (in microns), defaults to a value that minimizes the wire delay for the wire RC values specified by `set_wire_rc`. |\n| `-slew_margin` | Add a slew margin. The default value is `0`, the allowed values are integers `[0, 100]`. |\n| `-cap_margin` | Add a capactitance margin. The default value is `0`, the allowed values are integers `[0, 100]`. |\n| `-max_utilization` | Defines the percentage of core area used. |\n| `-verbose` | Enable verbose logging on progress of the repair. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "gate_resizing_8"
            },
            {
                "summary": "",
                "content": "id:gate_resizing_9\n### Repair Tie Fanout\n\nThe `repair_tie_fanout` command connects each tie high/low load to a copy\nof the tie high/low cell.\n\n```tcl\nrepair_tie_fanout \n    [-separation dist]\n    [-verbose]\n    lib_port\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-separation` | Tie high/low insts are separated from the load by this value (Liberty units, usually microns). |\n| `-verbose` | Enable verbose logging of repair progress. |\n| `lib_port` | Tie high/low port, which can be a library/cell/port name or object returned by `get_lib_pins`. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "gate_resizing_9"
            },
            {
                "summary": "",
                "content": "id:gate_resizing_10\n### Repair Timing\n\nThe `repair_timing` command repairs setup and hold violations.  It\nshould be run after clock tree synthesis with propagated clocks.\nSetup repair is done before hold repair so that hold repair does not\ncause setup checks to fail.\n\nThe worst setup path is always repaired.  Next, violating paths to\nendpoints are repaired to reduced the total negative slack. \n\n```tcl\nrepair_timing \n    [-setup]\n    [-hold]\n    [-recover_power percent_of_paths_with_slack]\n    [-setup_margin setup_margin]\n    [-hold_margin hold_margin]\n    [-allow_setup_violations]\n    [-skip_pin_swap]\n    [-skip_gate_cloning]\n    [-repair_tns tns_end_percent]\n    [-max_utilization util]\n    [-max_buffer_percent buffer_percent]\n    [-verbose]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-setup` | Repair setup timing. |\n| `-hold` | Repair hold timing. |\n| `-recover_power` | Set the percentage of paths to recover power for. The default value is `0`, and the allowed values are floats `(0, 100]`. |\n| `-setup_margin` | Add additional setup slack margin. |\n| `-hold_margin` | Add additional hold slack margin. |\n| `-allow_setup_violations` | While repairing hold violations, buffers are not inserted that will cause setup violations unless `-allow_setup_violations` is specified. |\n| `-skip_pin_swap` | Flag to skip pin swap. The default value is `False`, and the allowed values are bools. |\n| `-skip_gate_cloning` | Flag to skip gate cloning. The default value is `False`, and the allowed values are bools. |\n| `-repair_tns` | Percentage of violating endpoints to repair (0-100). When `tns_end_percent` is zero (the default), only the worst endpoint is repaired. When `tns_end_percent` is 100, all violating endpoints are repaired. |\n| `-max_utilization` | Defines the percentage of core area used. |\n| `-max_buffer_percent` | Specify a maximum number of buffers to insert to repair hold violations as a percentage of the number of instances in the design. The default value is `20`, and the allowed values are integers `[0, 100]`. |\n| `-verbose` | Enable verbose logging of the repair progress. |\n\nUse`-recover_power` to specify the percent of paths with positive slack which\nwill be considered for gate resizing to save power. It is recommended that\nthis option be used with global routing based parasitics. \n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "gate_resizing_10"
            },
            {
                "summary": "",
                "content": "id:gate_resizing_11\n### Repair Clock Nets\n\nThe `clock_tree_synthesis` command inserts a clock tree in the design\nbut may leave a long wire from the clock input pin to the clock tree\nroot buffer. The `repair_clock_nets` command inserts buffers in the\nwire from the clock input pin to the clock root buffer.\n\n```tcl\nrepair_clock_nets \n    [-max_wire_length max_wire_length]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-max_wire_length` | Maximum length of wires (in microns), defaults to a value that minimizes the wire delay for the wire RC values specified by `set_wire_rc`. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "gate_resizing_11"
            },
            {
                "summary": "",
                "content": "id:gate_resizing_12\n### Repair Clock Inverters\n\nThe repair_clock_inverters command replaces an inverter in the clock\ntree with multiple fanouts with one inverter per fanout.  This\nprevents the inverter from splitting up the clock tree seen by CTS.\nIt should be run before clock_tree_synthesis.\n\n```tcl\nrepair_clock_inverters\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "gate_resizing_12"
            },
            {
                "summary": "",
                "content": "id:gate_resizing_13\n### Report Design Area\n\nThe `report_design_area` command reports the area of the design's components\nand the utilization.\n\n```tcl\nreport_design_area\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "gate_resizing_13"
            },
            {
                "summary": "",
                "content": "id:gate_resizing_14\n# Gate Resizer\n### Useful Developer Commands\n\nIf you are a developer, you might find these useful. More details can be found in the [source file](./src/Resizer.cc) or the [swig file](./src/Resizer.i).\n\n| Command Name | Description |\n| ----- | ----- |\n| `repair_setup_pin` | Repair setup pin violation. |\n| `check_parasitics` | Check if the `estimate_parasitics` command has been called. |\n| `parse_time_margin_arg` | Get the raw value for timing margin (e.g. `slack_margin`, `setup_margin`, `hold_margin`) |\n| `parse_percent_margin_arg` | Get the above margin in perentage format. |\n| `parse_margin_arg` | Same as `parse_percent_margin_arg`. |\n| `parse_max_util` | Check maximum utilization. |\n| `parse_max_wire_length` | Get maximum wirelength. |\n| `check_corner_wire_caps` | Check wire capacitance for corner. |\n| `check_max_wire_length` | Check if wirelength is allowed by rsz for minimum delay. |\n| `dblayer_wire_rc` | Get layer RC values. |\n| `set_dblayer_wire_rc` | Set layer RC values. |\n\n",
                "id": "gate_resizing_14"
            }
        ]
    },
    {
        "source": "floorplan_initialization",
        "amount": 3,
        "knowledge": [
            {
                "summary": "",
                "content": "id:floorplan_initialization_0\n# Restructure\n\nThe restructure module in OpenROAD (`rmp`) is based on \nan interface to ABC for local resynthesis. The package allows\nlogic restructuring that targets area or timing. It extracts a cloud of logic\nusing the OpenSTA timing engine, and passes it to ABC through `blif` interface.\nMultiple recipes for area or timing are run to obtain multiple structures from ABC;\nthe most desirable among these is used to improve the netlist.\nThe ABC output is read back by a `blif` reader which is integrated to OpenDB.\n`blif` writer and reader also support constants from and to OpenDB. Reading\nback of constants requires insertion of tie cells which should be provided\nby the user as per the interface described below.\n\n",
                "id": "floorplan_initialization_0"
            },
            {
                "summary": "",
                "content": "id:floorplan_initialization_1\n### Area Mode\n\n```tcl\nrestructure \n    -liberty_file liberty_file\n    -target area\n    -tielo_pin  tielo_pin_name\n    -tiehi_pin  tiehi_pin_name\n    -work_dir  workdir_name\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\nRestructuring can be done in two modes: area or delay.\n\n",
                "id": "floorplan_initialization_1"
            },
            {
                "summary": "",
                "content": "id:floorplan_initialization_2\n# Restructure\n## Example scripts\n\nExample scripts on running `rmp` for a sample design of `gcd` as follows:\n\n```tcl\n./test/gcd_restructure.tcl\n```\n\n\n",
                "id": "floorplan_initialization_2"
            }
        ]
    },
    {
        "source": "gui",
        "amount": 15,
        "knowledge": [
            {
                "summary": "",
                "content": "id:gui_0\n# Graphical User Interface\n\nThe graphical user interface can be access by launching OpenROAD with ``-gui`` or by opening it from the command-line with ``gui::show``.\n\n",
                "id": "gui_0"
            },
            {
                "summary": "",
                "content": "id:gui_1\n### Add buttons to the toolbar\n\n```\ncreate_toolbar_button [-name name]\n                      -text button_text\n                      -script tcl_script \n                      [-echo]\n```\n\nReturns: name of the new button, either ``name`` or ``buttonX``.\n\nOptions description:\n- ``button_text``: The text to put on the button.\n- ``tcl_script``: The tcl script to evaluate when the button is pressed.\n- ``name``: (optional) name of the button, used when deleting the button.\n- ``echo``: (optional) indicate that the commands in the ``tcl_script`` should be echoed in the log.\n\nTo remove the button: \n\n```\ngui::remove_toolbar_button name\n```\n\n## Commands\n\n",
                "id": "gui_1"
            },
            {
                "summary": "",
                "content": "id:gui_2\n### Add items to the menubar\n\n```\ncreate_menu_item [-name name]\n                 [-path menu_path]\n                 -text item_text\n                 -script tcl_script\n                 [-shortcut key_shortcut] \n                 [-echo]\n```\n\nReturns: name of the new item, either ``name`` or ``actionX``.\n\nOptions description:\n- ``item_text``: The text to put on the item.\n- ``tcl_script``: The tcl script to evaluate when the button is pressed.\n- ``name``: (optional) name of the item, used when deleting the item.\n- ``menu_path``: (optional) Menu path to place the new item in (hierarchy is separated by /), defaults to \"Custom Scripts\", but this can also be \"Tools\" or \"New menu/New submenu\".\n- ``key_shortcut``: (optional) key shortcut to trigger this item.\n- ``echo``: (optional) indicate that the commands in the ``tcl_script`` should be echoed in the log.\n\nTo remove the item: \n\n```\ngui::remove_menu_item name\n```\n\n\n## Commands\n\n",
                "id": "gui_2"
            },
            {
                "summary": "",
                "content": "id:gui_3\n### Save screenshot of layout\n\nThis command can be both be used when the GUI is active and not active.\n\n```\nsave_image [-resolution microns_per_pixel]\n           [-area {x0 y0 x1 y1}]\n           [-width width]\n           [-display_option {option value}]\n           filename\n```\n\nOptions description:\n- ``filename`` path to save the image to.\n- ``x0, y0`` first corner of the layout area (in microns) to be saved, default is to save what is visible on the screen unless called when gui is not active and then it selected the whole block.\n- ``x1, y1`` second corner of the layout area (in microns) to be saved, default is to save what is visible on the screen unless called when gui is not active and then it selected the whole block.\n- ``microns_per_pixel`` resolution in microns per pixel to use when saving the image, default will match what the GUI has selected.\n- ``width`` width of the output image in pixels, default will be computed from the resolution. Cannot be used with ``-resolution``.\n- ``option`` specific setting for a display option to show or hide specific elements. For example, to hide metal1 ``-display_option {Layers/metal1 false}``, to show routing tracks ``-display_option {Tracks/Pref true}``, or to show everthing ``-display_option {* true}``.\n\n## Commands\n\n",
                "id": "gui_3"
            },
            {
                "summary": "",
                "content": "id:gui_4\n### Save screenshot of clock trees\n\n```\nsave_clocktree_image filename\n                     -clock clock_name\n                     [-width width]\n                     [-height height]\n                     [-corner corner]\n```\n\nOptions description:\n- ``filename`` path to save the image to.\n- ``-clock`` name of the clock to save the clocktree for.\n- ``-corner`` name of the timing corner to save the clocktree for, default to the first corner defined.\n- ``-height`` height of the image in pixels, defaults to the height of the GUI widget.\n- ``-width`` width of the image in pixels, defaults to the width of the GUI widget.\n\n## Commands\n\n",
                "id": "gui_4"
            },
            {
                "summary": "",
                "content": "id:gui_5\n### Selecting objects\n\n```\nselect -type object_type\n       [-name glob_pattern]\n       [-filter attribute=value]\n       [-case_insensitive]\n       [-highlight group]\n```\n\nReturns: number of objects selected.\n\nOptions description:\n- ``object_type``: name of the object type. For example, ``Inst`` for instances, ``Net`` for nets, and ``DRC`` for DRC violations.\n- ``glob_pattern``: (optional) filter selection by the specified name. For example, to only select clk nets ``*clk*``. Use ``-case_insensitive`` to filter based on case insensitive instead of case sensitive.\n- ``attribute=value``: (optional) filter selection based on the objects' properties. ``attribute`` represents the property's name and ``value`` the property's value. In case the property holds a collection (e. g. BTerms in a Net) or a table (e. g. Layers in a Generate Via Rule) ``value`` can be any element within those. A special case exists for checking whether a collection is empty or not by using the value ``CONNECTED``. This can be useful to select a specific group of elements (e. g. BTerms=CONNECTED will select only Nets connected to Input/Output Pins).\n- ``group``: (optional) add the selection to the specific highlighting group. Values can be 0 to 7.\n\n## Commands\n\n",
                "id": "gui_5"
            },
            {
                "summary": "",
                "content": "id:gui_6\n### Displaying timing cones\n\n```\ndisplay_timing_cone pin\n                    [-fanin]\n                    [-fanout]\n                    [-off]\n```\n\nOptions description:\n- ``pin``: name of the instance or block pin.\n- ``fanin``: (optional) display the fanin timing cone.\n- ``fanout``: (optional) display the fanout timing cone.\n- ``off``: (optional) remove the timing cone.\n\n## Commands\n\n",
                "id": "gui_6"
            },
            {
                "summary": "",
                "content": "id:gui_7\n### Limit drawing to specific nets\n\n```\nfocus_net net\n          [-remove]\n          [-clear]\n```\n\nOptions description:\n- ``pin``: name of the net.\n- ``remove``: (optional) removes the net from from the focus.\n- ``clear``: (optional) clears all nets from focus.\n\n\n## Commands\n\n",
                "id": "gui_7"
            },
            {
                "summary": "",
                "content": "id:gui_8\n### Support\n\nDetermine is the GUI is active:\n\n```\ngui::enabled\n```\n\nAnnounce to the GUI that a design was loaded \n(note: this is only needed when the design was loaded through the odb API and not via ``read_def`` or ``read_db``):\n\n```\ngui::design_created\n```\n\nTo load the results of a DRC report:\n\n```\ngui::load_drc filename\n```\n\n## Commands\n\n",
                "id": "gui_8"
            },
            {
                "summary": "",
                "content": "id:gui_9\n### Opening and closing\n\nTo open the GUI from the command-line (this command does not return until the GUI is closed):\n\n```\ngui::show\ngui::show script\ngui::show script interactive\n```\n\nOptions description:\n- ``script`` TCL script to evaluate in the GUI.\n- ``interactive`` indicates if true the GUI should open in an interactive session (default), or if false that the GUI would execute the script and return to the terminal.\n\nTo close the GUI and return to the command-line:\n\n```\ngui::hide\n```\n\n## Commands\n\n",
                "id": "gui_9"
            },
            {
                "summary": "",
                "content": "id:gui_10\n### Layout navigation\n\nTo fit the whole layout in the window:\n\n```\ngui::fit\n```\n\nTo zoom in our out to a specific region:\n\n```\ngui::zoom_to x0 y0 x1 y1\n```\n\nOptions description:\n- ``x0, y0`` first corner of the layout area in microns.\n- ``x1, y1`` second corner of the layout area in microns.\n\nTo zoom in the layout:\n\n```\ngui::zoom_in\ngui::zoom_in x y\n```\n\nOptions description:\n- ``x, y`` new center of layout.\n\nTo zoom out the layout:\n\n```\ngui::zoom_out\ngui::zoom_out x y\n```\n\nOptions description:\n- ``x, y`` new center of layout.\n\nTo move the layout to new area:\n\n```\ngui::center_at x y\n```\n\nOptions description:\n- ``x, y`` new center of layout.\n\nTo change the resolution to a specific value:\n\n```\ngui::set_resolution resolution\n```\n\nOptions description:\n- ``resolution`` database units per pixel.\n\n## Commands\n\n",
                "id": "gui_10"
            },
            {
                "summary": "",
                "content": "id:gui_11\n### Selections\n\nTo add a single net to the selected items:\n\n```\ngui::selection_add_net name\n```\n\nOptions description:\n- ``name`` name of the net to add.\n\nTo add several nets to the selected items:\n\n```\ngui::selection_add_nets name_regex\n```\n\nOptions description:\n- ``name_regex`` regular expression of the net names to add.\n\nTo add a single instance to the selected items:\n\n```\ngui::selection_add_inst name\n```\n\nOptions description:\n- ``name`` name of the instance to add.\n\nTo add several instances to the selected items:\n\n```\ngui::selection_add_insts name_regex\n```\n\nOptions description:\n- ``name_regex`` regular expression of the instance names to add.\n\nTo add items at a specific point or in an area:\n\n```\ngui::select_at x y\ngui::select_at x y append\ngui::select_at x0 y0 x1 y1\ngui::select_at x0 y0 x1 y1 append\n```\n\nOptions description:\n- ``x, y`` point in the layout area in microns.\n- ``x0, y0`` first corner of the layout area in microns.\n- ``x1, y1`` second corner of the layout area in microns.\n- ``append`` if ``true`` (the default value) append the new selections to the current selection list, else replace the selection list with the new selections.\n\nTo navigate through multiple selected items:\n\n```\ngui::select_next\ngui::select_previous\n```\n\nReturns: current index of the selected item.\n\nTo clear the current set of selected items:\n\n```\ngui::clear_selections\n```\n\nTo get the properties for the current selection in the Inspector:\n\n```\ngui::get_selection_property name\n```\n\nOptions description:\n- ``name`` name of the property. For example, ``Type`` for object type or ``bbox`` for the bounding box of the object.\n\nTo animate the current selection in the Inspector:\n\n```\ngui::selection_animate\ngui::selection_animate repeat\n```\n\nOptions description:\n- ``repeat``: indicate how many times the animation should repeat, default value is 0 repeats. If the value is 0, the animation will repeat indefinitely.\n\n## Commands\n\n",
                "id": "gui_11"
            },
            {
                "summary": "",
                "content": "id:gui_12\n### Highlighting\n\nTo highlight a net:\n\n```\ngui::highlight_net name\ngui::highlight_net name highlight_group\n```\n\nOptions description:\n- ``name`` name of the net to highlight.\n- ``highlight_group`` group to add the highlighted net to, defaults to ``0``, valid groups are ``0 - 7``.\n\nTo highlight an instance:\n\n```\ngui::highlight_inst name\ngui::highlight_inst name highlight_group\n```\n\nOptions description:\n- ``name`` name of the instance to highlight.\n- ``highlight_group`` group to add the highlighted instance to, defaults to ``0``, valid groups are ``0 - 7``.\n\nTo clear the highlight groups:\n\n```\ngui::clear_highlights\ngui::clear_highlights highlight_group\n```\n\nOptions description:\n- ``highlight_group`` group to clear, defaults to ``0``, valid groups are ``-1 - 7``. Use ``-1`` to clear all groups.\n\n## Commands\n\n",
                "id": "gui_12"
            },
            {
                "summary": "",
                "content": "id:gui_13\n### Rulers\n\nTo add a ruler to the layout:\n\n1. either press ``k`` and use the mouse to place it visually.\nTo disable snapping for the ruler when adding, hold the ``Ctrl`` key, and to allow non-horizontal or vertical snapping when completing the ruler hold the ``Shift`` key.\n\n2. or use the command:\n\n```\ngui::add_ruler x0 y0 x1 y1\ngui::add_ruler x0 y0 x1 y1 label\ngui::add_ruler x0 y0 x1 y1 label name\ngui::add_ruler x0 y0 x1 y1 label name euclidian\n```\n\nReturns: name of the newly created ruler.\n\nOptions description: \n- ``x0, y0`` first end point of the ruler in microns.\n- ``x1, y1`` second end point of the ruler in microns.\n- ``label`` text label for the ruler.\n- ``name`` name of the ruler.\n- ``euclidian`` ``1`` for euclidian ruler, and ``0`` for regular ruler.\n\nTo remove a single ruler:\n\n```\ngui::delete_ruler name\n```\n\nOptions description: \n- ``name`` name of the ruler.\n\nTo remove all the rulers:\n\n```\ngui::clear_rulers\n```\n\n## Commands\n\n",
                "id": "gui_13"
            },
            {
                "summary": "",
                "content": "id:gui_14\n### Heat Maps\n\nThe currently availble heat maps are:\n\n- ``Power``\n- ``Routing``\n- ``Placement``\n- ``IRDrop``\n- ``RUDY`` [^RUDY]\n\nTo control the settings in the heat maps:\n\n```\ngui::set_heatmap name option\ngui::set_heatmap name option value\n```\n\nOptions description:\n- ``name`` is the name of the heatmap.\n- ``option`` is the name of the option to modify. If option is ``rebuild`` the map will be destroyed and rebuilt.\n- ``value`` is the new value for the specified option. This is not used when rebuilding map.\n\nThese options can also be modified in the GUI by double-clicking the underlined display control for the heat map.\n\n\nTo save the raw data from the heat maps ins a comma separated value (CSV) format:\n\n```\ngui::dump_heatmap name filename\n```\n\nOptions description: \n- ``name`` is the name of the heatmap.\n- ``filename`` path to the file to write the data to.\n\n[^RUDY]: RUDY means Rectangular Uniform wire DensitY, which can predict the routing density very rough and quickly. You can see this notion in [this paper](https://past.date-conference.com/proceedings-archive/2007/DATE07/PDFFILES/08.7_1.PDF) \n\n\n\n## Commands\n\n",
                "id": "gui_14"
            }
        ]
    },
    {
        "source": "antenna_rule_checker",
        "amount": 2,
        "knowledge": [
            {
                "summary": "",
                "content": "id:antenna_rule_checker_0\n# Antenna Rule Checker\n\nThis tool checks antenna violations and generates a report to indicate\nviolated nets. See LEF/DEF 5.8 Language Reference, Appendix C,\n\"Calculating and Fixing Process Antenna Violations\" (p.389) \nfor a [description](https://coriolis.lip6.fr/doc/lefdef/lefdefref/lefdefref.pdf) of antenna violations.\n\n\nAbbreviations Index:\n\n-   `PAR`: Partial Area Ratio\n-   `CAR`: Cumulative Area Ratio\n-   `Area`: Gate Area\n-   `S. Area`: Side Diffusion Area\n-   `C. Area`: Cumulative Gate Area\n-   `C. S. Area`: Cumulative Side (Diffusion) Area\n\nAntenna violations can be repaired after global routing with the `repair_design` command.\n\n",
                "id": "antenna_rule_checker_0"
            },
            {
                "summary": "",
                "content": "id:antenna_rule_checker_1\n# Antenna Rule Checker\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-verbose` | Report all antenna calculations for violating nets. |\n| `-net` | Check antennas on the specified net. |\n\n\n",
                "id": "antenna_rule_checker_1"
            }
        ]
    },
    {
        "source": "metal_fill",
        "amount": 2,
        "knowledge": [
            {
                "summary": "",
                "content": "id:metal_fill_0\n# Metal fill\n\nThis module inserts floating metal fill shapes to meet metal density\ndesign rules while obeying DRC constraints. It is driven by a `json`\nconfiguration file.\n\n",
                "id": "metal_fill_0"
            },
            {
                "summary": "",
                "content": "id:metal_fill_1\n# Metal fill\n#### Options\n\n| Switch Name | Description | \n| ----- | ----- |\n| `-rules` | Specify `json` rule file. |\n| `-area` | Optional. If not specified, the core area will be used. |\n\n",
                "id": "metal_fill_1"
            }
        ]
    },
    {
        "source": "detailed_placement",
        "amount": 8,
        "knowledge": [
            {
                "summary": "",
                "content": "id:detailed_placement_0\n# Detailed Placement\n\nThe detailed placement module in OpenROAD (`dpl`) is based on OpenDP, or \nOpen-Source Detailed Placement Engine. Its key features are: \n\n-   Fence region.\n-   Fragmented ROWs.\n\n",
                "id": "detailed_placement_0"
            },
            {
                "summary": "",
                "content": "id:detailed_placement_1\n### Detailed Placement\n\nThe `detailed_placement` command performs detailed placement of instances\nto legal locations after global placement.\n\n```tcl\ndetailed_placement\n    [-max_displacement disp|{disp_x disp_y}]\n    [-disallow_one_site_gaps]\n    [-report_file_name filename]\n```\n\n#### Options\n\n| Switch Name | Description | \n| ----- | ----- |\n| `-max_displacement` | Max distance that an instance can be moved (in microns) when finding a site where it can be placed. Either set one value for both directions or set `{disp_x disp_y}` for individual directions. The default values are `{0, 0}`, and the allowed values within are integers `[0, MAX_INT]`. |\n| `-disallow_one_site_gaps` | Disable one site gap during placement check. |\n| `-report_file_name` | File name for saving the report to (e.g. `report.json`. |\n\n## Commands\n\n",
                "id": "detailed_placement_1"
            },
            {
                "summary": "",
                "content": "id:detailed_placement_2\n### Set Placement Padding\n\nThe `set_placement_padding` command sets left and right padding in multiples\nof the row site width. Use the `set_placement_padding` command before\nlegalizing placement to leave room for routing. Use the `-global` flag\nfor padding that applies to all instances. Use  `-instances`\nfor instance-specific padding.  The instances `insts` can be a list of instance\nnames, or an instance object returned by the SDC `get_cells` command. To\nspecify padding for all instances of a common master, use the `-filter`\n\"ref_name == <name>\" option to `get_cells`.\n\n```tcl\nset_placement_padding   \n    -global|-masters masters|-instances insts\n    [-right site_count]\n    [-left site_count]\n```\n\n#### Options\n\n```{warning}\nEither one of these flags must be set: `-global | -masters | -instances`.\nThe order of preference is `global > masters > instances`\n```\n\n| Switch Name | Description | \n| ----- | ----- |\n| `-global` | Set padding globally using `left` and `right` values. |\n| `-masters` |  Set padding only for these masters using `left` and `right` values. | \n| `-instances` | For `-instances`, you will set padding only for these insts using `left` and `right` values. |\n| `-left` | Left padding (in site count). |\n| `-right` | Right padding (in site count). |\n| `instances` | Set padding for these list of instances. Not to be confused with the `-instances` switch above. |\n\n## Commands\n\n",
                "id": "detailed_placement_2"
            },
            {
                "summary": "",
                "content": "id:detailed_placement_3\n### Filler Placement\n\nThe `filler_placement` command fills gaps between detail-placed instances\nto connect the power and ground rails in the rows. `filler_masters` is a\nlist of master/macro names to use for filling the gaps. Wildcard matching\nis supported, so `FILL*` will match, e.g., `FILLCELL_X1 FILLCELL_X16 FILLCELL_X2\nFILLCELL_X32 FILLCELL_X4 FILLCELL_X8`.  To specify a different naming prefix\nfrom `FILLER_` use `-prefix <new prefix>`.\n\n```tcl \nfiller_placement\n    [-prefix prefix]\n    filler_masters\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-prefix` | Prefix to name the filler cells. The default value is `FILLER_`. |\n| `filler_masters` | Filler master cells. | \n\n## Commands\n\n",
                "id": "detailed_placement_3"
            },
            {
                "summary": "",
                "content": "id:detailed_placement_4\n### Remove Fillers\n\nThis command removes all filler cells.\n\n```tcl\nremove_fillers \n```\n\nNo arguments are needed for this function. \n\n## Commands\n\n",
                "id": "detailed_placement_4"
            },
            {
                "summary": "",
                "content": "id:detailed_placement_5\n### Check Placement\n\nThe `check_placement` command checks the placement legality. It returns\n`0` if the placement is legal.\n\n```tcl\ncheck_placement\n    [-verbose]\n    [-disallow_one_site_gaps]\n    [-report_filename filename]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-verbose` | Enable verbose logging. |\n| `-disallow_one_site_gaps` | Disable one site gap during placement check. |\n| `-report_file_name` | File name for saving the report to (e.g. `report.json`. |\n\n## Commands\n\n",
                "id": "detailed_placement_5"
            },
            {
                "summary": "",
                "content": "id:detailed_placement_6\n### Optimize Mirroring\n\nThe `optimize_mirroring` command mirrors instances about the Y axis in\na weak attempt to reduce the total half-perimeter wirelength (HPWL).\n\n```tcl\noptimize_mirroring\n```\n\nNo arguments are needed for this function. \n\n## Commands\n\n",
                "id": "detailed_placement_6"
            },
            {
                "summary": "",
                "content": "id:detailed_placement_7\n# Detailed Placement\n## Authors\n\n-   SangGi Do and Mingyu Woo (respective Ph. D. advisors: Seokhyeong Kang,\n    Andrew B. Kahng).\n-   Rewrite and port to OpenDB/OpenROAD by James Cherry, Parallax Software\n\n",
                "id": "detailed_placement_7"
            }
        ]
    },
    {
        "source": "macro_placement",
        "amount": 2,
        "knowledge": [
            {
                "summary": "",
                "content": "id:macro_placement_0\n# Macro Placement\n\nThe macro placement module in OpenROAD (`mpl`) is based on \nTritonMacroPlacer, an open-source ParquetFP-based macro cell placer.\nThe macro placer places macros/blocks honoring halos, channels\nand cell row \"snapping\".\nRun `global_placement` before macro placement.\n\nApproximately $\\Bigl\\lceil [{\\frac{numMacros}{3}}]^{1.5} \\Bigr\\rceil$ quadrisections\nof the initial placed mixed-size layout are explored and packed using\nParquetFP-based annealing. The best resulting floorplan according to a\nheuristic evaluation function is kept.\n\n",
                "id": "macro_placement_0"
            },
            {
                "summary": "",
                "content": "id:macro_placement_1\n# Macro Placement\n### Useful developer functions\n\nIf you are a developer, you might find these useful. More details can be found in the [source file](./src/MacroPlacer.cpp) or the [swig file](./src/MacroPlacer.i).\n\n| Command Name | Description |\n| ----- | ----- |\n| `macro_placement_debug` | Macro placement debugging. Note that GUI must be present for this command, otherwise a segfault will occur. | \n\n",
                "id": "macro_placement_1"
            }
        ]
    },
    {
        "source": "hierarchical_macro_placement",
        "amount": 4,
        "knowledge": [
            {
                "summary": "",
                "content": "id:hierarchical_macro_placement_0\n# Hierarchical Macro Placement\n\nA hierarchical automatic macro placer for large-scale complex IP blocks, \"Hier-RTLMP\".\nThis tool builds on the existing RTLMP (`mpl`) framework, adopting a multilevel physical \nplanning approach that exploits the hierarchy and data flow inherent in the design RTL.\n\n",
                "id": "hierarchical_macro_placement_0"
            },
            {
                "summary": "",
                "content": "id:hierarchical_macro_placement_1\n### Hier-RTLMP algorithm\n\n```tcl\nrtl_macro_placer \n    [-max_num_macro max_num_macro]\n    [-min_num_macro min_num_macro]\n    [-max_num_inst max_num_inst]  \n    [-min_num_inst min_num_inst] \n    [-tolerance tolerance]     \n    [-max_num_level max_num_level] \n    [-coarsening_ratio coarsening_ratio]\n    [-num_bundled_ios num_bundled_ios]\n    [-large_net_threshold large_net_threshold]\n    [-signature_net_threshold signature_net_threshold]\n    [-halo_width halo_width] \n    [-fence_lx fence_lx] \n    [-fence_ly fence_ly]\n    [-fence_ux fence_ux]\n    [-fence_uy fence_uy]\n    [-area_weight area_weight] \n    [-outline_weight outline_weight] \n    [-wirelength_weight wirelength_weight]\n    [-guidance_weight guidance_weight]\n    [-fence_weight fence_weight] \n    [-boundary_weight boundary_weight]\n    [-notch_weight notch_weight]\n    [-macro_blockage_weight macro_blockage_weight]\n    [-pin_access_th pin_access_th]\n    [-target_util target_util]\n    [-target_dead_space target_dead_space]\n    [-min_ar min_ar]\n    [-snap_layer snap_layer]\n    [-bus_planning]\n    [-report_directory report_directory]\n    [-write_macro_placement file_name]\n```\n\n#### Generic Parameters\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-max_num_macro`, `-min_num_macro` | Maximum/minimum number of macros in a cluster. The default value is `0` for both, and the allowed values are integers `[0, MAX_INT]`. |\n| `-max_num_inst`, `-min_num_inst` | Maximum/minimum number of standard cells in a cluster. The default value is `0` for both, and the allowed values are integers `[0, MAX_INT]`. |\n| `-tolerance` | Add a margin to the minimum and maximum number of macros/std cells in a cluster. For min, we multiply by (1 - `tol`), and for the max (1 + `tol`). This is to improve the robustness of hierarchical clustering. The allowed values are floats `[0, 1)`, and the default value is `0.1`. |\n| `-max_num_level` | Maximum depth of physical hierarchical tree. The default value is `2`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-coarsening_ratio` | The larger the coarsening_ratio, the faster the convergence process. The allowed values are floats, and the default value is `10.0`. |\n| `-num_bundled_ios` | Specifies the number of bundled pins for the left, right, top, and bottom boundaries. The default value is `3`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-large_net_threshold` | Ignore nets with many connections during clustering, such as global nets. The default value is `50`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-signature_net_threshold` | Minimum number of connections between two clusters to be identified as connected. The default value is `50`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-halo_width` | Horizontal/vertical halo around macros (microns). The allowed values are floats, and the default value is `0.0`. |\n| `-fence_lx`, `-fence_ly`, `-fence_ux`, `-fence_uy` | Defines the global fence bounding box coordinates. The default values are the core area coordinates). |\n| `-pin_access_th` | Specifies the pin access threshold value of macros. The default value is `0.0`, and the allowed values are floats [0,1]. |\n| `-target_util` | Specifies the target utilization of `MixedCluster` and has higher priority than target_dead_space. The allowed values are floats, and the default value is `0.25`. |\n| `-target_dead_space` | Specifies the target dead space percentage, which influences the utilization of `StandardCellCluster`. The allowed values are floats, and the default value is `0.05`. |\n| `-min_ar` | Specifies the minimum aspect ratio $a$, or the ratio of its width to height of a `StandardCellCluster` from $[a, \\frac{1}{a}]$. The allowed values are floats, and the default value is `0.33`. |\n| `-snap_layer` | Snap macro origins to this routing layer track. The default value is 4, and the allowed values are integers `[1, MAX_LAYER]`). |\n| `-bus_planning` | Flag to enable bus planning. We recommend to enable bus planning for technologies with very limited routing layers such as SKY130 and GF180. As for technologies such as NanGate45 and ASAP7, we recommend to keep it disabled. |\n| `-report_directory` | Save reports to this directory. |\n| `-write_macro_placement` | Generates a file with the placement of the macros placed by HierRTLMP flow in the format of multiple calls for the `place_macro` command. |\n\n\n#### Simulated Annealing Weight parameters\n\nDo note that while action probabilities are normalized to 1.0, the weights are not necessarily normalized. \n\n| Switch Name | Description | \n| ----- | ----- |\n| `-area_weight` | Weight for the area of current floorplan.  The allowed values are floats, and the default value is `0.1`. |\n| `-outline_weight` | Weight for violating the fixed outline constraint, meaning that all clusters should be placed within the shape of their parent cluster.  The allowed values are floats, and the default value is `100.0`. |\n| `-wirelength_weight` | Weight for half-perimeter wirelength.  The allowed values are floats, and the default value is `100.0`. |\n| `-guidance_weight` | Weight for guidance cost or clusters being placed near specified regions if users provide such constraints.  The allowed values are floats, and the default value is `10.0`. |\n| `-fence_weight` | Weight for fence cost, or how far the macro is from zero fence violation.  The allowed values are floats, and the default value is `10.0`. |\n| `-boundary_weight` | Weight for the boundary, or how far the hard macro clusters are from boundaries. Note that mixed macro clusters are not pushed, thus not considered in this cost.  The allowed values are floats, and the default value is `50.0`. |\n| `-notch_weight` | Weight for the notch, or the existence of dead space that cannot be used for placement & routing. Note that this cost applies only to hard macro clusters.  The allowed values are floats, and the default value is `10.0`. |\n| `-macro_blockage_weight` | Weight for macro blockage, or the overlapping instances of the macro.  The allowed values are floats, and the default value is `10.0`. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "hierarchical_macro_placement_1"
            },
            {
                "summary": "",
                "content": "id:hierarchical_macro_placement_2\n### Write Macro Placement\n\nCommand to generate a file with the placement of the macros in the design using multiple calls for the `place_macro` command:\n\n```tcl\nwrite_macro_placement file_name\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "hierarchical_macro_placement_2"
            },
            {
                "summary": "",
                "content": "id:hierarchical_macro_placement_3\n# Hierarchical Macro Placement\n## Example scripts\n\nExample of a script demonstrating how to run `mpl2` on a sample design of `bp_fe_top` as follows:\n\n```shell\n./test/bp_fe_top.tcl\n```\n\n",
                "id": "hierarchical_macro_placement_3"
            }
        ]
    },
    {
        "source": "parasitics_extraction",
        "amount": 10,
        "knowledge": [
            {
                "summary": "",
                "content": "id:parasitics_extraction_0\n# Parasitics Extraction\n\nThe parasitics extraction module in OpenROAD (`rcx`) is based on the \nopen-source OpenRCX, a Parasitic Extraction (PEX, or RCX) tool that \nworks on OpenDB design APIs.\nIt extracts routed designs based on the LEF/DEF layout model.\n\nOpenRCX extracts both Resistance and Capacitance for wires, based on coupling\ndistance to the nearest wire and the track density context over and/or under the\nwire of interest, as well as cell\nabstracts.  The capacitance and resistance measurements are based on equations\nof coupling distance interpolated on exact measurements from a calibration\nfile, called the Extraction Rules file. The Extraction Rules file (RC technology\nfile) is generated once for every process node and corner, using\na provided utility for DEF wire pattern generation and regression modeling.\n\nOpenRCX stores resistance, coupling capacitance and ground (i.e., grounded) capacitance\non OpenDB objects with direct pointers to the associated wire and via db\nobjects. Optionally, OpenRCX can generate a `.spef` file.\n\n",
                "id": "parasitics_extraction_0"
            },
            {
                "summary": "",
                "content": "id:parasitics_extraction_1\n### Define Process Corner\n\n```tcl\ndefine_process_corner \n    [-ext_model_index index]\n    filename\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-ext_model_index` | Extraction model index. Expects 2 inputs (an index, and corner name). |\n| `filename` | Path to process corner file `rcx_patterns.rules`. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "parasitics_extraction_1"
            },
            {
                "summary": "",
                "content": "id:parasitics_extraction_2\n### Extract Parasitics\n\nThe `extract_parasitics` command performs parasitic extraction based on the\nrouted design. If there are no information on routed design, no parasitics are\nreturned. \n\n```tcl\nextract_parasitics\n    [-ext_model_file filename]      \n    [-corner_cnt count]            \n    [-max_res ohms]               \n    [-coupling_threshold fF]        \n    [-debug_net_id id]\n    [-lef_res]                     \n    [-cc_model track]             \n    [-context_depth depth]      \n    [-no_merge_via_res]       \n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-ext_model_file` | Specify the Extraction Rules file used for the extraction. |\n| `-corner_cnt` | Defines the number of corners used during the parasitic extraction. |\n| `-max_res` | Combines resistors in series up to the threshold value. |\n| `-coupling_threshold` | Coupling below this threshold is grounded. The default value is `0.1`, units are in `fF`, accepted values are floats. |\n| `-debug_net_id` | *Developer Option*: Net ID to evaluate. |\n| `-lef_res` | Override LEF resistance per unit. |\n| `-cc_model` | Specify the maximum number of tracks of lateral context that the tool considers on the same routing level. The default value is `10`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-context_depth` | Specify the number of levels of vertical context that OpenRCX needs to consider for the over/under context overlap for capacitance calculation. The default value is `5`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-no_merge_via_res` | Separates the via resistance from the wire resistance. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "parasitics_extraction_2"
            },
            {
                "summary": "",
                "content": "id:parasitics_extraction_3\n### Write SPEF\n\nThe `write_spef` command writes the `.spef` output of the parasitics stored\nin the database.\n\n```tcl\nwrite_spef\n    [-net_id net_id]                \n    [-nets nets]\n    filename                     \n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-net_id` | Output the parasitics info for specific net IDs. |\n| `-nets` | Net name. |\n| `filename` | Output filename. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "parasitics_extraction_3"
            },
            {
                "summary": "",
                "content": "id:parasitics_extraction_4\n### Scale RC\n\nUse the `adjust_rc` command to scale the resistance, ground, and coupling\ncapacitance. \n\n```tcl\nadjust_rc\n    [-res_factor res]               \n    [-cc_factor cc]                \n    [-gndc_factor gndc]          \n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-res_factor` | Scale factor for resistance. |\n| `-cc_factor` | Scale factor for coupling capacitance. |\n| `-gndc_factor` | Scale factor for ground capacitance. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "parasitics_extraction_4"
            },
            {
                "summary": "",
                "content": "id:parasitics_extraction_5\n### Comparing SPEF files\n\nThe `diff_spef` command compares the parasitics in the reference database `<filename>.spef`.\nThe output of this command is `diff_spef.out`\nand contains the RC numbers from the parasitics in the database and the\n`<filename>.spef`, and the percentage RC difference of the two data.\n\n```tcl\ndiff_spef\n    [-file filename]                \n    [-r_res]\n    [-r_cap]\n    [-r_cc_cap]\n    [-r_conn]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-file` | Path to the input `.spef` filename. |\n| `-r_res` | Read resistance. |\n| `-r_cap` | Read capacitance. |\n| `-r_cc_cap` | Read coupled capacitance. |\n| `r_conn` | Read connections. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "parasitics_extraction_5"
            },
            {
                "summary": "",
                "content": "id:parasitics_extraction_6\n### Extraction Rules File Generation\n\nThe `bench_wires` command produces a layout which contains various patterns\nthat are used to characterize per-unit length R and C values. The generated patterns model\nthe lateral, vertical, and diagonal coupling capacitances, as well as ground\ncapacitance effects. This command generates a .def file that contains a number of wire patterns.\n\nThis command is specifically intended for the Extraction Rules file generation only.\n\n```tcl\nbench_wires\n    [-met_cnt mcnt]\n    [-cnt count]\n    [-len wire_len]\n    [-over]\n    [-diag]\n    [-all]\n    [-db_only]\n    [-under_met layer]\n    [-w_list width]\n    [-s_list space]\n    [-over_dist dist]\n    [-under_dist dist]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-met_cnt` | Number of layers used in each pattern. The default value is `-1`, meaning it is not set, and the allowed values are integers `[0, MAX_INT]`. |\n| `-cnt` | Number of wires in each pattern. The default value is `5`, and the default values are integers `[0, MAX_INT]`. |\n| `-len` | Wirelength in microns in the pattern. The default value is `100`, and the allowed values are integers `[0, MAX_INT]`. | \n| `-all` | Consider all different pattern geometries (`over`, `under`, `over_under`, and `diagonal`). |\n| `-db_only` | Run with db values only. All parameters in `bench_wires` are ignored. |\n| `-under_met` | Consider under metal layer. |\n| `-w_list` | Lists of wire width multipliers from the minimum spacing defined in the LEF. |\n| `-s_list` | Lists of wire spacing multipliers from the minimum spacing defined in the LEF. The list will be the input index on the OpenRCX RC table (Extraction Rules file). |\n| `-over_dist`, `-under_dist` | Consider over and under metal distance respectively. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "parasitics_extraction_6"
            },
            {
                "summary": "",
                "content": "id:parasitics_extraction_7\n### Generate verilog netlist\n\n`bench_verilog` is used after the `bench_wires` command. This command\ngenerates a Verilog netlist of the generated pattern layout by the `bench_wires`\ncommand.\n\nThis command is optional when running the Extraction Rules generation\nflow. This step is required if the favorite extraction tool (i.e., reference\nextractor) requires a Verilog netlist to extract parasitics of the pattern layout.\n\n\n```tcl\nbench_verilog\n    [filename]                    \n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `filename` | Name for the Verilog output file (e.g., `output.v`). |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "parasitics_extraction_7"
            },
            {
                "summary": "",
                "content": "id:parasitics_extraction_8\n### Read SPEF\n\nThe `bench_read_spef` command reads a `<filename>.spef` file and stores the\nparasitics into the database.\n\n```tcl\nbench_read_spef\n    [filename]                   \n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `filename` | Path to the input `.spef` file. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "parasitics_extraction_8"
            },
            {
                "summary": "",
                "content": "id:parasitics_extraction_9\n# Parasitics Extraction\n## Example scripts\n\nExample scripts demonstrating how to run OpenRCX in the OpenROAD environment\non sample designs can be found in /test. An example flow test taking a sample design\nfrom synthesizable RTL Verilog to final-routed layout in an open-source SKY130 technology\nis shown below.\n\n```\n./test/gcd.tcl\n```\n\nExample scripts demonstrating how to run the\nExtraction Rules file generation can be found in this\n[directory](https://github.com/The-OpenROAD-Project/OpenROAD/tree/master/src/rcx/calibration/script).\n\n```\n./calibration/script/generate_patterns.tcl     # generate patterns\n./calibration/script/generate_rules.tcl        # generate the Extraction Rules file\n./calibration/script/ext_patterns.tcl          # check the accuracy of OpenRCX\n```\n\n\n",
                "id": "parasitics_extraction_9"
            }
        ]
    },
    {
        "source": "exrraction_rules_generation_flow_for_openrcx",
        "amount": 2,
        "knowledge": [
            {
                "summary": "",
                "content": "id:exrraction_rules_generation_flow_for_openrcx_0\n# Extraction Rules Generation Flow for OpenRCX\n\nThis flow generates the RC tech file for OpenRCX. The RC tech file provides\nresistance and capacitance tables used for RC extraction for a specific process\ncorner.\n\n",
                "id": "exrraction_rules_generation_flow_for_openrcx_0"
            },
            {
                "summary": "",
                "content": "id:exrraction_rules_generation_flow_for_openrcx_1\n# Extraction Rules Generation Flow for OpenRCX\n## The flow involves:\n\nA. Running OpenRCX `generate_patterns.tcl` to generate layout patterns.\n\n  - Input: tech LEF\n  - Output: `patterns.def`, `patterns.v`\n  - Script: `generate_patterns.tcl`\n  - Desc: OpenRCX generates many pattern geometries to model various types\n    of capacitance and resistance (i.e., multi-conductor) geometric configurations.\n\nB. Running your favorite extraction tool (i.e., reference extractor) to extract\n    parasitics of the layout patterns.\n\n  - Input: `patterns.def`, `patterns.v` (if required), and additional files\n    required by the reference extractor.\n  - Output: `patterns.spef`\n  - Script: Not provided\n  - Desc: Extract parasitics of the patterns generated by OpenRCX using a reference\n    extractor. This one-time step provides the parasitics of various types of pattern\n    geometries as reference for fitted per-unit length R, C calculation.\n\nC. Running OpenRCX to convert `patterns.spef` to RC tech file.\n\n  - Input: `patterns.spef`\n  - Output: RC tech file\n  - Script: `generate_rules.tcl`\n  - Desc: OpenRCX takes the `.spef` from the reference extractor and performs\n    calculations to produce capacitance and resistance tables for a wide range of\n    wire geometries. The output of this flow is a custom RC tech file for\n    OpenRCX.\n\nD. Benchmarking - test the accuracy of OpenRCX on the patterns layout.\n  - Input: `patterns.def` and RC tech file\n  - Output: `rcx.spef`, `diff_spef.out`\n  - Script: `ext_patterns.tcl`\n  - Desc: Perform parasitic extraction on pattern layout for the calibration\n    using the generated RC tech file. OpenRCX then compares the extracted\n    parasitics with the golden parasitics that had been extracted by the reference extractor\n    in Step (B) above.\n\n",
                "id": "exrraction_rules_generation_flow_for_openrcx_1"
            }
        ]
    },
    {
        "source": "IR_Drop_analysis",
        "amount": 5,
        "knowledge": [
            {
                "summary": "",
                "content": "id:IR_Drop_analysis_0\n# IR Drop Analysis\n\nThe IR Drop Analysis module in OpenROAD (`psm`) is based on PDNSim, \nan open-source static IR analyzer.\n\nFeatures:\n\n-   Report worst IR drop.\n-   Report worst current density over all nodes and wire segments in the\n    power distribution network, given a placed and PDN-synthesized design.\n-   Check for floating PDN stripes on the power and ground nets.\n-   Spice netlist writer for power distribution network wire segments.\n\n| | |\n| - | - |\n| ![Image 1](doc/current_map.jpg) | ![Image 2](doc/IR_map.jpg) |\n<p style=\"text-align: center;\">(Left): Current Map, (Right): IR drop map</p>\n\n",
                "id": "IR_Drop_analysis_0"
            },
            {
                "summary": "",
                "content": "id:IR_Drop_analysis_1\n### Analyze Power Grid\n\n```tcl\nanalyze_power_grid\n    [-vsrc vsrc_file]\n    [-outfile out_file]\n    [-error_file err_file]\n    [-enable_em]\n    [-em_outfile em_out_file]\n    [-net net_name]\n    [-dx bump_pitch_x]\n    [-dy bump_pitch_y]\n    [-node_density val_node_density]\n    [-node_density_factor val_node_density_factor]\n    [-corner corner]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-vsrc` | File to set the location of the power C4 bumps/IO pins. [Vsrc_aes.loc file](test/Vsrc_aes_vdd.loc) for an example with a description specified [here](doc/Vsrc_description.md). |\n| `-dx`,`-dy` | These arguments set the bump pitch to decide the voltage source location in the absence of a vsrc file. Default bump pitch of 140um used in absence of these arguments and vsrc. |\n| `-net` | Name of the net to analyze, power or ground net name. |\n| `-enable_em` | Report current per power grid segment. |\n| `-outfile` | Write per-instance voltage into the file. |\n| `-em_outfile` | Write the per-segment current values into a file. This option is only available if used in combination with `-enable_em`. |\n| `-voltage` | Sets the voltage on a specific net. If this option is not set, the Liberty file's voltage value is obtained from operating conditions. |\n| `-node_density` | Node density (in microns) on the standard cell rails. It cannot be used together with `-node_density_factor`. |\n| `-node_density_factor` | Factor which is multiplied by standard cell height to determine the node density on the std cell rails. It cannot be used together with `-node_density`. The default value is `5`, and the allowed values are integers `[0, MAX_INT]`. |\n| `-corner` | Corner to use for analysis. | \n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "IR_Drop_analysis_1"
            },
            {
                "summary": "",
                "content": "id:IR_Drop_analysis_2\n### Check Power Grid\n\n```tcl\ncheck_power_grid -net net_name\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-net` | Name of the net to analyze. Must be a power or ground net name. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "IR_Drop_analysis_2"
            },
            {
                "summary": "",
                "content": "id:IR_Drop_analysis_3\n### Write Spice Power Grid\n\n```tcl\nwrite_pg_spice\n    [-vsrc vsrc_file]\n    [-outfile out_file]\n    [-net net_name]\n    [-dx bump_pitch_x]\n    [-dy bump_pitch_y]\n    [-corner corner]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-vsrc` | File to set the location of the power C4 bumps/IO pins. See [Vsrc_aes.loc file](test/Vsrc_aes_vdd.loc) for an example and its [description](doc/Vsrc_description.md). |\n| `-dx`,`-dy` | Set the bump pitch to decide the voltage source location in the absence of a `vsrc` file. The default bump pitch is 140um if neither these arguments nor a `vsrc` file are given. |\n| `-net` | Name of the net to analyze. Must be a power or ground net name. |\n| `-outfile` | Write per-instance voltage written into the file. |\n| `-corner` | Corner to use for analysis. | \n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "IR_Drop_analysis_3"
            },
            {
                "summary": "",
                "content": "id:IR_Drop_analysis_4\n# IR Drop Analysis\n### Useful Developer Commands\n\nIf you are a developer, you might find these useful. More details can be found in the [source file](./src/pdnsim.cpp) or the [swig file](./src/pdnsim.i).\n\n| Command Name | Description |\n| ----- | ----- |\n| `find_net` | Get a reference to net name. | \n\n",
                "id": "IR_Drop_analysis_4"
            }
        ]
    },
    {
        "source": "read_UPF_utility",
        "amount": 9,
        "knowledge": [
            {
                "summary": "",
                "content": "id:read_UPF_utility_0\n# Read UPF Utility\n\nThis module contains functionality to read, and modify information\nfrom Unified Power Format (UPF) files. \n\n",
                "id": "read_UPF_utility_0"
            },
            {
                "summary": "",
                "content": "id:read_UPF_utility_1\n### Read UPF\n\nSources the UPF file. \n\n```tcl\nread_upf\n    -file file\n```\n\n#### Options\n\n| Switch Name | Description | \n| ----- | ----- |\n| `-file` | Path to `.upf` file. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "read_UPF_utility_1"
            },
            {
                "summary": "",
                "content": "id:read_UPF_utility_2\n### Create Power Domain\n\n```tcl\ncreate_power_domain\n    [-elements elements]\n    name \n```\n\n#### Options\n\n| Switch Name | Description | \n| ----- | ----- |\n| `-elements` | List of module paths that belong this this domain OR `*` for top domain. |\n| `name` | Domain name. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "read_UPF_utility_2"
            },
            {
                "summary": "",
                "content": "id:read_UPF_utility_3\n### Create Logic Port\n\n```tcl\ncreate_logic_port\n    [-direction direction]\n    port_name\n```\n\n#### Options\n\n| Switch Name | Description | \n| ----- | ----- |\n| `-direction` | Direction of the port (`in`, `out`, `inout`). |\n| `port_name` | Port name. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "read_UPF_utility_3"
            },
            {
                "summary": "",
                "content": "id:read_UPF_utility_4\n### Create Power Switch\n\n```tcl\ncreate_power_switch\n    [-domain domain]\n    [-output_supply_port output_supply_port]\n    [-input_supply_port input_supply_port]\n    [-control_port control_port]\n    [-on_state on_state]\n    name\n```\n\n#### Options\n\n| Switch Name | Description | \n| ----- | ----- |\n| `-domain` | Power domain name. |\n| `-output_supply_port` | Output supply port of the switch. |\n| `-input_supply_port` | Input supply port of the switch. |\n| `-control_port` | Control port on the switch. |\n| `-on_state` | One of {`state_name`, `input_supply_port`, `boolean_expression`}. |\n| `name` | Power switch name. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "read_UPF_utility_4"
            },
            {
                "summary": "",
                "content": "id:read_UPF_utility_5\n### Create or Update Isolation Strategy\n\n```tcl \nset_isolation\n    [-domain domain]\n    [-applies_to applies_to]\n    [-clamp_value clamp_value]\n    [-isolation_signal isolation_signal]\n    [-isolation_sense isolation_sense]\n    [-location location]\n    [-update]\n    name\n```\n\n#### Options\n\n| Switch Name | Description | \n| ----- | ----- |\n| `-domain` | Power domain |\n| `-applies_to` | Restricts the strategy to apply one of these (`inputs`, `outputs`, `both`). |\n| `-clamp_value` | Value the isolation can drive (`0`, `1`). |\n| `-isolation_signal` | The control signal for this strategy. |\n| `-isolation_sense` | The active level of isolation control signal. |\n| `-location` | Domain in which isolation cells are placed (`parent`, `self`, `fanout`). |\n| `-update` | Only available if using existing strategy, will error if the strategy doesn't exist. |\n| `name` | Isolation strategy name. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "read_UPF_utility_5"
            },
            {
                "summary": "",
                "content": "id:read_UPF_utility_6\n### Set Interface cell\n\n```tcl \nuse_interface_cell\n    [-domain domain]\n    [-strategy strategy]\n    [-lib_cells lib_cells]\n```\n\n#### Options\n\n| Switch Name | Description | \n| ----- | ----- |\n| `-domain` | Power domain name. |\n| `-strategy` | Isolation strategy name. |\n| `-lib_cells` | List of lib cells that could be used. |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "read_UPF_utility_6"
            },
            {
                "summary": "",
                "content": "id:read_UPF_utility_7\n### Set Domain Area\n\n```tcl\nset_domain_area\n    domain_name\n    -area {llx lly urx ury}\n```\n\n#### Options\n\n| Switch Name | Description | \n| ----- | ----- |\n| `domain_name` | Power domain name. |\n| `-area` | x-/y- coordinates in microns for the lower left and upper right corners of the power domain area. |\n\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "read_UPF_utility_7"
            },
            {
                "summary": "",
                "content": "id:read_UPF_utility_8\n# Read UPF Utility\n#### Options\n\n| Switch Name | Description | \n| ----- | ----- |\n| `-switch_name_list` |  A list of switches (as defined by create_power_switch) to map. |\n| `-lib_cells` | A list of library cells that could be mapped to the power switch |\n| `-port_map` | A map that associates model ports defined by create_power_switch to logical ports |\n\n",
                "id": "read_UPF_utility_8"
            }
        ]
    },
    {
        "source": "power_distribution_network_generator",
        "amount": 15,
        "knowledge": [
            {
                "summary": "",
                "content": "id:power_distribution_network_generator_0\n# Power Distribution Network Generator\n\nThe power distribution network (PDN) generator module in OpenROAD (`pdn`) \nis based on the PDNGEN tool. \nThis utility aims to simplify the process of adding a power grid into a\nfloorplan. The aim is to specify a small set of power grid policies to be\napplied to the design, such as layers to use, stripe width and spacing,\nthen have the utility generate the actual metal straps. Grid policies can\nbe defined over the stdcell area, and over areas occupied by macros.\n\n```{seealso}\nTo work with UPF files, refer to [Read UPF Utility](../upf/README.md).\n```\n\n",
                "id": "power_distribution_network_generator_0"
            },
            {
                "summary": "",
                "content": "id:power_distribution_network_generator_1\n### Build Power Grid\n\nBuild a power grid in accordance with the information specified.\n\n```tcl\npdngen \n    [-skip_trim]\n    [-dont_add_pins]\n    [-reset]\n    [-ripup]\n    [-report_only]\n    [-failed_via_report file]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-skip_trim` | Skip the metal trim step, which attempts to remove metal stubs. |\n| `-dont_add_pins` | Prevent the creation of block pins. |\n| `-reset` | Reset the grid and domain specifications. |\n| `-ripup` | Ripup the existing power grid, as specified by the voltage domains. |\n| `-report_only` | Print the current specifications. |\n| `-failed_via_report` | Generate a report file that can be viewed in the DRC viewer for all the failed vias (i.e., those that did not get built or were removed). |\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "power_distribution_network_generator_1"
            },
            {
                "summary": "",
                "content": "id:power_distribution_network_generator_2\n### Define Voltage Domains\n\nDefines a named voltage domain with the names of the power and ground nets for a region.\n\nThis region must already exist in the floorplan before referencing it with the `set_voltage_domain` command. If the `-region` argument is not supplied, then the region is the entire core area of the design.\n\n```tcl\nset_voltage_domain \n    -name domain_name\n    -power power_net_name \n    -ground ground_net_name\n    [-region region_name]\n    [-secondary_power secondary_power_net] \n    [-switched_power switched_power_net]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-name` | Defines the name of the voltage domain. The default is \"Core\" or region name if provided. |\n| `-power` | Specifies the name of the power net for this voltage domain. |\n| `-ground` | Specifies the name of the ground net for this voltage domain. |\n| `-region` | Specifies a region of the design occupied by this voltage domain. |\n| `-secondary_power` | Specifies the name of the secondary power net for this voltage domain. |\n| `-switched_power` | Specifies the name of the switched power net for switched power domains. |\n\nExample usage:\n\n```tcl\nset_voltage_domain -power VDD -ground VSS\nset_voltage_domain -name TEMP_ANALOG -region TEMP_ANALOG -power VIN -ground VSS\nset_voltage_domain -region test_domain -power VDD -ground VSS -secondary_power VREG\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "power_distribution_network_generator_2"
            },
            {
                "summary": "",
                "content": "id:power_distribution_network_generator_3\n### Define Power Grid (General)\n\nDefine the rules to describe a power grid pattern to be placed in the design.\n\n```{warning}\n`define_pdn_grid` is overloaded with two different signatures. Take note of the arguments when using this function!\n```\n\n```tcl\ndefine_pdn_grid \n    [-name name] \n    [-voltage_domain list_of_domain_names] \n    [-pins list_of_pin_layers] \n    [-starts_with POWER|GROUND] \n    [-starts_with POWER|GROUND] \n    [-obstructions list_of_layers]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-name` | The name to use when referring to this grid definition. |\n| `-voltage_domain` | This grid's voltage domain name. Defaults to the last domain created. |\n| `-pins` | List of layers where the power straps will be promoted to block pins. |\n| `-starts_with` | Use `POWER` or `GROUND`  for the first placed strap. Defaults to `GROUND`. |\n| `-obstructions` | Layers to add routing blockages to avoid DRC violations. |\n\nExample usage:\n\n```tcl\ndefine_pdn_grid -name main_grid -pins {metal7} -voltage_domain {CORE TEMP_ANALOG}\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "power_distribution_network_generator_3"
            },
            {
                "summary": "",
                "content": "id:power_distribution_network_generator_4\n### Define Power Grid (Macros)\n\n```tcl\ndefine_pdn_grid \n    -macro\n    [-name name]\n    [-grid_over_pg_pins|-grid_over_boundary]\n    [-voltage_domain list_of_domain_names]\n    [-orient list_of_valid_orientations]\n    [-instances list_of_instances]\n    [-cells list_of_cells]\n    [-default]\n    [-halo list_of_halo_values]\n    [-pins list_of_pin_layers]\n    [-starts_with POWER|GROUND]\n    [-obstructions list_of_layers]\n    [-power_switch_cell name]\n    [-power_control signal_name]\n    [-power_control_network STAR|DAISY]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-macro` | The type of grid added as a macro. |\n| `-name` | The name to use when referring to this grid definition. |\n| `-grid_over_pg_pins`, `-grid_over_boundary` | Place the power grid over the power ground pins of the macro (default) or place the power grid over the entire macro.  |\n| `-voltage_domain` | Grid's voltage domain name. Defaults to the last domain created. |\n| `-orient` | For a macro, defines a set of valid orientations. LEF orientations (N, FN, S, FS, E, FE, W and FW) can be used as well as standard geometry orientations (R0, R90, R180, R270, MX, MY, MXR90 and MYR90). Macros with one of the valid orientations will use this grid specification. |\n| `-instances` | For a macro, defines a set of valid instances. Macros with a matching instance name will use this grid specification. |\n| `-cells` | For a macro, defines a set of valid cells. Macros, which are instances of one of these cells, will use this grid specification. |\n| `-default` | For a macro, specifies this is a default grid that can be overwritten. |\n| `-halo` | Specifies the design's default minimum separation of selected macros from other cells. This is only used if the macro does not define halo values in the LEF description. If one value is specified, it will be used on all four sides; if two values are specified, the first will be applied to left/right sides, and the second will be applied to top/bottom sides; if four values are specified, then they are applied to left, bottom, right and top sides respectively (Default: 0). |\n| `-pins` | Defines a list of layers where the power straps will be promoted to block pins. |\n| `-starts_with` | Use `POWER` or `GROUND`  for the first placed strap. Defaults to `GROUND`.|\n| `-obstructions` | Specify the layers to add routing blockages in order to avoid DRC violations. |\n| `-power_switch_cell` | Defines the name of the coarse grain power switch cell to be used wherever the stdcell rail connects to the rest of the power grid. The mesh layers are associated with the unswitched power net of the voltage domain, whereas the stdcell rail is associated with the switched power net of the voltage domain. The placement of a power switch cell connects the unswitched power mesh to the switched power rail through a power switch defined by the `define_power_switch_cell` command. |\n| `-power_control` | Defines the name of the power control signal used to control the switching of the inserted power switches. |\n| `-power_control_network` | Defines the structure of the power control signal network. Choose from STAR or DAISY. If STAR is specified, then the network is wired as a high-fanout net with the power control signal driving the power control pin on every power switch. If DAISY is specified, then the power switches are connected in a daisy-chain configuration - note, this requires that the power switch defined by the `define_power_switch_cell`  command defines an acknowledge pin for the switch. |\n\nExample usage:\n\n```tcl\ndefine_pdn_grid -macro -name ram          -orient {R0 R180 MX MY} -grid_over_pg_pins  -starts_with POWER -pin_direction vertical\ndefine_pdn_grid -macro -name rotated_rams -orient {E FE W FW}     -grid_over_boundary -starts_with POWER -pin_direction horizontal\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "power_distribution_network_generator_4"
            },
            {
                "summary": "",
                "content": "id:power_distribution_network_generator_5\n### Define Power Grid for an Existing Routing Solution\n\n```tcl\ndefine_pdn_grid \n    -existing\n    [-name name]\n    [-obstructions list_of_layers]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-existing` | Enable use of existing routing solution. |\n| `-name` | The name to use when referring to this grid definition. Defaults to `existing_grid`. |\n| `-obstructions` | The layers to add routing blockages in order to avoid DRC violations. |\n\nExample usage:\n\n```tcl\ndefine_pdn_grid -name main_grid -existing\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "power_distribution_network_generator_5"
            },
            {
                "summary": "",
                "content": "id:power_distribution_network_generator_6\n### Define Power Switch Cell\n\nDefine a power switch cell that will be inserted into a power grid.\n\n```tcl\ndefine_power_switch_cell \n    -name name \n    -control control_pin\n    -power_switchable power_switchable_pin\n    -power unswitched_power_pin\n    -ground ground_pin \n    [-acknowledge acknowledge_pin_name]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-name` | The name of the power switch cell. |\n| `-control` | The name of the power control port of the power switch cell. |\n| `-switched_power` | The pin's name that outputs the switched power net. |\n| `-power` | The pin's name that connects to the unswitched power net. |\n| `-ground` | The pin's name that connects to the ground net. |\n| `-acknowledge` | The name of the output control signal of the power control switch if it has one. |\n\nExample usage:\n\n```tcl\ndefine_power_switch_cell -name POWER_SWITCH -control SLEEP -switched_power VDD -power VDDG -ground VSS\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "power_distribution_network_generator_6"
            },
            {
                "summary": "",
                "content": "id:power_distribution_network_generator_7\n### Add Stripes\n\nDefines a pattern of power and ground stripes in a single layer to be added to a power grid.\n\n```tcl\nadd_pdn_stripe \n    -layer layer_name\n    [-grid grid_name]\n    [-width width_value]\n    [-followpins]\n    [-extend_to_core_ring]\n    [-pitch pitch_value]\n    [-spacing spacing_value]\n    [-offset offset_value]\n    [-starts_with POWER|GROUND]\n    [-extend_to_boundary]\n    [-snap_to_grid]\n    [-number_of_straps count]\n    [-nets list_of_nets]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-layer` | The layer name for these stripes. |\n| `-grid` | The grid to which this stripe definition will be added. (Default: Last grid defined by `define_pdn_grid`). |\n| `-width` | Value for the width of the stripe. |\n| `-followpins` | Indicates that the stripe forms part of the stdcell rails, pitch and spacing are dictated by the stdcell rows, and the `-width` is not needed if it can be determined from the cells. |\n| `-extend_to_core_ring` | Extend the stripes to the core PG ring. |\n| `-pitch` | Value for the distance between each power/ground pair. |\n| `-spacing` | Optional specification of the spacing between power/ground pairs within a single pitch defaults to `pitch / 2`. |\n| `-offset` | Value for the offset of the stripe from the lower left corner of the design core area. |\n| `-starts_with` | Use `POWER` or `GROUND`  for the first placed strap. Defaults to `GROUND`. |\n| `-extend_to_boundary` | Extend the stripes to the boundary of the grid. |\n| `-snap_to_grid` | Snap the stripes to the defined routing grid. |\n| `-number_of_straps` | Number of power/ground pairs to add. |\n| `-nets` | Limit straps to just this list of nets. |\n\nExample usage:\n\n```tcl\nadd_pdn_stripe -grid main_grid -layer metal1 -followpins\nadd_pdn_stripe -grid main_grid -layer metal2 -width 0.17 -followpins\nadd_pdn_stripe -grid main_grid -layer metal4 -width 0.48 -pitch 56.0 -offset 2 -starts_with GROUND\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "power_distribution_network_generator_7"
            },
            {
                "summary": "",
                "content": "id:power_distribution_network_generator_8\n### Add Rings\n\nThe `add_pdn_ring` command defines power/ground rings around a grid region. The ring structure is built using two layers that are orthogonal to each other. A power/ground pair will be added above and below the grid using the horizontal layer, with another power/ground pair to the left and right using the vertical layer. These four pairs of power/ground stripes form a ring around the specified grid. Power straps on these layers that are inside the enclosed region are extended to connect to the ring.\n\n```tcl\nadd_pdn_ring \n    -layers layer_name\n    -widths width_value|list_of_2_values\n    -spacings spacing_value|list_of_2_values\n    [-grid grid_name]\n    [-core_offsets offset_value]\n    [-pad_offsets offset_value]\n    [-add_connect]\n    [-extend_to_boundary]\n    [-connect_to_pads]\n    [-connect_to_pad_layers layers]\n    [-starts_with POWER|GROUND]\n    [-nets list_of_nets]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-layers` | Specifies the name of the layer for these stripes. |\n| `-widths` | Value for the width of the stdcell rail. |\n| `-spacings` | Optional specification of the spacing between power/ground pairs within a single pitch. (Default: pitch / 2). |\n| `-grid` | Specifies the name of the grid to which this ring defintion will be added. (Default: Last grid created by `define_pdn_grid`). |\n| `-core_offsets` | Value for the offset of the ring from the grid region. |\n| `-pad_offsets` | When defining a power grid for the top level of an SoC, can be used to define the offset of ring from the pad cells. |\n| `-add_connect` | Automatically add a connection between the two layers. |\n| `-extend_to_boundary` | Extend the rings to the grid boundary. |\n| `-connect_to_pads` | The core side of the pad pins will be connected to the ring. |\n| `-connect_to_pad_layers` | Restrict the pad pins layers to this list. |\n| `-starts_with` | Use `POWER` or `GROUND`  for the first placed strap. Defaults to `GROUND`. |\n| `-nets` | Limit straps to just this list of nets. |\n\nExample usage: \n\n```tcl\nadd_pdn_ring -grid main_grid -layer {metal6 metal7} -widths 5.0 -spacings  3.0 -core_offset 5\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "power_distribution_network_generator_8"
            },
            {
                "summary": "",
                "content": "id:power_distribution_network_generator_9\n### Add Connections\n\nThe `add_pdn_connect` command is used to define which layers in the power grid are to be connected together. During power grid generation, vias will be added for overlapping power nets and overlapping ground nets. The use of fixed vias from the technology file can be specified or else via stacks will be constructed using VIARULEs. If VIARULEs are not available in the technology, then fixed vias must be used.\n\n```tcl\nadd_pdn_connect \n    -layers list_of_two_layers\n    [-grid grid_name]\n    [-cut_pitch pitch_value]\n    [-fixed_vias list_of_fixed_vias]\n    [-dont_use_vias list_of_vias]\n    [-max_rows rows]\n    [-max_columns columns]\n    [-ongrid ongrid_layers]\n    [-split_cuts split_cuts_mapping]\n```\n\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-layers` | Layers to be connected where there are overlapping power or overlapping ground nets. |\n| `-grid` | Specifies the name of the grid definition to which this connection will be added (Default: Last grid created by `define_pdn_grid`). |\n| `-cut_pitch` | When the two layers are parallel, e.g., overlapping stdcell rails, specify the distance between via cuts. |\n| `-fixed_vias` | List of fixed vias to be used to form the via stack. |\n| `-dont_use_vias` | List or pattern of vias to not use to form the via stack. |\n| `-max_rows` | Maximum number of rows when adding arrays of vias. |\n| `-max_columns` | Maximum number of columns when adding arrays of vias. |\n| `-ongrid` | List of intermediate layers in a via stack to snap onto a routing grid. |\n| `-split_cuts` | Specifies layers to use split cuts on with an associated pitch, for example `{metal3 0.380 metal5 0.500}`. |\n\nExample usage:\n\n```tcl\nadd_pdn_connect -grid main_grid -layers {metal1 metal2} -cut_pitch 0.16\nadd_pdn_connect -grid main_grid -layers {metal2 metal4}\nadd_pdn_connect -grid main_grid -layers {metal4 metal7}\n\nadd_pdn_connect -grid ram -layers {metal4 metal5}\nadd_pdn_connect -grid ram -layers {metal5 metal6}\nadd_pdn_connect -grid ram -layers {metal6 metal7}\n\nadd_pdn_connect -grid rotated_rams -layers {metal4 metal6}\nadd_pdn_connect -grid rotated_rams -layers {metal6 metal7}\n```\n\n## Commands\n\n```{note}\n- Parameters in square brackets `[-param param]` are optional.\n- Parameters without square brackets `-param2 param2` are required.\n```\n\n",
                "id": "power_distribution_network_generator_9"
            },
            {
                "summary": "",
                "content": "id:power_distribution_network_generator_10\n# Power Distribution Network Generator\n### Useful Developer Commands\n\nIf you are a developer, you might find these useful. More details can be found in the [source file](../src/PdnGen.cc) or the [swig file](PdnGen.i).\n\n| Command Name | Description |\n| ----- | ----- |\n| `name_cmp` | Compare 2 input strings `obj1` and `obj2` if they are equal. |\n| `check_design_state` | Check if the design is loaded. |\n| `get_layer` | Get the layer reference of the layer name. |\n| `get_voltage_domains` | Gets a Tcl list of power domains in design. |\n| `match_orientation` | Checks if a given orientation `orient` is within a list of orientations `orients`. |\n| `get_insts` | Get the Tcl list of instances. |\n| `get_masters` | Get the Tcl list of masters. |\n| `get_one_to_two` | If a Tcl list has one element `{x}`, Tcl list `{x x}` is returned. If a Tcl list of two elements `{y y}`, list as is returned. Otherwise, for any other list lengths, an error is triggered. |\n| `get_one_to_four` | Similar logic for the above function, except the logic only works for lists of length one, two, and four, respectively. All other list lengths trigger errors. |\n| `get_obstructions` | Get the Tcl list of layers. |\n| `get_starts_with` | If value starts with `POWER`, return 1; else if value starts with `GROUND` return 0; else return error. |\n| `get_mterm` | Find master terminal. |\n| `get_orientations` | Get the list of valid orientations. | \n\n",
                "id": "power_distribution_network_generator_10"
            },
            {
                "summary": "",
                "content": "id:power_distribution_network_generator_11\n# Power Distribution Network Generator\n## Example scripts\n\n",
                "id": "power_distribution_network_generator_11"
            },
            {
                "summary": "",
                "content": "id:power_distribution_network_generator_12\n# Power Distribution Network Generator\n### Defining a SoC power grid with pads\n\n```\nadd_global_connection -net VDD -pin_pattern {^VDD$} -power\nadd_global_connection -net VDD -pin_pattern {^VDDPE$}\nadd_global_connection -net VDD -pin_pattern {^VDDCE$}\nadd_global_connection -net VSS -pin_pattern {^VSS$} -ground\nadd_global_connection -net VSS -pin_pattern {^VSSE$}\n\nset_voltage_domain -power VDD -ground VSS\n\ndefine_pdn_grid -name \"Core\"\nadd_pdn_ring -grid \"Core\" -layers {metal8 metal9} -widths 5.0 -spacings 2.0 -core_offsets 4.5 -connect_to_pads\n\nadd_pdn_stripe -followpins -layer metal1 -extend_to_core_ring\n\nadd_pdn_stripe -layer metal4 -width 0.48 -pitch 56.0 -offset 2.0 -extend_to_core_ring\nadd_pdn_stripe -layer metal7 -width 1.40 -pitch 40.0 -offset 2.0 -extend_to_core_ring\nadd_pdn_stripe -layer metal8 -width 1.40 -pitch 40.0 -offset 2.0 -extend_to_core_ring\nadd_pdn_stripe -layer metal9 -width 1.40 -pitch 40.0 -offset 2.0 -extend_to_core_ring\n\nadd_pdn_connect -layers {metal1 metal4}\nadd_pdn_connect -layers {metal4 metal7}\nadd_pdn_connect -layers {metal7 metal8}\nadd_pdn_connect -layers {metal8 metal9}\nadd_pdn_connect -layers {metal9 metal10}\n\npdngen\n```\n\n",
                "id": "power_distribution_network_generator_12"
            },
            {
                "summary": "",
                "content": "id:power_distribution_network_generator_13\n# Power Distribution Network Generator\n### Sroute\n\nThe `add_sroute_connect` command is employed for connecting pins located\noutside of a specific power domain to the power ring, especially in cases where\nmultiple power domains are present. During `sroute`, multi-cut vias will be added\nfor new connections. The use of fixed vias from the technology file should be\nspecified for the connection using the `add_sroute_connect` command. The use\nof max_rows and max_columns defines the row and column limit for the via stack.\n\n```\nadd_sroute_connect\n    -layers list_of_2_layers\n    -cut_pitch pitch_value\n    [-net net]\n    [-outerNet outerNet]\n    [-fixed_vias list_of_vias]\n    [-max_rows rows]\n    [-max_columns columns]\n    [-metalwidths metalwidths]\n    [-metalspaces metalspaces]\n    [-ongrid ongrid_layers]\n    [-insts inst]\n```\n\n",
                "id": "power_distribution_network_generator_13"
            },
            {
                "summary": "",
                "content": "id:power_distribution_network_generator_14\n# Power Distribution Network Generator\n#### Options\n\n| Switch Name | Description |\n| ----- | ----- |\n| `-net` | The inner net where the power ring exists. |\n| `-outerNet` | The outer net where instances/pins that need to get connected exist. |\n| `-layers` |  The metal layers for vertical stripes within inner power ring. |\n| `-cut_pitch` | Distance between via cuts when the two layers are parallel, e.g., overlapping stdcell rails. (Default:200 200) |\n| `-fixed_vias` | List of fixed vias to be used to form the via stack. |\n| `-max_rows` | Maximum number of rows when adding arrays of vias. (Default:10) |\n| `-max_columns` | Maximum number of columns when adding arrays of vias. (Default:10) |\n| `-metalwidths` | Width for each metal layer. |\n| `-metalspaces` | Spacing of each metal layer. |\n| `-ongrid` | List of intermediate layers in a via stack to snap onto a routing grid. |\n| `-insts` | List of all the instances that contain the pin that needs to get connected with power ring. (Default:nothing) |\n\n",
                "id": "power_distribution_network_generator_14"
            }
        ]
    },
    {
        "source": "vsrc_description",
        "amount": 1,
        "knowledge": [
            {
                "summary": "",
                "content": "id:vsrc_description_0\n# Voltage source location file description\n\nThis file specifies the description of the C4 bump configurations file.\nThe file is a csv as described below:\n\n```\n<x_coordinate>, <y_coordinate>, <octagonal_c4_bump_edge_length>, <voltage_value>\n```\n\nThe x and y coordinate specify the center location of the voltage C4 bumps in\nmicro meter.\n\nThe octagonal c4_edge_length specifies the edge length of the C4 to determine\nthe pitch of the RDL layer in micron\n\nVoltage_value specifies the value of voltage source at the C4 bump. In case\nthere is a need to specify voltage drop in micron\n\n",
                "id": "vsrc_description_0"
            }
        ]
    },
    {
        "source": "flow-scripts-tutorial",
        "amount": 54,
        "knowledge": [
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_0\n# OpenROAD Flow Scripts Tutorial\n\n## Introduction\n\nThis document describes a tutorial to run the complete\nOpenROAD flow from RTL-to-GDS using [OpenROAD Flow\nScripts](https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts).\nIt includes examples of useful design and manual usage in key flow\nstages to help users gain a good understanding of the\n[OpenROAD](https://openroad.readthedocs.io/en/latest/main/README.html)\napplication flow, data organization, GUI and commands.\n\nThis is intended for:\n\n-   Beginners or new users with some understanding of basic VLSI\n    design flow. Users will learn the basics of installation to use\n    OpenROAD-flow-scripts for the complete RTL-to-GDS flow from\n    [here](../index.md#getting-started-with-openroad-flow-scripts).\n-   Users already familiar with the OpenROAD application and flow but would\n    like to learn more about specific features and commands.\n\n",
                "id": "flow-scripts-tutorial_0"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_1\n\n## User Guidelines\n\n-   This tutorial requires a specific directory structure built by\n    OpenROAD-flow-scripts (ORFS). Do not modify this structure or\n    underlying files since this will cause problems in the flow execution.\n-   User can run the full RTL-to-GDS flow and learn specific flow\n    sections independently. This allows users to learn the flow and tool\n    capabilities at their own pace, time and preference.\n-   Results shown, such as images or outputs of reports and logs, could\n    vary based on release updates. However, the main flow and command\n    structure should generally apply.\n\nNote: Please submit any problem found under Issues in the GitHub repository\n[here](https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts/issues).\n\n",
                "id": "flow-scripts-tutorial_1"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_2\n\n## Getting Started\n\nThis section describes the environment setup to build OpenROAD-flow-scripts\nand get ready to execute the RTL-to-GDS flow of the open-source\ndesign `ibex` using the `sky130hd` technology.\n\n`ibex` is a 32 bit RISC-V CPU core (`RV32IMC/EMC`) with a two-stage\npipeline.\n\n### Setting Up The Environment\n\nUse the `bash` shell to run commands and scripts.\n\n#### OpenROAD-flow-scripts Installation\n\nTo install OpenROAD-flow-scripts,  refer to the\n[Build or installing ORFS  Dependencies](https://openroad-flow-scripts.readthedocs.io/en/latest/#build-or-installing-orfs-dependencies)\ndocumentation.\n\nIn general, we recommend using `Docker` for an efficient user\nexperience. Install OpenROAD-flow-scripts using a docker as described\nhere [Build from sources using Docker](../user/BuildWithDocker.md).\n\n:::{Note}\nIf you need to update an existing OpenROAD-flow-scripts installation,\nfollow instructions from [here](../user/FAQS.md#how-do-i-update-openroad-flow-scripts).\n:::\n\nOpenROAD-flow-scripts installation is complete.\n\n",
                "id": "flow-scripts-tutorial_2"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_3\n\n#### Running OpenROAD-flow-scripts inside the Docker\n\nLaunch the docker with OpenROAD-flow-scripts container as follows:\n\n```shell\ndocker run --rm -it -u $(id -u ${USER}):$(id -g ${USER}) -v $(pwd)/flow:/OpenROAD-flow-scripts/flow openroad/flow-ubuntu22-builder\n```\n\n:::{seealso}\nTo launch OpenROAD GUI inside the docker, based on the OS, use the command from [here](../user/BuildWithDocker.md#enable-gui-support).\n:::\n\nOnce you are entered into OpenROAD-flow-scripts container run:\n\n```shell\nsource env.sh\n```\n\nIf your installation is  successful, you will see the following message:\n\n```\nOPENROAD: /OpenROAD-flow-scripts/tools/OpenROAD\n```\n\n#### Verifying the Docker based  Installation\n\nTo verify the installation run the built-in example design as follows:\n\n```shell\ncd flow\nmake\n```\n\nA successful run end with the log:\n\n```\n[INFO] Writing out GDS/OAS 'results/nangate45/gcd/base/6_1_merged.gds'\nElapsed time: 0:10.44[h:]min:sec. CPU time: user 2.17 sys 0.54 (26%). Peak memory: 274184KB.\ncp results/nangate45/gcd/base/6_1_merged.gds results/nangate45/gcd/base/6_final.gds\nLog                       Elapsed seconds\n1_1_yosys                          2\n3_3_place_gp                       1\n4_1_cts                            8\n5_2_route                   10\n6_1_merge                         10\n6_report                           3\n```\n\n",
                "id": "flow-scripts-tutorial_3"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_4\n\n### Platform Configuration\n\nView the platform configuration file setup for default variables for\n`sky130hd`.\n\n```shell\nless ./platforms/sky130hd/config.mk\n```\n\nThe `config.mk` file has all the required variables for the `sky130`\nplatform and hence it is not recommended to change any variable\ndefinition here. You can view the `sky130hd` platform configuration\n[here](https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts/blob/master/flow/platforms/sky130hd/config.mk).\n\nRefer to the [Flow variables](../user/FlowVariables.md) document for\ndetails on how to use platform and design specific environment variables\nin OpenROAD-flow-scripts to customize and configure your design flow.\n\n",
                "id": "flow-scripts-tutorial_4"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_5\n\n### Design Configuration\n\nView the default design configuration of `ibex` design:\n\n```shell\nless ./designs/sky130hd/ibex/config.mk\n```\n\nYou can view `ibex` design `config.mk`\n[here](https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts/blob/master/flow/designs/sky130hd/ibex/config.mk).\n\n:::{Note} The following design-specific configuration variables are required\nto specify main design inputs such as platform, top-level design name and\nconstraints. We will use default configuration variables for this tutorial.\n:::\n\n| Variable Name      | Description                                                                                                                              |\n|--------------------|------------------------------------------------------------------------------------------------------------------------------------------|\n| `PLATFORM`         | Specifies Process design kit.                                                                                                            |\n| `DESIGN_NAME`      | The name of the top-level module of the design                                                                                           |\n| `VERILOG_FILES`    | The path to the design Verilog files                                                                                                     |\n| `SDC_FILE`         | The path to design `.sdc` file                                                                                                           |\n| `CORE_UTILIZATION` | The core utilization percentage.                                                                                                         |\n| `PLACE_DENSITY`    | The desired placement density of cells. It reflects how spread the cells would be on the core area. 1 = closely dense. 0 = widely spread |\n\n:::{Note} To add a new design to the `flow`, refer to the document\n[here](../user/AddingNewDesign.md). This step is for advanced users.\nIf you are a beginner, first understand the flow by completing this\ntutorial and come back to this step later to add a new design.\n:::\n\n",
                "id": "flow-scripts-tutorial_5"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_6\n\n### Timing Constraints\n\nView timing constraints specified in the `.sdc` file\n[here](https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts/blob/master/flow/designs/sky130hd/ibex/constraint.sdc).\n\n```shell\nless ./designs/sky130hd/ibex/constraint.sdc\n```\n\nFor `ibex` design, we simply use the clock definition as follows as a\nminimum required timing constraint.\n\n```tcl\ncreate_clock -name core_clock -period 17.4 [get_ports {clk_i}]\n```\n\n",
                "id": "flow-scripts-tutorial_6"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_7\n\n### Design Input Verilog\n\nThe Verilog input files are located in `./designs/src/ibex/`\n\nThe design is defined in `ibex_core.v` available\n[here](https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts/blob/master/flow/designs/src/ibex/ibex_core.v).\n\nRefer to the `ibex` design `README.md`\n[here](https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts/blob/master/flow/designs/src/ibex/README.md).\n\n",
                "id": "flow-scripts-tutorial_7"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_8\n\n## Running The Automated RTL-to-GDS Flow\n\nThis section describes the complete execution of the design flow from\nRTL-to-GDS. The OpenROAD application executes the entire autonomous flow\nusing Tcl scripts that invoke open-sourced tools, from synthesis to the final\n`.gds` file creation, without requiring human intervention. However, in this\ntutorial, the user will learn both the automated and a few interactive ways\nto run Tcl commands for important flow stages.\n\nFrom the OpenROAD-flow-scripts directory, users can access individual flow\nstages, respective tools and the corresponding `README.md` for tool commands,\nconfiguration examples using the Tcl interface and other such details.\n\n-   [Synthesis](https://github.com/The-OpenROAD-Project/yosys/blob/master/README.md)\n-   [Database](https://openroad.readthedocs.io/en/latest/main/src/odb/README.html)\n-   [Floorplanning](https://openroad.readthedocs.io/en/latest/main/src/ifp/README.html)\n-   [Pin Placement](https://openroad.readthedocs.io/en/latest/main/src/ppl/README.html)\n-   [Chip-level Connections](https://openroad.readthedocs.io/en/latest/main/src/pad/README.html)\n-   [Macro Placement](https://openroad.readthedocs.io/en/latest/main/src/mpl/README.html)\n-   [Tapcell insertion](https://openroad.readthedocs.io/en/latest/main/src/tap/README.html)\n-   [PDN Analysis](https://openroad.readthedocs.io/en/latest/main/src/pdn/README.html)\n-   [IR Drop Analysis](https://openroad.readthedocs.io/en/latest/main/src/psm/README.html)\n-   [Global Placement](https://openroad.readthedocs.io/en/latest/main/src/gpl/README.html)\n-   [Timing Analysis](https://openroad.readthedocs.io/en/latest/main/src/sta/README.html)\n-   [Detailed Placement](https://openroad.readthedocs.io/en/latest/main/src/dpl/README.html)\n-   [Timing Optimization using Resizer](https://openroad.readthedocs.io/en/latest/main/src/rsz/README.html)\n-   [Clock Tree Synthesis](https://openroad.readthedocs.io/en/latest/main/src/cts/README.html)\n-   [Global Routing](https://openroad.readthedocs.io/en/latest/main/src/grt/README.html)\n-   [Antenna Rule Checker](https://openroad.readthedocs.io/en/latest/main/src/ant/README.html)\n-   [Detail Routing](https://openroad.readthedocs.io/en/latest/main/src/drt/README.html)\n-   [Metall Fill](https://openroad.readthedocs.io/en/latest/main/src/fin/README.html)\n-   [Parasitics Extraction](https://openroad.readthedocs.io/en/latest/main/src/rcx/README.html)\n-   [Layout Generation](https://www.klayout.de/)\n\n",
                "id": "flow-scripts-tutorial_8"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_9\n\n### Design Goals\n\nRun the `ibex` design in OpenROAD-flow-scripts automated flow from\nRTL-to-GDS using `sky130hd`. Find `ibex` design details\n[here](https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts/blob/master/flow/designs/src/ibex/README.md)\nand the design goals are:\n\n-   Area\n\n```\nMinimum Required Die size: 0 0 798 800 (in micron)\nCore size: 2 2 796 798 (in micron)\n```\n\n-   Timing\n\n```\nClock period to meet timing: 17.4 (in ns)\n```\n\n`ibex` takes approximately 8 minutes on a machine with 8-cores and 16GB RAM.\nThe runtime will vary based on your configuration.\n\nChange your current directory to the `flow` directory.\n\n```shell\ncd flow\n```\n\nRun the complete flow with:\n\n```shell\nmake DESIGN_CONFIG=./designs/sky130hd/ibex/config.mk\n```\n\nAs the flow executes, check out the OpenROAD-flow-scripts directory contents and their\nsignificance.\n\nOpenROAD-flow-scripts can generally restart from a previous partial run. If you have errors which prevent restarting the flow, you may try deleting all generated files and start a fresh run. Errors can occur if a tool crashes or is killed while writing a file. The files for `sky130hd/ibex` as an example can be deleted with:\n\n```shell\nmake clean_all DESIGN_CONFIG=./designs/sky130hd/ibex/config.mk\n```\n\nYou can also delete files related to individual stages of RTL to GDSII conversion like synthesis, floorplanning, macro placement, clock tree synthesis, routing and layout generation with `clean_synth`, `clean_floorplan`, `clean_place`, `clean_cts`, `clean_route`, and `clean_finish`, respectively.\n\n",
                "id": "flow-scripts-tutorial_9"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_10\n\n### Viewing OpenROAD-flow-scripts Directory Structure And Results\n\nOpen a new tab in the terminal and explore the directory structure in\n`flow` by typing `ls` command to view its contents:\n\n```shell\ndesigns logs Makefile objects platforms reports results scripts test util\n```\n\nNavigate through each of the sub-directories above to understand how\nunderlying files are organized.\n\n-   `designs/sky130hd/ibex`\n    Files include: designs make file and SDC file for the `sky130hd`\n    platform and other files for autotuner and metrics.\n\n```\nautotuner.json config.mk constraint_doe.sdc constraint.sdc metadata-base-ok.json rules.json\n```\n\n-   `platforms`\n    Includes public PDKs supported by OpenROAD flow\n\n```\nasap7 nangate45 sky130hd sky130hs sky130io sky130ram\n```\n\n-   `objects/sky130hd/ibex/base`\n    Includes ABC constraints and all the temporary library files used\n    for the completion flow\n\n```\nabc.constr klayout.lyt klayout_tech.lef lib\n```\n\n-   `logs/sky130hd/ibex/base`\n    Logs directory, which contains log files for each flow stage.\n\n| `logs`                 |                        |                       |\n|------------------------|------------------------|-----------------------|\n| `1_1_yosys.log`        | `3_1_place_gp.log`     | `5_2_route.log` |\n| `2_1_floorplan.log`    | `3_2_place_iop.log`    | `6_1_merge.log`       |\n| `2_2_floorplan_io.log` | `3_3_resizer.log`      | `6_report.log`        |\n| `2_3_tdms_place.log`   | `3_4_opendp.log`       |                       |\n| `2_4_floorplan_macro.log`       | `4_1_cts.log`          |                       |\n| `2_5_floorplan_tapcell.log`      | `4_2_cts_fillcell.log` |                       |\n| `2_6_floorplan_pdn.log`          | `5_1_grt.log`    |                       |\n\n\n-   `results/sky130hd/ibex/base`\n    Results directory which contains `.v/.sdc/.odb/.def/.spef` files\n\n| `results`                   |                         |                    |\n|-----------------------------|-------------------------|--------------------|\n| `1_1_yosys.v`               | `3_1_place_gp.odb`      | `5_route.sdc`      |\n| `1_synth.sdc`               | `3_2_place_iop.odb`     | `6_1_fill.odb`     |\n| `1_synth.v`                 | `3_3_place_resized.odb` | `6_1_fill.sdc`     |\n| `2_1_floorplan.odb`         | `3_4_place_dp.odb`      | `6_1_merged.gds`   |\n| `2_2_floorplan_io.odb`      | `3_place.odb`           | `6_final.odb`      |\n| `2_3_floorplan_tdms.odb`    | `3_place.sdc`           | `6_final.gds`      |\n| `2_4_floorplan_macro.odb`   | `4_1_cts.odb`           | `6_final.sdc`      |\n| `2_5_floorplan_tapcell.odb` | `4_2_cts_fillcell.odb`  | `6_final.spef`     |\n| `2_6_floorplan_pdn.odb`     | `4_cts.odb`             | `6_final.v`        |\n| `2_floorplan.odb`           | `4_cts.sdc`             | `output_guide.mod` |\n| `2_floorplan.sdc`           | `4_cts.v`               | `route.guide`      |\n| `2_floorplan.v`             | `5_route.odb`           | `updated_clks.sdc` |\n\n\n-   `reports/sky130hd/ibex/base`\n    Reports directory, which contains congestion report, DRC\n    report, design statistics and antenna log for reference.\n\n| `reports`         |                     |                        |\n|-------------------|---------------------|------------------------|\n| `congestion.rpt`  | `VDD.rpt`           | `VSS.rpt`              |\n| `5_route_drc.rpt` | `final_clocks.webp` | `final_placement.webp` |\n| `antenna.log`     | `final_clocks.webp` | `final.webp`           |\n| `synth_stat.txt`  | `synth_check.txt`   | `final_resizer.webp`   |\n\nThe table below briefly describes the reports directory files.\n\n| File Name              | Description                                              |\n|------------------------|----------------------------------------------------------|\n| `congestion.rpt`       | Gloabl routing congestion if occurred.                   |\n| `5_route_drc.rpt`      | DRC violations if occurred.                              |\n| `final_clocks.webp`    | OR extracted image reference after clock tree synthesis. |\n| `final_resizer.webp`   | OR extracted image reference after resizer.              |\n| `synth_check.txt`      | Synthesis warning/error messages.                        |\n| `antenna.log`          | Antenna check log report.                                |\n| `final_placement.webp` | Extracted image after final placement.                   |\n| `final.webp`           | Extracted image after routing.                           |\n| `synth_stat.txt`       | Post synthesis design statistics log saved here.         |\n\nThe flow completes with the message below by creating a merged final GDS file.\n\n```\n[INFO] Writing out GDS/OAS\n'results/sky130hd/ibex/base/6_1_merged.gds'\ncp results/sky130hd/ibex/base/6_1_merged.gds\nresults/sky130hd/ibex/base/6_final.gds\n```\n\n",
                "id": "flow-scripts-tutorial_10"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_11\n\n## Viewing Results And Logs\n\nOpenROAD-flow-scripts prepends a prefix to each flow stage, as shown below, to\nindicate the position in the RTL-GDS flow. This makes it easier to\nunderstand and debug each flow stage in case of failure.\n\nView `ibex` design logs:\n\n```shell\nls logs/sky130hd/ibex/base/\n```\n\nThe log structure is as follows:\n\n| `logs`                 |                        |                       |\n|------------------------|------------------------|-----------------------|\n| `1_1_yosys.log`        | `3_1_place_gp.log`     | `5_2_route.log` |\n| `2_1_floorplan.log`    | `3_2_place_iop.log`    | `6_1_merge.log`       |\n| `2_2_floorplan_io.log` | `3_3_resizer.log`      | `6_report.log`        |\n| `2_3_tdms_place.log`   | `3_4_opendp.log`       |                       |\n| `2_4_floorplan_macro.log`       | `4_1_cts.log`          |                       |\n| `2_5_floorplan_tapcell.log`      | `4_2_cts_fillcell.log` |                       |\n| `2_6_floorplan_pdn.log`          | `5_1_grt.log`    |                       |\n\n",
                "id": "flow-scripts-tutorial_11"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_12\n\n## Viewing Results And Logs\n\n### Area\n\nView design area and its core utilization:\n\n```\nmake gui_final\nreport_design_area\n```\n\nView the resulting area as:\n\n```\nDesign area 191262 u^2 30% utilization.\n```\n\n",
                "id": "flow-scripts-tutorial_12"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_13\n\n## Viewing Results And Logs\n\n### Timing\n\nUsers can view flow results using the command interface from the shell or\nthe OpenROAD GUI to visualize further and debug. Learn more about the\n[GUI](https://openroad.readthedocs.io/en/latest/main/README.html#gui).\n\n```shell\nmake gui_final\n```\n\nUse the following commands in the `Tcl Commands` section of GUI:\n\n```tcl\nreport_worst_slack\nreport_tns\nreport_wns\n```\n\nNote the worst slack, total negative slack and worst negative slack:\n\n```\nworst slack -0.99\ntns -1.29\nwns -0.99\n```\n\nLearn more about visualizing and tracing time paths across the design\nhierarchy refer to the OpenROAD [GUI](https://openroad.readthedocs.io/en/latest/main/README.html#gui).\n\n",
                "id": "flow-scripts-tutorial_13"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_14\n\n## Viewing Results And Logs\n\n### Power\n\nUse the report command to view individual power components i.e.\nsequential, combinational, macro and power consumed by I/O pads.\n\n```tcl\nreport_power\n```\n\nThe power output is as follows:\n\n```\n--------------------------------------------------------------------------\nGroup                  Internal  Switching    Leakage      Total\n                          Power      Power      Power      Power\n----------------------------------------------------------------\nSequential             5.58e-03   6.12e-04   1.67e-08   6.19e-03  19.0%\nCombinational          9.23e-03   1.71e-02   4.90e-08   2.63e-02  81.0%\nMacro                  0.00e+00   0.00e+00   0.00e+00   0.00e+00   0.0%\nPad                    0.00e+00   0.00e+00   0.00e+00   0.00e+00   0.0%\n----------------------------------------------------------------\nTotal                  1.48e-02   1.77e-02   6.57e-08   3.25e-02 100.0%\n                          45.6%      54.4%       0.0%\n```\n\n",
                "id": "flow-scripts-tutorial_14"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_15\n\n## OpenROAD GUI\n\nThe GUI allows users to select, control, highlight and navigate the\ndesign hierarchy and design objects (nets, pins, instances, paths, etc.)\nthrough detailed visualization and customization options. Find details\non how to use the [GUI](https://openroad.readthedocs.io/en/latest/main/README.html#gui). All the windows\naside from the layout are docking windows that can be undocked.  Also it\ncan be closed and reopened from the Windows menu.\n\n\nNote:  When you are using remote access, you will need to include -Y (or -X) option in your command to\nenable X11 applications to function properly over the network. By using the command \"ssh -Y\" followed\nby the remote servers' address or hostname, you can establish a secure connection and activate X11 forwarding.\nThis feature enables you to run graphical programs on the remote server and have their windows display\non your local machines desktop environment.\n\n\nIn this section, learn how to:\n\n1. Visualize design hierarchy\n2. Load ODB files for floorplan and layout visualization\n3. Trace the synthesized clock tree to view hierarchy and buffers\n4. Use heat maps to view congestion and observe the effect of placement\n5. View and trace critical timing paths\n6. Set display control options\n7. Zoom to object from inspector\n\nIf you have completed the RTL-GDS flow, then proceed to view the final\nGDS file under results directory `./results/sky130hd/ibex/base/`\n\nFor the `ibex` design uncomment the `DESIGN_CONFIG`\nvariable in the `Makefile` available [here](https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts/blob/master/flow/Makefile).\n\n```\n# DESIGN_CONFIG=./designs/sky130hd/gcd/config.mk\nDESIGN_CONFIG=./designs/sky130hd/ibex/config.mk\n# DESIGN_CONFIG=./designs/sky130hd/aes/config.mk\n```\n\n```shell\nmake gui_final\n```\n\n",
                "id": "flow-scripts-tutorial_15"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_16\n\n## OpenROAD GUI\n\n### Viewing Layout Results\n\nThe `make gui_final` command target successively reads and loads the\ntechnology `.odb` files and the parasitics and invokes the\nGUI in these steps:\n\n-   Reads and loads `.odb` files.\n-   Loads `.spef` (parasitics).\n\n",
                "id": "flow-scripts-tutorial_16"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_17\n\n## OpenROAD GUI\n### Visualizing Design Objects And Connectivity\n\nNote the `Display Control` window on the LHS that shows buttons\nfor color, visibility and selection options for various design\nobjects: Layers, Nets, Instances, Blockages, Heatmaps, etc.\n\nThe Inspector window on the RHS allows users to inspect details of\nselected design objects and the timing report.\n\nTry selectively displaying (show/hide) various design objects through\nthe display control window and observing their impact on the display.\n\n",
                "id": "flow-scripts-tutorial_17"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_18\n## OpenROAD GUI\n### Tracing The Clock Tree\n\nView the synthesized clock tree for `ibex` design:\n-   From the top Toolbar Click `Windows` -> `Clock Tree Viewer`\n\n\nOn RHS, click `Clock Tree Viewer` and top right corner, click\n`Update` to view the synthesized clock tree of your design.\n\nView clock tree structure below, the user needs to disable the metal\n`Layers` section on LHS as shown below.\n\n\nFrom the top Toolbar, click on the `Windows` menu to select/hide different\nview options of Scripting, Display control, etc.\n\n",
                "id": "flow-scripts-tutorial_18"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_19\n## OpenROAD GUI\n### Using Heat Maps\n\nFrom the Menu Bar, Click on `Tools` -> `Heat Maps` -> `Placement Density` to view\ncongestion selectively on vertical and horizontal layers.\n\nExpand `Heat Maps` -> `Placement Density` from the Display Control window\navailable on LHS of OpenROAD GUI.\n\nView congestion on all layers between 50-100%:\n\nIn the `Placement density` setup pop-up window, Select `Minimum` -> `50.00%`\n`Maximum` -> `100.00%`\n\nFrom `Display Control`, select `Heat Maps` -> `Routing Congestion` as\nfollows:\n\nFrom `Display Control`, select `Heat Maps` -> `Power Density` as\nfollows:\n\n",
                "id": "flow-scripts-tutorial_19"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_20\n## OpenROAD GUI\n### Viewing Timing Report\n\nClick `Timing` -> `Options` to view and traverse specific timing paths.\nFrom Toolbar, click on the `Timing` icon, View `Timing Report` window added\nat the right side (RHS) of GUI as shown below.\n\n\nIn `Timing Report` Select `Paths` -> `Update`, `Paths` should be integer\nnumbers. The number of timing paths should be displayed in the current\nwindow as follows:\n\n\nSelect `Setup` or `Hold` tabs and view required arrival times and\nslack for each timing path segment.\n\nFor each `Setup` or `Hold` path group, path details have a specific `pin\nname, Time, Delay, Slew and Load` value with the clock to register, register\nto register and register to output data path.\n\n",
                "id": "flow-scripts-tutorial_20"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_21\n## OpenROAD GUI\n### Using Rulers\n\nA ruler can measure the distance between any two objects in the design or\nmetal layer length and width to be measured, etc.\n\nExample of how to measure the distance between VDD and VSS power grid click on:\n\n`Tools` -> `Ruler K`\n\nDistance between VDD and VSS layer is `11.970`\n\n",
                "id": "flow-scripts-tutorial_21"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_22\n## OpenROAD GUI\n### DRC Viewer\n\nYou can use the GUI to trace DRC violations and fix them.\n\nView DRC violations post routing:\n\n```shell\nless ./reports/sky130hd/ibex/base/5_route_drc.rpt\n```\n\nAny DRC violations are logged in the `5_route_drc.rpt` file, which is\nempty otherwise.\n\nFrom OpenROAD GUI, Enable the menu options `Windows` -> `DRC Viewer`. A\n`DRC viewer` window is added on the right side (RHS) of the GUI. From\n`DRC Viewer` -> `Load` navigate to `5_route_drc.rpt`\n\n\nBy selecting DRC violation details, designers can analyze and fix them. Here\nuser will learn how a DRC violation can be traced with the `gcd` design. Refer\nto the following OpenROAD test case for more details.\n\n```shell\ncd ./flow/tutorials/scripts/drt/\nopenroad -gui\n```\n\nIn the `Tcl Commands` section of GUI:\n\n```tcl\nsource drc_issue.tcl\n```\n\nPost detail routing in the log, you can find the number of violations left\nin the design:\n\n```\n[INFO DRT-0199] Number of violations = 7.\n```\n\nBased on `DRC Viewer` steps load `results/5_route_drc.rpt`. GUI as\nfollows\n\n\n`X mark` in the design highlights DRC violations.\n\nFrom `DRC Viewer` on RHS `expand` -> `Short`\n\nThis shows the number of `violations` in the design. Zoom the design\nfor a clean view of the violation:\n\n\n`output53` has overlaps and this causes the `short violation`.\n\nOpen the input DEF file `drc_cts.def` to check the source of the\noverlap.\n\nNote the snippet of DEF file where `output51` and `output53` have\nthe same placed coordinates and hence cause the placement violation.\n\n```\n- output51 sky130_fd_sc_hd__clkbuf_1 + PLACED ( 267260 136000 ) N ;\n- output53 sky130_fd_sc_hd__clkbuf_1 + PLACED ( 267260 136000 ) N ;\n```\n\nUse the test case provided in `4_cts.def` with the changes applied for\nupdated coordinates as follows:\n\n```\n- output51 sky130_fd_sc_hd__clkbuf_1 + PLACED ( 267260 136000 ) N ;\n- output53 sky130_fd_sc_hd__clkbuf_1 + PLACED ( 124660 266560 ) N ;\n```\n\nClose the current GUI and re-load the GUI with the updated DEF to see\nfixed DRC violation in the design:\n\n```shell\nopenroad -gui\nsource drc_fix.tcl\n```\n\nIn the post detail routing log, the user can find the number of violations\nleft in the design:\n\n```\n[INFO DRT-0199] Number of violations = 0.\n```\n\nRouting completed with 0 violations.\n\n",
                "id": "flow-scripts-tutorial_22"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_23\n\n## OpenROAD GUI\n### Tcl Command Interface\n\nExecute OpenROAD-flow-scripts Tcl commands from the GUI. Type `help`\nto view Tcl Commands available. In OpenROAD GUI, at the bottom,\n`TCL commands` executable space is available to run the commands.\nFor example\n\nView `design area`:\n\n```tcl\nreport_design_area\n```\n\nTry the below timing report commands to view timing results interactively:\n\n```tcl\nreport_wns\nreport_tns\nreport_worst_slack\n```\n\n",
                "id": "flow-scripts-tutorial_23"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_24\n\n## OpenROAD GUI\n### Customizing The GUI\n\nCustomize the GUI by creating your own widgets such as menu bars,\ntoolbar buttons, dialog boxes, etc.\n\nRefer to the [GUI](https://openroad.readthedocs.io/en/latest/main/README.html#gui).\n\nCreate `Load_LEF` toolbar button in GUI to automatically load\nspecified `.lef` files.\n\n```shell\nopenroad -gui\n```\n\n\nTo view `load_lef.tcl`, run the command:\n\n```shell\nless ./flow/tutorials/scripts/gui/load_lef.tcl\n```\n\n```tcl\nproc load_lef_sky130 {} {\n    set FLOW_PATH [exec pwd]\n    read_lef $FLOW_PATH/../../../platforms/sky130hd/lef/sky130_fd_sc_hd.tlef\n    read_lef $FLOW_PATH/../../../platforms/sky130hd/lef/sky130_fd_sc_hd_merged.lef\n}\ncreate_toolbar_button -name \"Load_LEF\" -text \"Load_LEF\" -script {load_lef_sky130} -echo\n```\n\nFrom OpenROAD GUI `Tcl commands`:\n\n```tcl\ncd ./flow/tutorials/scripts/gui/\nsource load_lef.tcl\n```\n\n`Load_LEF` toolbar button added as follows:\n\n\n\nFrom Toolbar menus, Click on `Load_LEF.` This loads the specified `sky130`\ntechnology `.tlef` and `merged.lef` file in the current OpenROAD GUI\nas follows:\n\n",
                "id": "flow-scripts-tutorial_24"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_25\n\n\n### Synthesis Explorations\n\n#### Area And Timing Optimization\n\nExplore optimization options using synthesis options: `ABC_AREA` and `ABC_SPEED`.\n\nSet `ABC_AREA=1` for area optimization and `ABC_SPEED=1` for timing optimization.\nUpdate design `config.mk` for each case and re-run the flow to view impact.\n\nTo view `ibex` design [config.mk](https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts/blob/master/flow/designs/sky130hd/ibex/config.mk).\n\n```\n#Synthesis strategies\nexport ABC_AREA = 1\n```\n\nRun `make` command from `flow` directory as follows:\n\n```shell\nmake DESIGN_CONFIG=./designs/sky130hd/gcd/config.mk\n```\n\nThe `gcd` design synthesis results for area and speed optimizations are shown below:\n\n| Synthesis Statistics  | ABC_SPEED                            | ABC_AREA                             |\n|-----------------------|--------------------------------------|--------------------------------------|\n| `Number of wires`     | 224                                  | 224                                  |\n| `Number of wire bits` | 270                                  | 270                                  |\n| `Number of cells`     | 234                                  | 234                                  |\n| `Chip area`           | 2083.248000                          | 2083.248000                          |\n| `Final Design Area`   | Design area 4295 u^2 6% utilization. | Design area 4074 u^2 6% utilization. |\n\nNote: Results for area optimization should be ideally checked after\nfloorplanning to verify the final impact. First, relax the `.sdc` constraint\nand re-run to see area impact. Otherwise, the repair design command will\nincrease the area to meet timing regardless of the netlist produced earlier.\n\n\n",
                "id": "flow-scripts-tutorial_25"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_26\n\n### Floorplanning\n\nThis section describes OpenROAD-flow-scripts floorplanning and\nplacement functions using the GUI.\n\n#### Floorplan Initialization Based On Core And Die Area\n\nRefer to the following OpenROAD built-in examples\n[here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/ifp/test/init_floorplan1.tcl).\n\ninit_floorplan1.tcl:\n```shell\nsource \"helpers.tcl\"\nread_lef Nangate45/Nangate45.lef\nread_liberty Nangate45/Nangate45_typ.lib\nread_verilog reg1.v\nlink_design top\ninitialize_floorplan -die_area \"0 0 1000 1000\" \\\n  -core_area \"100 100 900 900\" \\\n  -site FreePDK45_38x28_10R_NP_162NW_34O\n\nset def_file [make_result_file init_floorplan1.def]\nwrite_def $def_file\ndiff_files init_floorplan1.defok $def_file\n```\nRun the following commands in the terminal in OpenROAD tool root directory to build and view the created\nfloorplan.\n\n```shell\ncd ../tools/OpenROAD/src/ifp/test/\nopenroad -gui\n```\n\nIn `Tcl Commands` section GUI:\n\n```tcl\nsource init_floorplan1.tcl\n```\n\nView the resulting die area \"0 0 1000 1000\" and core area \"100 100 900 900\"\nin microns shown below:\n\n![Absolute Floorplan](./images/absolute_die.webp)\n\n",
                "id": "flow-scripts-tutorial_26"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_27\n\n### Floorplanning\n\n#### Floorplan Based On Core Utilization\n\nRefer to the following OpenROAD built-in examples\n[here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/ifp/test/init_floorplan2.tcl).\ninit_floorplan1.tcl:\n```shell\nsource \"helpers.tcl\"\nread_lef Nangate45/Nangate45.lef\nread_liberty Nangate45/Nangate45_typ.lib\nread_verilog reg1.v\nlink_design top\ninitialize_floorplan -utilization 30 \\\n  -aspect_ratio 0.5 \\\n  -core_space 1 \\\n  -site FreePDK45_38x28_10R_NP_162NW_34O\n\nset def_file [make_result_file init_floorplan2.def]\nwrite_def $def_file\ndiff_files init_floorplan2.defok $def_file\n```\n\nRun the following commands in the terminal in OpenROAD tool root directory to view how the floorplan\ninitialized:\n\n```shell\ncd ../tools/OpenROAD/src/ifp/test/\nopenroad -gui\n```\n\nIn the `Tcl Commands` section of the GUI:\n\n```tcl\nsource init_floorplan2.tcl\n```\n\nView the resulting core utilization of 30 created following floorplan:\n\n![Relative Floorplan](./images/core_util.webp)\n\n",
                "id": "flow-scripts-tutorial_27"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_28\n\n### IO Pin Placement\n\nPlace pins on the boundary of the die on the track grid to minimize net\nwirelengths. Pin placement also creates a metal shape for each pin using\nmin-area rules.\n\nFor designs with unplaced cells, the net wirelength is computed considering\nthe center of the die area as the unplaced cells position.\n\nFind pin placement document [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/ppl/README.md).\n\nRefer to the built-in examples [here](https://github.com/The-OpenROAD-Project/OpenROAD/tree/master/src/ppl/test).\n\nLaunch openroad GUI by running the following command(s) in the terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/ppl/test/\nopenroad -gui\n```\n\nRun [place_pin4.tcl](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/ppl/test/place_pin4.tcl) script to view\npin placement.\n\nplace_pin4.tcl:\n```shell\nsource \"helpers.tcl\"\nread_lef Nangate45/Nangate45.lef\nread_def gcd.def\n\nplace_pin -pin_name clk -layer metal7 -location {40 30} -pin_size {1.6 2.5} -force_to_die_boundary\nplace_pin -pin_name resp_val -layer metal4 -location {12 50} -pin_size {2 2} -force_to_die_boundary\nplace_pin -pin_name req_msg[0] -layer metal10 -location {25 70} -pin_size {4 4} -force_to_die_boundary\n\nplace_pins -hor_layers metal3 -ver_layers metal2 -corner_avoidance 0 -min_distance 0.12\n\nset def_file [make_result_file place_pin4.def]\n\nwrite_def $def_file\n\ndiff_file place_pin4.defok $def_file\n```\n\nFrom the GUI `Tcl commands` section:\n\n```tcl\nsource place_pin4.tcl\n```\n\nView the resulting pin placement in GUI:\n\n![place_pin](./images/place_pin.webp)\n\nIn OpenROAD GUI to enlarge `clk` pin placement, hold mouse right button\nas follows and draw sqaure box in specific location:\n\n![pin_zoom](./images/pin_zoom_RC.webp)\n\nNow `clk` pin zoom to clear view as follows:\n\n![pin_zoomed](./images/pin_zoomed.webp)\n\n",
                "id": "flow-scripts-tutorial_28"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_29\n\n\n### Chip Level IO Pad Placement\n\nIn this section, you will generate an I/O pad ring for the `coyote` design\nusing a Tcl script.\n\nICeWall is a utility to place IO cells around the periphery of a design,\nand associate the IO cells with those present in the netlist of the\ndesign.\n\nFor I/O pad placement using ICeWall refer to the readme file\n[here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/pad/README.md).\n\nRefer to the built-in examples [here](https://github.com/The-OpenROAD-Project/OpenROAD/tree/master/src/pad/test).\n\nLaunch openroad GUI by running the following command(s) in the terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/pad/test/\nopenroad -gui\n```\n\nRun [skywater130_coyote_tc.tcl](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/pad/test/skywater130_coyote_tc.tcl) script\nto view IO pad placement.\n\n\nFrom the GUI `Tcl commands` section:\n\n```tcl\nsource skywater130_coyote_tc.tcl\n```\n\nView the resulting IO pad ring in GUI:\n\n![coyote pad ring](./images/coyote_pad_ring.webp)\n\n",
                "id": "flow-scripts-tutorial_29"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_30\n\n### Power Planning And Analysis\n\nIn this section, you will use the design `gcd` to create a\npower grid and run power analysis.\n\nPdngen is used for power planning. Find the document [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/pdn/README.md).\n\nRefer to the built-in examples [here](https://github.com/The-OpenROAD-Project/OpenROAD/tree/master/src/pdn/test).\n\nLaunch openroad GUI by running the following command(s) in the terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/pdn/test\nopenroad -gui\n```\n\nRun [core_grid_snap.tcl](.(https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/pdn/test/core_grid_snap.tcl)\nto generate power grid for `gcd` design.\n\ncore_grid_snap.tcl:\n```shell\n# test for snapping straps to grid\nsource \"helpers.tcl\"\n\nread_lef Nangate45/Nangate45.lef\nread_def nangate_gcd/floorplan.def\n\nadd_global_connection -net VDD -pin_pattern VDD -power\nadd_global_connection -net VSS -pin_pattern VSS -ground\n\nset_voltage_domain -power VDD -ground VSS\n\ndefine_pdn_grid -name \"Core\"\nadd_pdn_stripe -followpins -layer metal1 -extend_to_core_ring\n\nadd_pdn_stripe -layer metal4 -width 1.0 -pitch 5.0 -offset 2.5 -extend_to_core_ring -snap_to_grid\n\nadd_pdn_ring -grid \"Core\" -layers {metal5 metal6} -widths 2.0 -spacings 2.0 -core_offsets 2.0\n\nadd_pdn_connect -layers {metal5 metal6}\nadd_pdn_connect -layers {metal1 metal6}\nadd_pdn_connect -layers {metal1 metal4}\nadd_pdn_connect -layers {metal4 metal5}\n\npdngen\n\nset def_file [make_result_file core_grid_snap.def]\nwrite_def $def_file\ndiff_files core_grid_snap.defok $def_file\n```\n\n```tcl\nsource core_grid_snap.tcl\n```\nView the resulting power plan for `gcd` design:\n\n![gcd PDN GUI](./images/gcd_pdn_gui.webp)\n\n",
                "id": "flow-scripts-tutorial_30"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_31\n\n#### IR Drop Analysis\nIR drop is the voltage drop in the metal wires constituting the power\ngrid before it reaches the power pins of the standard cells. It becomes\nvery important to limit the IR drop as it affects the speed of the cells\nand overall performance of the chip.\n\nPDNSim is an open-source static IR analyzer.\n\nFeatures:\n\n-   Report worst IR drop.\n-   Report worst current density over all nodes and wire segments in\n    the power distribution network, given a placed and PDN-synthesized design.\n-   Check for floating PDN stripes on the power and ground nets.\n-   Spice netlist writer for power distribution network wire segments.\n\nRefer to the built-in examples [here](https://github.com/The-OpenROAD-Project/OpenROAD/tree/master/src/psm/test).\n\nLaunch openroad by running the following command(s) in the terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/psm/test\nopenroad\n```\n\nRun [gcd_test_vdd.tcl](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/psm/test/gcd_test_vdd.tcl)\nto generate IR drop report for `gcd` design.\n\ngcd_test_vdd.tcl:\n```shell\nsource helpers.tcl\n\nread_lef Nangate45/Nangate45.lef\nread_def Nangate45_data/gcd.def\nread_liberty Nangate45/Nangate45_typ.lib\nread_sdc Nangate45_data/gcd.sdc\n\nset voltage_file [make_result_file gcd_voltage_vdd.rpt]\nset error_file [make_result_file gcd_error_vdd.rpt]\ncheck_power_grid -net VDD\nanalyze_power_grid -vsrc Vsrc_gcd_vdd.loc -outfile $voltage_file -net VDD \\\n  -error_file $error_file\ndiff_files $voltage_file gcd_voltage_vdd.rptok\ndiff_files $error_file gcd_error_vdd.rptok\n```\n\n```tcl\nsource gcd_test_vdd.tcl\n```\n\nFind the IR drop report at the end of the log as follows:\n```\n########## IR report #################\nWorstcase voltage: 1.10e+00 V\nAverage IR drop  : 1.68e-04 V\nWorstcase IR drop: 2.98e-04 V\n######################################\n```\n\n",
                "id": "flow-scripts-tutorial_31"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_32\n\n### Tapcell insertion\n\nTap cells are non-functional cells that can have a well tie, substrate\ntie or both. They are typically used when most or all of the standard\ncells in the library contain no substrate or well taps. Tap cells help\ntie the VDD and GND levels and thereby prevent drift and latch-up.\n\nThe end cap cell or boundary cell is placed at both the ends of each\nplacement row to terminate the row. They protect the standard cell\ngate at the boundary from damage during manufacturing.\n\nTap cells are placed after the macro placement and power rail creation.\nThis stage is called the pre-placement stage. Tap cells are placed in a\nregular interval in each row of placement. The maximum distance between\nthe tap cells must be as per the DRC rule of that particular technology library.\n\nThe figures below show two examples of tapcell insertion. When only the\n`-tapcell_master` and `-endcap_master` masters are given, the tapcell placement\nis similar to Figure 1. When the remaining masters are give, the tapcell\nplacement is similar to Figure 2.\n\nRefer to the GUI figures to highlight well tap and end cap cells. The image\ndoes not differentiate and just shows a bunch of rectangles.\n\n| <img src=\"./images/tapcell_example1.svg\" width=450px> | <img src=\"./images/tapcell_example2.svg\" width=450px> |\n|:--:|:--:|\n| Figure 1: Tapcell insertion representation | Figure 2:  Tapcell insertion around macro representation |\n\nRefer to the following built-in example [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/tap/test/gcd_nangate45.tcl)\nto learn about Tap/endcap cell insertion.\n\ngcd_nangate45.tcl:\n```shell\nsource \"helpers.tcl\"\nread_lef Nangate45/Nangate45_tech.lef\nread_lef Nangate45/Nangate45_stdcell.lef\nread_def gcd_nangate45.def\n\nset def_file [make_result_file gcd_nangate45.def]\n\ntapcell -distance \"20\" -tapcell_master \"TAPCELL_X1\" -endcap_master \"TAPCELL_X1\"\n\nwrite_def $def_file\n\ndiff_file gcd_nangate45.defok $def_file\n```\n\nTo view this in OpenROAD GUI by running the following command(s) in the terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/tap/test/\nopenroad -gui\n```\n\nIn the `Tcl Commands` section of GUI\n\n```tcl\nsource gcd_nangate45.tcl\n```\n\nView the resulting tap cell insertion as follows:\n\n![Tap_Cell_Insertion](./images/tapcell_insertion_view.webp)\n\n",
                "id": "flow-scripts-tutorial_32"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_33\n\n### Tie Cells\n\nThe tie cell is a standard cell, designed specially to provide the high\nor low signal to the input (gate terminal) of any logic gate.\nWhere ever netlist is having any pin connected to 0 logic or 1 logic\n(like .A(1'b0) or .IN(1'b1), a tie cell gets inserted there.\n\nRefer to the following built-in example [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/ifp/test/tiecells.tcl)\nto learn about Tie cell insertion.\n\nTo check this in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/ifp/test/\nopenroad\nsource tiecells.tcl\n```\n\nRefer the following verilog code which have tie high/low net.\n[here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/ifp/test/tiecells.v)\n```\nAND2_X1 u2 (.A1(r1q), .A2(1'b0), .ZN(u2z0));\nAND2_X1 u3 (.A1(u1z), .A2(1'b1), .ZN(u2z1));\n```\nWith following `insert_tiecells` command:\n```\ninsert_tiecells LOGIC0_X1/Z -prefix \"TIE_ZERO_\"\ninsert_tiecells LOGIC1_X1/Z\n```\nDuring floorplan stage, those nets converted to tiecells as follows\nbased on library(This is Nangate45 specific):\n```\n[INFO IFP-0030] Inserted 1 tiecells using LOGIC0_X1/Z.\n[INFO IFP-0030] Inserted 1 tiecells using LOGIC1_X1/Z.\n```\n\n",
                "id": "flow-scripts-tutorial_33"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_34\n\n### Macro or Standard Cell Placement\n\n#### Macro Placement\n\nIn this section, you will explore various placement options for macros\nand standard cells and study the impact on area and timing.\n\nRefer to the following built-in example [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/gpl/test/macro01.tcl)\nto learn about macro placement.\n\nPlacement density impacts how widely standard cells are placed in the\ncore area. To view this in OpenROAD GUI run the following command(s) in the terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/gpl/test/\nopenroad -gui\n```\n\nIn the `Tcl Commands` section of GUI\n\nmacro01.tcl:\n```shell\nsource helpers.tcl\nset test_name macro01 \nread_lef ./nangate45.lef\nread_lef ./bp_be_top_macro.lef\nread_def ./$test_name.def\n\nglobal_placement -density 0.7\nset def_file [make_result_file $test_name.def]\nwrite_def $def_file\ndiff_file $def_file $test_name.defok\nsource report_hpwl.tcl\n```\n\n```tcl\nsource macro01.tcl\n```\n\nRead the resulting macro placement with a complete core view:\n\n| <img src=\"./images/macro_place_full_view.webp\" width=450px> | <img src=\"./images/macro_place_close_view.webp\" width=450px> |\n|:--:|:--:|\n| Figure 1: With density 0.7 | Figure 2: Zoomed view of macro and std cell placement|\n\nReduce the placement density and observe the impact on placement, by\nrunning below command in `Tcl Commands` section of GUI:\n\n```tcl\nglobal_placement -density 0.6\n```\n\nRead the resulting macro placement with a complete core view:\n\n| <img src=\"./images/placement_density_06_full.webp\" width=450px> | <img src=\"./images/placement_density_06_zoomed.webp\" width=450px> |\n|:--:|:--:|\n| Figure 1: With density 0.6 | Figure 2: Zoomed view of macro and std cell placement |\n\n",
                "id": "flow-scripts-tutorial_34"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_35\n\n### Macro or Standard Cell Placement\n\n##### Macro Placement With Halo Spacing\n\nExplore macro placement with halo spacing, refer to the example\n[here]((https://github.com/The-OpenROAD-Project/OpenROAD/tree/master/src/mpl/test/).\n\nLaunch GUI by running the following command(s) in the terminal in OpenROAD tool root directory:\n```shell\ncd ../tools/OpenROAD/src/mpl/test\nopenroad -gui\n```\n\nIn the `Tcl Commands` section of GUI:\n\n```tcl\nsource helpers.tcl\nsource level3.tcl\nglobal_placement\n```\n\nDEF file without halo spacing\n\n![gcd without halo spacing](./images/without_halo.webp)\n\nNow increase the halo width for better routing resources.\n\nIn the `Tcl Commands` section of GUI:\n\n```tcl\nmacro_placement -halo {0.5 0.5}\n```\n\nOverlapping macros placed `0.5` micron H/V halo around macros.\n\n![gcd with halo spacing](./images/with_halo.webp)\n\n",
                "id": "flow-scripts-tutorial_35"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_36\n\n### Macro or Standard Cell Placement\n\n#### Defining Placement Density\n\nTo learn on placement density strategies for `ibex` design, go to\n`OpenROAD-flow-scripts/flow`. Type:\n\n```shell\nopenroad -gui\n```\n\nEnter the following commands in the `Tcl Commands` section of GUI\n\n```tcl\nread_lef ./platforms/sky130hd/lef/sky130_fd_sc_hd.tlef\nread_lef ./platforms/sky130hd/lef/sky130_fd_sc_hd_merged.lef\nread_def ./results/sky130hd/ibex/base/3_place.def\n```\n![ibex placement density 60](./images/ibex_pl_60.webp)\n\nChange `CORE_UTILIZATION` and `PLACE_DENSITY` for the `ibex` design\n`config.mk` as follows.\n\nView `ibex` design `config.mk`\n[here](https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts/blob/master/flow/designs/sky130hd/ibex/config.mk).\n\n```\nexport CORE_UTILIZATION = 40\nexport PLACE_DENSITY_LB_ADDON = 0.1\n```\n\nRe-run the `ibex` design with the below command:\n\n```shell\nmake DESIGN_CONFIG=./designs/sky130hd/ibex/config.mk\n```\n\nView the `ibex` design placement density heat map as shown below:\n\n![ibex placement density 50](./images/ibex_pl_50.webp)\n\nSo from above, GUI understood that change in `CORE_UTILIZATION` from 20\nto 40 and placement density default 0.60 to 0.50 changes standard cell\nplacement became widely spread.\n\n",
                "id": "flow-scripts-tutorial_36"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_37\n\n### Timing Optimizations\n\n#### Timing Optimization Using repair_design\n\nThe `repair_design` command inserts buffers on nets to repair `max\nslew, max capacitance and max fanout` violations and on long wires to\nreduce RC delay. It also resizes gates to normalize slews. Use\n`estimate_parasitics -placement` before `repair_design` to account\nfor estimated post-placement parasitics.\n\nRefer to the built-in example [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/rsz/test/repair_slew1.tcl).\n\nLaunch GUI by running the following command(s) in the terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/rsz/test/\nopenroad -gui\n```\n\nCopy and paste the below commands in the `Tcl Commands` section of GUI.\n\n```tcl\nsource \"helpers.tcl\"\nsource \"hi_fanout.tcl\"\nread_liberty Nangate45/Nangate45_typ.lib\nread_lef Nangate45/Nangate45.lef\nset def_file [make_result_file \"repair_slew1.def\"]\nwrite_hi_fanout_def $def_file 30\nread_def $def_file\n\ncreate_clock -period 1 clk1\nset_wire_rc -layer metal3\n\nestimate_parasitics -placement\nset_max_transition .05 [current_design]\n\nputs \"Found [sta::max_slew_violation_count] violations\"\n```\n\nThe number of violations log as:\n\n```\nFound 31 violations\n```\n\nThese violations were fixed by:\n\n```tcl\nrepair_design\n```\n\nThe log is as follows:\n\n```\n[INFO RSZ-0058] Using max wire length 853um.\n[INFO RSZ-0039] Resized 1 instance.\n```\n\nTo view violation counts again:\n\n```tcl\nputs \"Found [sta::max_slew_violation_count] violations\"\n```\n\nThe log follows:\n\n```\nFound 0 violations\n```\n\n`repair_design` fixed all 31 violations.\n\n",
                "id": "flow-scripts-tutorial_37"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_38\n\n### Timing Optimizations\n\n#### Timing Optimization Using repair_timing\n\nThe `repair_timing` command repairs setup and hold violations. It was\nrun after clock tree synthesis with propagated clocks.\n\nWhile repairing hold violations, buffers are not inserted since that may\ncause setup violations unless '-allow_setup_violations' is specified.\nUse `-slack_margin` to add additional slack margin.\n\n",
                "id": "flow-scripts-tutorial_38"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_39\n\n### Timing Optimizations\n\n#### Timing Optimization Based On Multiple Corners\n\nOpenROAD supports multiple corner analysis to calculate worst-case setup\nand hold violations.\n\nSetup time optimization is based on the slow corner or the best case when\nthe launch clock arrives later than the data clock.\nHold time optimization is based on the fast corner or the best case when\nthe launch clock arrives earlier than the capture clock.\n\nRefer to the following `gcd` design on `repair_timing` with fast and slow\ncorners.\n\nRefer to the built-in example [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/test/gcd_sky130hd_fast_slow.tcl).\n\ngcd_sky130hd_fast_slow.tcl:\n```shell\n# gcd flow with fast/slow corners\nsource \"helpers.tcl\"\nsource \"flow_helpers.tcl\"\nsource \"sky130hd/sky130hd.vars\"\n\nset synth_verilog \"gcd_sky130hd.v\"\nset design \"gcd\"\nset top_module \"gcd\"\nset sdc_file \"gcd_sky130hd.sdc\"\nset die_area {0 0 299.96 300.128}\nset core_area {9.996 10.08 289.964 290.048}\n\nset max_drv_count 1\n# liberty units (ns)\nset setup_slack_limit -7.0\nset hold_slack_limit 0.0\n\ndefine_corners fast slow\nset power_corner \"fast\"\nsource -echo flow.tcl\n```\n\nRun the following commands in the terminal:\n```shell\ncd ../../test/\nopenroad\nsource gcd_sky130hd_fast_slow.tcl\n```\n\nThe resulting `worst slack`, `TNS`:\n\n```\nreport_worst_slack -min -digits 3\nworst slack 0.321\nreport_worst_slack -max -digits 3\nworst slack -16.005\nreport_tns -digits 3\ntns -529.496\n```\n\n",
                "id": "flow-scripts-tutorial_39"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_40\n\n### Timing Optimizations\n\n#### Fixing Setup Violations\n\nTo fix setup timing path violations, use `repair_timing -setup.`\n\nRefer to the following built-in example to learn more about fixing setup\ntiming violations.\n\nRefer to the built-in example [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/rsz/test/repair_setup4.tcl).\n\nLaunch OpenROAD in an interactive mode by running the following command(s) in the terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/rsz/test/\nopenroad\n```\n\nCopy and paste the following Tcl commands.\n\n```tcl\ndefine_corners fast slow\nread_liberty -corner slow Nangate45/Nangate45_slow.lib\nread_liberty -corner fast Nangate45/Nangate45_fast.lib\nread_lef Nangate45/Nangate45.lef\nread_def repair_setup1.def\ncreate_clock -period 0.3 clk\nset_wire_rc -layer metal3\nestimate_parasitics -placement\nreport_checks -fields input -digits 3\n```\n\nView the generated timing report with the slack violation.\n\n```\nStartpoint: r1 (rising edge-triggered flip-flop clocked by clk)\nEndpoint: r2 (rising edge-triggered flip-flop clocked by clk)\nPath Group: clk\nPath Type: max\nCorner: slow\n\n   Delay     Time   Description\n-----------------------------------------------------------\n   0.000    0.000   clock clk (rise edge)\n   0.000    0.000   clock network delay (ideal)\n   0.000    0.000 ^ r1/CK (DFF_X1)\n   0.835    0.835 ^ r1/Q (DFF_X1)\n   0.001    0.836 ^ u1/A (BUF_X1)\n   0.196    1.032 ^ u1/Z (BUF_X1)\n   0.001    1.033 ^ u2/A (BUF_X1)\n   0.121    1.154 ^ u2/Z (BUF_X1)\n   0.001    1.155 ^ u3/A (BUF_X1)\n   0.118    1.273 ^ u3/Z (BUF_X1)\n   0.001    1.275 ^ u4/A (BUF_X1)\n   0.118    1.393 ^ u4/Z (BUF_X1)\n   0.001    1.394 ^ u5/A (BUF_X1)\n   0.367    1.761 ^ u5/Z (BUF_X1)\n   0.048    1.809 ^ r2/D (DFF_X1)\n            1.809   data arrival time\n\n   0.300    0.300   clock clk (rise edge)\n   0.000    0.300   clock network delay (ideal)\n   0.000    0.300   clock reconvergence pessimism\n            0.300 ^ r2/CK (DFF_X1)\n  -0.155    0.145   library setup time\n            0.145   data required time\n-----------------------------------------------------------\n            0.145   data required time\n           -1.809   data arrival time\n-----------------------------------------------------------\n           -1.664   slack (VIOLATED)\n\n```\n\nFix setup violation using:\n\n```tcl\nrepair_timing -setup\n```\n\nThe log is as follows:\n\n```\n[INFO RSZ-0040] Inserted 4 buffers.\n[INFO RSZ-0041] Resized 16 instances.\n[WARNING RSZ-0062] Unable to repair all setup violations.\n```\n\nReduce the clock frequency by increasing the clock period to `0.9` and re-run\n`repair_timing` to fix the setup violation warnings. Such timing violations\nare automatically fixed by the `resizer` `post CTS` and `global routing.`\n\n```yvl\ncreate_clock -period 0.9 clk\nrepair_timing -setup\n```\n\nTo view timing logs post-repair timing, type:\n\n```tcl\nreport_checks -fields input -digits 3\n```\n\nThe log is as follows:\n\n```\nStartpoint: r1 (rising edge-triggered flip-flop clocked by clk)\nEndpoint: r2 (rising edge-triggered flip-flop clocked by clk)\nPath Group: clk\nPath Type: max\nCorner: slow\n\n   Delay     Time   Description\n-----------------------------------------------------------\n   0.000    0.000   clock clk (rise edge)\n   0.000    0.000   clock network delay (ideal)\n   0.000    0.000 ^ r1/CK (DFF_X1)\n   0.264    0.264 v r1/Q (DFF_X1)\n   0.002    0.266 v u1/A (BUF_X4)\n   0.090    0.356 v u1/Z (BUF_X4)\n   0.003    0.359 v u2/A (BUF_X8)\n   0.076    0.435 v u2/Z (BUF_X8)\n   0.003    0.438 v u3/A (BUF_X8)\n   0.074    0.512 v u3/Z (BUF_X8)\n   0.003    0.515 v u4/A (BUF_X8)\n   0.077    0.592 v u4/Z (BUF_X8)\n   0.005    0.597 v u5/A (BUF_X16)\n   0.077    0.674 v u5/Z (BUF_X16)\n   0.036    0.710 v r2/D (DFF_X1)\n            0.710   data arrival time\n\n   0.900    0.900   clock clk (rise edge)\n   0.000    0.900   clock network delay (ideal)\n   0.000    0.900   clock reconvergence pessimism\n            0.900 ^ r2/CK (DFF_X1)\n  -0.172    0.728   library setup time\n            0.728   data required time\n-----------------------------------------------------------\n            0.728   data required time\n           -0.710   data arrival time\n-----------------------------------------------------------\n            0.019   slack (MET)\n```\n\n",
                "id": "flow-scripts-tutorial_40"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_41\n\n### Timing Optimizations\n#### Fixing Hold Violations\n\nTo fix hold violation for the design, command to use `repair_timing\n-hold`\n\nRefer to the example [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/rsz/test/repair_hold10.tcl)\nto learn more about fixing hold violations.\n\nCheck hold violation post-global routing using the following Tcl\ncommands. Run below steps in terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/rsz/test/\nopenroad -gui\n```\n\nCopy and paste the below commands in the `Tcl Commands` section of GUI.\n\n```tcl\nsource helpers.tcl\nread_liberty sky130hd/sky130hd_tt.lib\nread_lef sky130hd/sky130hd.tlef\nread_lef sky130hd/sky130hd_std_cell.lef\nread_def repair_hold10.def\ncreate_clock -period 2 clk\nset_propagated_clock clk\nset_wire_rc -resistance 0.0001 -capacitance 0.00001\nset_routing_layers -signal met1-met5\nglobal_route\nestimate_parasitics -global_routing\nreport_worst_slack -min\n```\n\nRead the resulting worst slack as:\n\n```\nworst slack -1.95\n```\n\nThe above worst slack was fixed with:\n\n```tcl\nrepair_timing -hold\n```\n\nThe log is as follows:\n\n```\n[INFO RSZ-0046] Found 2 endpoints with hold violations.\n[INFO RSZ-0032] Inserted 5 hold buffers.\n```\n\nRe-check the slack value after repair_timing. Type:\n\n```tcl\nreport_worst_slack -min\n```\n\nThe result worst slack value is as follows:\n\n```\nworst slack 0.16\n```\n\nNote that the worst slack is now met and the hold violation was fixed by\nthe resizer.\n",
                "id": "flow-scripts-tutorial_41"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_42\n\n### Clock Tree Synthesis\n\nTo perform clock tree synthesis `clock_tree_synthesis` flow command used.\nThe OpenROAD-flow-scripts automatically generates a well-balanced clock tree post-placement.\nIn this section, you will learn details about the building and visualize the\nclock tree.\n\nRefer to the built-in example [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/cts/test/simple_test.tcl).\n\nLaunch OpenROAD GUI by running the following command(s) in the terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/cts/test/\nopenroad -gui\n```\n\nTo build the clock tree, run the following commands in `Tcl Commands` of\nGUI:\n\n```tcl\nread_lef Nangate45/Nangate45.lef\nread_liberty Nangate45/Nangate45_typ.lib\nread_def \"16sinks.def\"\ncreate_clock -period 5 clk\nset_wire_rc -clock -layer metal3\nclock_tree_synthesis -root_buf CLKBUF_X3 \\\n                     -buf_list CLKBUF_X3 \\\n                     -wire_unit 20\n```\n\nLayout view before CTS as follows:\n\n![Layout before CTS](./images/Layout_before_CTS.webp)\n\nLayout view after CTS can be viewed with `Update` option.\n\n![Layout after CTS](./images/Layout_after_CTS.webp)\n\nHere we explore how clock tree buffers are inserted to balance the clock\ntree structure.\n\nRefer to the built-in example [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/cts/test/balance_levels.tcl).\n\nGenerate a clock- tree that is unbalanced first, then explore the\ncreation of a well-balanced clock tree.\n\nLaunch OpenROAD GUI by running the following command(s) in the terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/cts/test/\nopenroad -gui\n```\n\nUse the following commands in the `TCL commands` section of GUI:\n\n```tcl\nsource \"helpers.tcl\"\nsource \"cts-helpers.tcl\"\nread_liberty Nangate45/Nangate45_typ.lib\nread_lef Nangate45/Nangate45.lef\nset block [make_array 300 200000 200000 150]\nsta::db_network_defined\ncreate_clock -period 5 clk\nset_wire_rc -clock -layer metal5\n```\n\nThe clock tree structure is as follows with unbalanced mode.\n\n![Unbalanced Clock tree](./images/unbalanced_clock_tree.webp)\n\nUse the `clock_tree_synthesis` command to balance this clock tree structure\nwith buffers. See the format as follows.\n\n```tcl\nclock_tree_synthesis -root_buf CLKBUF_X3 \\\n                     -buf_list CLKBUF_X3 \\\n                     -wire_unit 20 \\\n                     -post_cts_disable \\\n                     -sink_clustering_enable \\\n                     -distance_between_buffers 100 \\\n                     -sink_clustering_size 10 \\\n                     -sink_clustering_max_diameter 60 \\\n                     -balance_levels \\\n                     -num_static_layers 1\n```\n\nTo view the balanced clock tree after CTS, in GUI Toolbar, select\n\n`Clock Tree Viewer` and click `Update` to view the resulting clock\ntree in GUI as follows:\n\n![Balanced Clock Tree](./images/balanced_clock_tree.webp)\n\n",
                "id": "flow-scripts-tutorial_42"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_43\n\n### Clock Tree Synthesis\n\n#### Reporting Clock Skews\n\nThe OpenROAD-flow-scripts flow automatically fixes any skew issues that could potentially\ncause hold violations downstream in the timing path.\n\n```tcl\nreport_clock_skew\n```\n\nFor the `ibex` design, refer to the following logs to view clock skew reports.\n\n```shell\nless logs/sky130hd/ibex/base/4_1_cts.log\n```\n\n```\ncts pre-repair report_clock_skew\n--------------------------------------------------------------------------\nClock core_clock\nLatency      CRPR       Skew\n_28453_/CLK ^\n   5.92\n_29312_/CLK ^\n   1.41      0.00       4.51\n```\n\n```\ncts post-repair report_clock_skew\n--------------------------------------------------------------------------\nClock core_clock\nLatency      CRPR       Skew\n_28453_/CLK ^\n   5.92\n_29312_/CLK ^\n   1.41      0.00       4.51\n```\n\n```\ncts final report_clock_skew\n--------------------------------------------------------------------------\nClock core_clock\nLatency      CRPR       Skew\n_27810_/CLK ^\n   5.97\n_29266_/CLK ^\n   1.41      0.00       4.56\n```\n\n",
                "id": "flow-scripts-tutorial_43"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_44\n\n### Clock Tree Synthesis\n\n#### Reporting CTS Metrics\n\nRun `report_cts` command to view useful metrics such as number of clock\nroots, number of buffers inserted, number of clock subnets and number of\nsinks.\n\nRefer to the built-in examples [here](https://github.com/The-OpenROAD-Project/OpenROAD/tree/master/src/cts/test).\n\nRun these Tcl commands in the terminal in OpenROAD tool root directory:\n\n```\ncd ../tools/OpenROAD/src/cts/test/\nopenroad\nsource post_cts_opt.tcl\nreport_cts\n```\n\nCTS metrics are as follows for the current design.\n\n```\n[INFO CTS-0003] Total number of Clock Roots: 1.\n[INFO CTS-0004] Total number of Buffers Inserted: 35.\n[INFO CTS-0005] Total number of Clock Subnets: 35.\n[INFO CTS-0006] Total number of Sinks: 301.\n```\n\n",
                "id": "flow-scripts-tutorial_44"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_45\n\n### Clock Tree Synthesis\n\n### Adding Filler Cells\n\nFiller cells fills gaps between detail-placed instances to connect the\npower and ground rails in the rows. Filler cells have no logical\nconnectivity. These cells are provided continuity in the rows for VDD\nand VSS nets and it also contains substrate nwell connection to improve\nsubstrate biasing.\n\n`filler_masters` is a list of master/macro names to use for\nfilling the gaps.\n\nRefer to the following built-in example [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/dpl/test/fillers1.tcl)\nto learn about filler cell insertion.\n\nTo view this in OpenROAD GUI run the following command(s) in the terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/grt/test/\nopenroad -gui\n```\n\nIn the `Tcl Commands` section of GUI,run following commands:\n\n```tcl\nsource \"helpers.tcl\"\nread_lef \"Nangate45/Nangate45.lef\"\nread_def \"gcd.def\"\n```\n\nLoaded DEF view without filler insertion:\n\n![Without_Fill_Cell_Insertion](./images/wo_fillcell_insertion.webp)\n\nRun following commands for filler cell insertion:\n```\nset filler_master [list FILLCELL_X1 FILLCELL_X2 FILLCELL_X4 FILLCELL_X8 FILLCELL_X16]\nfiller_placement $filler_master\n```\n\nView the resulting fill cell insertion as follows:\n\n![Fill_Cell_Insertion](./images/fillcell_insertion.webp)\n\nFiller cells removed with `remove_fillers` command.\n\n",
                "id": "flow-scripts-tutorial_45"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_46\n\n### Global Routing\n\nThe global router analyzes available routing resources and automatically\nallocates them to avoid any  H/V  overflow violations for optimal routing. \nIt generates a congestion report for GCells showing total resources, demand,\nutilization, location and the H/V violation status. If there are no violations\nreported then the design can proceed to detail routing.\n\nRefer to the built-in example [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/grt/test/gcd.tcl).\n\nLaunch OpenROAD GUI by running the following command(s) in the terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/grt/test/\nopenroad -gui\n```\n\ngcd.tcl:\n```shell\n# check route guides for gcd_nangate45. def file from the openroad-flow\nsource \"helpers.tcl\"\nread_lef \"Nangate45/Nangate45.lef\"\nread_def \"gcd.def\"\n\nset guide_file [make_result_file gcd.guide]\n\nglobal_route -verbose\n\nwrite_guides $guide_file\n\ndiff_file gcd.guideok $guide_file\n```\n\nTo run the global routing, run the following commands in `Tcl Commands` of\nGUI:\n\n```tcl\nsource gcd.tcl\n```\n\nRouting resource and congestion analysis done with below log:\n```\n[INFO GRT-0096] Final congestion report:\nLayer         Resource        Demand        Usage (%)    Max H / Max V / Total Overflow\n---------------------------------------------------------------------------------------\nmetal1           31235          1651            5.29%             0 /  0 /  0\nmetal2           24628          1652            6.71%             0 /  0 /  0\nmetal3           33120            40            0.12%             0 /  0 /  0\nmetal4           15698             0            0.00%             0 /  0 /  0\nmetal5           15404             0            0.00%             0 /  0 /  0\nmetal6           15642             0            0.00%             0 /  0 /  0\nmetal7            4416             0            0.00%             0 /  0 /  0\nmetal8            4512             0            0.00%             0 /  0 /  0\nmetal9            2208             0            0.00%             0 /  0 /  0\nmetal10           2256             0            0.00%             0 /  0 /  0\n---------------------------------------------------------------------------------------\nTotal           149119          3343            2.24%             0 /  0 /  0\n\n[INFO GRT-0018] Total wirelength: 10598 um\n[INFO GRT-0014] Routed nets: 563\n```\n\nView the resulting global routing in GUI as follows:\n\n![Global Route](./images/global_route_gcd.webp)\n\n",
                "id": "flow-scripts-tutorial_46"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_47\n\n\n### Detail Routing\n\nTritonRoute is an open-source detailed router for modern industrial designs.\nThe router consists of several main building blocks, including pin access\nanalysis, track assignment, initial detailed routing, search and repair, and a DRC engine.\n\nRefer to the built-in example [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/drt/test/gcd_nangate45.tcl).\n\nLaunch OpenROAD GUI by running the following command(s) in the terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/drt/test/\nopenroad -gui\n```\n\nTo run the detail routing, run the following commands in `Tcl Commands` of\nGUI:\n\n```tcl\nread_lef Nangate45/Nangate45_tech.lef\nread_lef Nangate45/Nangate45_stdcell.lef\nread_def gcd_nangate45_preroute.def\nread_guides gcd_nangate45.route_guide\nset_thread_count [expr [exec getconf _NPROCESSORS_ONLN] / 4]\ndetailed_route -output_drc results/gcd_nangate45.output.drc.rpt \\\n               -output_maze results/gcd_nangate45.output.maze.log \\\n               -verbose 1\nwrite_db gcd_nangate45.odb\n```\n\nFor successful routing, DRT will end with 0 violations.\n\nLog as follows:\n\n```\n[INFO DRT-0199]   Number of violations = 0.\n[INFO DRT-0267] cpu time = 00:00:00, elapsed time = 00:00:00, memory = 674.22 (MB), peak = 686.08 (MB)\nTotal wire length = 5680 um.\nTotal wire length on LAYER metal1 = 19 um.\nTotal wire length on LAYER metal2 = 2798 um.\nTotal wire length on LAYER metal3 = 2614 um.\nTotal wire length on LAYER metal4 = 116 um.\nTotal wire length on LAYER metal5 = 63 um.\nTotal wire length on LAYER metal6 = 36 um.\nTotal wire length on LAYER metal7 = 32 um.\nTotal wire length on LAYER metal8 = 0 um.\nTotal wire length on LAYER metal9 = 0 um.\nTotal wire length on LAYER metal10 = 0 um.\nTotal number of vias = 2223.\nUp-via summary (total 2223):.\n\n---------------\n active       0\n metal1    1151\n metal2    1037\n metal3      22\n metal4       7\n metal5       4\n metal6       2\n metal7       0\n metal8       0\n metal9       0\n---------------\n           2223\n\n\n[INFO DRT-0198] Complete detail routing.\n```\n\nView the resulting detail routing in GUI as follows:\n\n![Detail Routing](./images/sky130_gcd_route.webp)\n\n",
                "id": "flow-scripts-tutorial_47"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_48\n\n### Antenna Checker\n\nAntenna Violation occurs when the antenna ratio exceeds a value specified\nin a Process Design Kit (PDK). The antenna ratio is the ratio of the gate\narea to the gate oxide area. The amount of charge collection is determined\nby the area/size of the conductor (gate area).\n\nThis tool checks antenna violations and generates a report to indicate violated nets.\n\nRefer to the built-in example [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/ant/test/ant_check.tcl).\n\nLaunch OpenROAD by running the following command(s) in the terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/ant/test/\nopenroad\n```\n\nTo extract antenna violations, run the following commands:\n\n```tcl\nread_lef ant_check.lef\nread_def ant_check.def\n\ncheck_antennas -verbose\nputs \"violation count = [ant::antenna_violation_count]\"\n\n# check if net50 has a violation\nset net \"net50\"\nputs \"Net $net violations: [ant::check_net_violation $net]\"\n```\n\nThe log as follows:\n\n```\n[INFO ANT-0002] Found 1 net violations.\n[INFO ANT-0001] Found 2 pin violations.\nviolation count = 1\nNet net50 violations: 1\n```\n\n",
                "id": "flow-scripts-tutorial_48"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_49\n\n### Metal Fill\n\nMetal fill is a mandatory step at advanced nodes to ensure manufacturability\nand high yield. It involves filling the empty or white spaces near the\ndesign with metal polygons to ensure regular planarization of the wafer.\n\nThis module inserts floating metal fill shapes to meet metal density\ndesign rules while obeying DRC constraints. It is driven by a json\nconfiguration file.\n\nCommand used as follows:\n```tcl\ndensity_fill -rules <json_file> [-area <list of lx ly ux uy>]\n```\nIf -area is not specified, the core area will be used.\n\nTo run metal fill post route, run the following:\n```shell\ncd flow/tutorials/scripts/metal_fill\nopenroad -gui\nsource \"helpers.tcl\"\nread_db ./5_route.odb\n```\nLayout before adding metal fill is as follows:\n![Detail Routing](./images/sky130_gcd_route.webp)\n\nTo add metal fill, run the command:\n```tcl\ndensity_fill -rules ../../../platforms/sky130hd/fill.json\n```\n\nLayout after adding metal fill insertion is as follows:\n![Metal Fill](./images/metal_fill_view.webp)\n\nMetal fill view can enabled with `Misc` and enable `Fills` check box.\n\n",
                "id": "flow-scripts-tutorial_49"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_50\n\n### Parasitics Extraction\n\nOpenRCX is a Parasitic Extraction (PEX, or RCX) tool that works on OpenDB design APIs.\nIt extracts routed designs based on the LEF/DEF layout model.\n\nOpenRCX stores resistance, coupling capacitance and ground (i.e., grounded) capacitance\non OpenDB objects with direct pointers to the associated wire and via db\nobjects. Optionally, OpenRCX can generate a `.spef` file.\n\nRefer to the built-in example [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/rcx/test/45_gcd.tcl).\n\nLaunch OpenROAD tool by running the following command(s) in the terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/rcx/test/\nopenroad\n```\n\n45_gcd:\n```shell\nsource helpers.tcl\n\nset test_nets \"\"\n\nread_lef Nangate45/Nangate45.lef\nread_liberty Nangate45/Nangate45_typ.lib\nread_def 45_gcd.def\n\n# Load via resistance info\nsource 45_via_resistance.tcl\n\ndefine_process_corner -ext_model_index 0 X\nextract_parasitics -ext_model_file 45_patterns.rules \\\n      -max_res 0 -coupling_threshold 0.1\n\nset spef_file [make_result_file 45_gcd.spef] \nwrite_spef $spef_file -nets $test_nets\n\ndiff_files 45_gcd.spefok $spef_file \"^\\\\*(DATE|VERSION)\"\n```\n\nTo run parasitics for gcd design:\n```tcl\nsource 45_gcd.tcl\n```\n\nThe log as follows:\n```\n[INFO ODB-0222] Reading LEF file: Nangate45/Nangate45.lef\n[INFO ODB-0223]     Created 22 technology layers\n[INFO ODB-0224]     Created 27 technology vias\n[INFO ODB-0225]     Created 135 library cells\n[INFO ODB-0226] Finished LEF file:  Nangate45/Nangate45.lef\n[INFO ODB-0127] Reading DEF file: 45_gcd.def\n[INFO ODB-0128] Design: gcd\n[INFO ODB-0130]     Created 54 pins.\n[INFO ODB-0131]     Created 1820 components and 4618 component-terminals.\n[INFO ODB-0132]     Created 2 special nets and 3640 connections.\n[INFO ODB-0133]     Created 350 nets and 978 connections.\n[INFO ODB-0134] Finished DEF file: 45_gcd.def\n[INFO RCX-0431] Defined process_corner X with ext_model_index 0\n[INFO RCX-0029] Defined extraction corner X\n[INFO RCX-0008] extracting parasitics of gcd ...\n[INFO RCX-0435] Reading extraction model file 45_patterns.rules ...\n[INFO RCX-0436] RC segment generation gcd (max_merge_res 0.0) ...\n[INFO RCX-0040] Final 2656 rc segments\n[INFO RCX-0439] Coupling Cap extraction gcd ...\n[INFO RCX-0440] Coupling threshhold is 0.1000 fF, coupling capacitance less than 0.1000 fF will be grounded.\n[INFO RCX-0043] 1954 wires to be extracted\n[INFO RCX-0442] 48% completion -- 954 wires have been extracted\n[INFO RCX-0442] 100% completion -- 1954 wires have been extracted\n[INFO RCX-0045] Extract 350 nets, 2972 rsegs, 2972 caps, 2876 ccs\n[INFO RCX-0015] Finished extracting gcd.\n[INFO RCX-0016] Writing SPEF ...\n[INFO RCX-0443] 350 nets finished\n[INFO RCX-0017] Finished writing SPEF ...\n```\n\n`45_gcd.spef` viewed in `results` directory.\n\n",
                "id": "flow-scripts-tutorial_50"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_51\n\n## Troubleshooting Problems\n\nThis section shows you how to troubleshoot commonly occurring problems\nwith the flow or any of the underlying application tools.\n\n### Debugging Problems in Global Routing\n\nThe global router has a few useful functionalities to understand\nhigh congestion issues in the designs.\n\nCongestion heatmap can be used on any design, whether it has\ncongestion or not. Viewing congestion explained [here](content:heat:maps).\nIf the design has congestion issue, it ends with the error;\n```\n[ERROR GRT-0118] Routing congestion too high.\n```\n\nRefer to the built-in example [here](https://github.com/The-OpenROAD-Project/OpenROAD/blob/master/src/grt/test/congestion5.tcl).\n\nLaunch OpenROAD GUI by running the following command(s) in the terminal in OpenROAD tool root directory:\n\n```shell\ncd ../tools/OpenROAD/src/grt/test/\nopenroad -gui\n```\n\nTo run the global routing, run the following commands in `Tcl Commands` of\nGUI:\n\n```tcl\nsource congestion5.tcl\n```\n\nThe design fail with routing congestion error as follows:\n![Routing_Congestion](./images/grt_congestion_error.webp)\n\nIn the GUI, you can go under `Heat Maps` and mark the\n`Routing Congestion` checkbox to visualize the congestion map.\n![congestion_heatmap](./images/congestion_heatmap_enable.webp)\n\n",
                "id": "flow-scripts-tutorial_51"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_52\n\n## Troubleshooting Problems\n\n#### Dump congestion information to a text file\n\nYou can create a text file with the congestion information of the\nGCells for further investigation on the GUI. To do that, add the\n`-congestion_report_file file_name` to the `global_route` command, as shown below:\n```tcl\nglobal_route -guide_file out.guide -congestion_report_file congest.rpt\n```\n\n",
                "id": "flow-scripts-tutorial_52"
            },
            {
                "summary": "",
                "content": "id:flow-scripts-tutorial_53\n\n## Troubleshooting Problems\n\n#### Visualization of overflowing GCells as markers\n\nWith the file created with the command described above, you can see more\ndetails about the congested GCell, like the total resources, utilization,\nlocation, etc. You can load the file following these steps:\n\n-   step 1: In the `DRC Viewer` window, click on `Load` and select the\n    file with the congestion report.\n-   step 2: A summary of the GCells with congestion is shown in the\n    `DRC Viewer` window. Also, the markers are added to the GUI.\n![GCell_marker](./images/gcell_marker.webp)\n-   step 3: For details on the routing resources information, use the `Inspector` window.\n![zoom_options](./images/zoom_options.webp)\n\nBy Clicking `zoom_to` options, you can enlarge the view as follows:\n![zoomto_gcell](./images/zoomto_gcell.webp)\n\n",
                "id": "flow-scripts-tutorial_53"
            }
        ]
    }
]